diff --git a/node_modules/tus-js-client/dist/browser-test-bundle.js b/node_modules/tus-js-client/dist/browser-test-bundle.js
index 99e8792..6dada6d 100644
--- a/node_modules/tus-js-client/dist/browser-test-bundle.js
+++ b/node_modules/tus-js-client/dist/browser-test-bundle.js
@@ -2128,6 +2128,7 @@ function _toPrimitive(t, r) {
 }
 var PROTOCOL_TUS_V1 = 'tus-v1';
 var PROTOCOL_IETF_DRAFT_03 = 'ietf-draft-03';
+var PROTOCOL_IETF_DRAFT_05 = 'ietf-draft-05';
 var defaultOptions = {
   endpoint: null,
   uploadUrl: null,
@@ -2221,6 +2222,9 @@ var BaseUpload = /*#__PURE__*/function () {
     // An array of upload URLs which are used for uploading the different
     // parts, if the parallelUploads option is used.
     this._parallelUploadUrls = null;
+
+    // The remote upload resource is deferred
+    this._deferred = false;
   }
 
   /**
@@ -2257,7 +2261,7 @@ var BaseUpload = /*#__PURE__*/function () {
         this._emitError(new Error('tus: no file or stream to upload provided'));
         return;
       }
-      if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03].includes(this.options.protocol)) {
+      if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03, PROTOCOL_IETF_DRAFT_05].includes(this.options.protocol)) {
         this._emitError(new Error("tus: unsupported protocol ".concat(this.options.protocol)));
         return;
       }
@@ -2644,6 +2648,7 @@ var BaseUpload = /*#__PURE__*/function () {
       var req = this._openRequest('POST', this.options.endpoint);
       if (this.options.uploadLengthDeferred) {
         req.setHeader('Upload-Defer-Length', '1');
+        this._deferred = true;
       } else {
         req.setHeader('Upload-Length', "".concat(this._size));
       }
@@ -2658,7 +2663,7 @@ var BaseUpload = /*#__PURE__*/function () {
         this._offset = 0;
         promise = this._addChunkToRequest(req);
       } else {
-        if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+        if (this.options.protocol === PROTOCOL_IETF_DRAFT_03 || this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
           req.setHeader('Upload-Complete', '?0');
         }
         promise = this._sendRequest(req, null);
@@ -2743,8 +2748,10 @@ var BaseUpload = /*#__PURE__*/function () {
           _this7._emitHttpError(req, res, 'tus: invalid or missing offset value');
           return;
         }
+        var deferLength = parseInt(xhr.getResponseHeader("Upload-Defer-Length"), 10);
+        _this7._deferred = deferLength === 1;
         var length = Number.parseInt(res.getHeader('Upload-Length'), 10);
-        if (Number.isNaN(length) && !_this7.options.uploadLengthDeferred && _this7.options.protocol === PROTOCOL_TUS_V1) {
+        if (Number.isNaN(length) && !_this7._deferred && !_this7.options.uploadLengthDeferred && _this7.options.protocol === PROTOCOL_TUS_V1) {
           _this7._emitHttpError(req, res, 'tus: invalid or missing length value');
           return;
         }
@@ -2827,7 +2834,11 @@ var BaseUpload = /*#__PURE__*/function () {
       req.setProgressHandler(function (bytesSent) {
         _this9._emitProgress(start + bytesSent, _this9._size);
       });
-      req.setHeader('Content-Type', 'application/offset+octet-stream');
+      if (this.options.protocol === PROTOCOL_TUS_V1) {
+        req.setHeader('Content-Type', 'application/offset+octet-stream');
+      } else if (this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
+        req.setHeader('Content-Type', 'application/partial-upload');
+      }
 
       // The specified chunkSize may be Infinity or the calcluated end position
       // may exceed the file's size. In both cases, we limit the end position to
@@ -2843,9 +2854,10 @@ var BaseUpload = /*#__PURE__*/function () {
         // If the upload length is deferred, the upload size was not specified during
         // upload creation. So, if the file reader is done reading, we know the total
         // upload size and can tell the tus server.
-        if (_this9.options.uploadLengthDeferred && done) {
+        if (_this9._deferred && (!_this9.options.uploadLengthDeferred || done)) {
           _this9._size = _this9._offset + valueSize;
-          req.setHeader('Upload-Length', "".concat(_this9._size));
+          req.setHeader("Upload-Length", "".concat(_this9._size));
+          _this9._deferred = false;
         }
 
         // The specified uploadSize might not match the actual amount of data that a source
@@ -2860,7 +2872,7 @@ var BaseUpload = /*#__PURE__*/function () {
         if (value === null) {
           return _this9._sendRequest(req);
         }
-        if (_this9.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+        if (_this9.options.protocol === PROTOCOL_IETF_DRAFT_03 || _this9.options.protocol === PROTOCOL_IETF_DRAFT_05) {
           req.setHeader('Upload-Complete', done ? '?1' : '?0');
         }
         _this9._emitProgress(_this9._offset, _this9._size);
@@ -3033,6 +3045,8 @@ function openRequest(method, url, options) {
   var req = options.httpStack.createRequest(method, url);
   if (options.protocol === PROTOCOL_IETF_DRAFT_03) {
     req.setHeader('Upload-Draft-Interop-Version', '5');
+  } else if (options.protocol === PROTOCOL_IETF_DRAFT_05) {
+    req.setHeader('Upload-Draft-Interop-Version', '6');
   } else {
     req.setHeader('Tus-Resumable', '1.0.0');
   }
@@ -13792,4 +13806,4 @@ describe('tus', function () {
 });
 
 },{"../..":4,"./helpers/utils":68}]},{},[66])
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIuZXM1L2Jyb3dzZXIvZmlsZVJlYWRlci5qcyIsImxpYi5lczUvYnJvd3Nlci9maWxlU2lnbmF0dXJlLmpzIiwibGliLmVzNS9icm93c2VyL2h0dHBTdGFjay5qcyIsImxpYi5lczUvYnJvd3Nlci9pbmRleC5qcyIsImxpYi5lczUvYnJvd3Nlci9pc1JlYWN0TmF0aXZlLmpzIiwibGliLmVzNS9icm93c2VyL3NvdXJjZXMvRmlsZVNvdXJjZS5qcyIsImxpYi5lczUvYnJvd3Nlci9zb3VyY2VzL1N0cmVhbVNvdXJjZS5qcyIsImxpYi5lczUvYnJvd3Nlci9zb3VyY2VzL2lzQ29yZG92YS5qcyIsImxpYi5lczUvYnJvd3Nlci9zb3VyY2VzL3JlYWRBc0J5dGVBcnJheS5qcyIsImxpYi5lczUvYnJvd3Nlci91cmlUb0Jsb2IuanMiLCJsaWIuZXM1L2Jyb3dzZXIvdXJsU3RvcmFnZS5qcyIsImxpYi5lczUvZXJyb3IuanMiLCJsaWIuZXM1L2xvZ2dlci5qcyIsImxpYi5lczUvbm9vcFVybFN0b3JhZ2UuanMiLCJsaWIuZXM1L3VwbG9hZC5qcyIsImxpYi5lczUvdXVpZC5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvRm9ybURhdGEuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2pzLWJhc2U2NC9iYXNlNjQuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5naWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIm5vZGVfbW9kdWxlcy9yZXF1aXJlcy1wb3J0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3VybC1wYXJzZS9pbmRleC5qcyIsInRlc3Qvc3BlYy9icm93c2VyLWluZGV4LmpzIiwidGVzdC9zcGVjL2hlbHBlcnMvYXNzZXJ0VXJsU3RvcmFnZS5qcyIsInRlc3Qvc3BlYy9oZWxwZXJzL3V0aWxzLmpzIiwidGVzdC9zcGVjL3Rlc3QtYnJvd3Nlci1zcGVjaWZpYy5qcyIsInRlc3Qvc3BlYy90ZXN0LWNvbW1vbi5qcyIsInRlc3Qvc3BlYy90ZXN0LWVuZC10by1lbmQuanMiLCJ0ZXN0L3NwZWMvdGVzdC1wYXJhbGxlbC11cGxvYWRzLmpzIiwidGVzdC9zcGVjL3Rlc3QtdGVybWluYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsWUFBWTs7QUFFWixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0YsT0FBTyxXQUFRLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUksY0FBYyxHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzFFLElBQUksVUFBVSxHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xFLElBQUksV0FBVyxHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQzVFLElBQUksYUFBYSxHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ2hGLFNBQVMsc0JBQXNCLENBQUMsR0FBRyxFQUFFO0VBQUUsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUc7SUFBRSxXQUFTO0VBQUksQ0FBQztBQUFFO0FBQzlGLFNBQVMsT0FBTyxDQUFDLENBQUMsRUFBRTtFQUNsQix5QkFBeUI7O0VBRXpCLE9BQU8sT0FBTyxHQUFHLFVBQVUsSUFBSSxPQUFPLE1BQU0sSUFBSSxRQUFRLElB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SSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07TUFDZCxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLEVBQUUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBQyxtQ0FBbUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzNSLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ3RDLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLEVBQUUsQ0FBQztJQUN0RixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRztJQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMs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LENBQUMsSUFBSSxRQUFRLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxTQUFTLENBQUMsbUNBQW1DLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMzUixJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUN0QyxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxFQUFFLENBQUM7SUFDdEYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUc7SUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxTQUFTLENBQUMsa0NBQWtDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7RUFDaFE7RUFDQSxTQUFTLFlBQVksQ0FBQyxDQUFDLEVBQUU7SUFDdkIsSUFBSSxDQUFDLEdBQUc7TUFDTixNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7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O0VBQ3ZCLENBQUMsQ0FBQztBQUNKOzs7QUN4QkE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMvS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbkxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNqdkRBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDMVRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6dkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzdrQkE7QUFDQTtBQUNBO0FBQ0EsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0FBRXRDLFVBQVUsQ0FBQyxZQUFNO0VBQ2Y7RUFDQTtFQUNBLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QixDQUFDLENBQUM7QUFFRixPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUNsQyxPQUFPLENBQUMseUJBQXlCLENBQUM7QUFDbEMsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQzNCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQzs7Ozs7OytDQ2Q1QixxSkFBQSxtQkFBQSxZQUFBLG9CQUFBLFdBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxTQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxjQUFBLEVBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLGNBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsS0FBQSxLQUFBLENBQUEsd0JBQUEsTUFBQSxHQUFBLE1BQUEsT0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsa0JBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxhQUFBLHVCQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsV0FBQSw4QkFBQSxPQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxXQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLFVBQUEsTUFBQSxZQUFBLE1BQUEsUUFBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLFdBQUEsTUFBQSxtQkFBQSxDQUFBLElBQUEsTUFBQSxZQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLGdCQUFBLEtBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFNBQUEsWUFBQSxTQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsU0FBQSxHQUFBLENBQUEsT0FBQSxPQUFBLENBQUEsQ0FBQSxnQkFBQSxDQUFBLENBQUEsQ0FBQSxlQUFBLEtBQUEsRUFBQSxnQkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsYUFBQSxTQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxtQkFBQSxJQUFBLFlBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsY0FBQSxDQUFBLGFBQUEsSUFBQSxXQUFBLEdBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxxQkFBQSxDQUFBLHFCQUFBLENBQUEsZ0JBQUEsQ0FBQSxnQkFBQSxDQUFBLGdCQUFBLFVBQUEsY0FBQSxrQkFBQSxjQUFBLDJCQUFBLFNBQUEsQ0FBQSxPQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxxQ0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsTUFBQSxRQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxPQUFBLENBQUEsR0FBQSwwQkFBQSxDQUFBLFNBQUEsR0FBQSxTQUFBLENBQUEsU0FBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxZQUFBLHNCQUFBLENBQUEsZ0NBQUEsT0FBQSxXQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsWUFBQSxDQUFBLGdCQUFBLE9BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxzQkFBQSxjQUFBLENBQUEsRUFBQSxDQUFBLGFBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxLQUFBLFNBQUEsQ0FBQSxnQkFBQSxPQUFBLENBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsRUFBQSxJQUFBLFdBQUEsQ0FBQSxJQUFBLE1BQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsQ0FBQSxJQUFBLE1BQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLFdBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLGdCQUFBLENBQUEsV0FBQSxNQUFBLFVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsb0JBQUEsS0FBQSxXQUFBLE1BQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSwyQkFBQSxlQUFBLENBQUEsV0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSwwQkFBQSxFQUFBLDBCQUFBLElBQUEsMEJBQUEscUJBQUEsaUJBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsbUJBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsQ0FBQSxRQUFBLEtBQUEsc0NBQUEsQ0FBQSxLQUFBLENBQUEsb0JBQUEsQ0FBQSxRQUFBLENBQUEsV0FBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsVUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsTUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLG1CQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxLQUFBLENBQUEsbUJBQUEsQ0FBQSxxQkFBQSxDQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxzQkFBQSxDQUFBLENBQUEsTUFBQSxRQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSxpQkFBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLHVCQUFBLENBQUEsQ0FBQSxNQUFBLElBQUEsQ0FBQSxDQUFBLE1BQUEsV0FBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxxQkFBQSxLQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsa0JBQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxtQkFBQSxvQkFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxRQUFBLHFCQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsUUFBQSxlQUFBLENBQUEsQ0FBQSxNQUFBLGFBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUEsbUJBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQSxNQUFBLGtCQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLE9BQUEsU0FBQSx1Q0FBQSxDQUFBLGlCQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsUUFBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLE1BQUEsWUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxVQUFBLElBQUEsQ0FBQSxDQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxPQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsS0FBQSxDQUFBLENBQUEsTUFBQSxXQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLE9BQUEsU0FBQSxzQ0FBQSxDQUFBLENBQUEsUUFBQSxTQUFBLENBQUEsY0FBQSxhQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsTUFBQSxFQUFBLENBQUEsWUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFFBQUEsR0FBQSxDQUFBLFdBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxVQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxRQUFBLEdBQUEsQ0FBQSxXQUFBLFVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxjQUFBLGNBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxRQUFBLENBQUEsQ0FBQSxJQUFBLG9CQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLFVBQUEsR0FBQSxDQUFBLGFBQUEsUUFBQSxDQUFBLFNBQUEsVUFBQSxNQUFBLE1BQUEsYUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsY0FBQSxLQUFBLGlCQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsV0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSw0QkFBQSxDQUFBLENBQUEsSUFBQSxTQUFBLENBQUEsT0FBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLE1BQUEsU0FBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLEtBQUEsYUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUEsT0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxTQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxZQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxnQkFBQSxTQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsa0NBQUEsaUJBQUEsQ0FBQSxTQUFBLEdBQUEsMEJBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxtQkFBQSxLQUFBLEVBQUEsMEJBQUEsRUFBQSxZQUFBLFNBQUEsQ0FBQSxDQUFBLDBCQUFBLG1CQUFBLEtBQUEsRUFBQSxpQkFBQSxFQUFBLFlBQUEsU0FBQSxpQkFBQSxDQUFBLFdBQUEsR0FBQSxNQUFBLENBQUEsMEJBQUEsRUFBQSxDQUFBLHdCQUFBLENBQUEsQ0FBQSxtQkFBQSxhQUFBLENBQUEsUUFBQSxDQUFBLHdCQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsV0FBQSxXQUFBLENBQUEsS0FBQSxDQUFBLEtBQUEsaUJBQUEsNkJBQUEsQ0FBQSxDQUFBLFdBQUEsSUFBQSxDQUFBLENBQUEsSUFBQSxPQUFBLENBQUEsQ0FBQSxJQUFBLGFBQUEsQ0FBQSxXQUFBLE1BQUEsQ0FBQSxjQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLEVBQUEsMEJBQUEsS0FBQSxDQUFBLENBQUEsU0FBQSxHQUFBLDBCQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLHlCQUFBLENBQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxLQUFBLGFBQUEsQ0FBQSxhQUFBLE9BQUEsRUFBQSxDQUFBLE9BQUEscUJBQUEsQ0FBQSxhQUFBLENBQUEsU0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLENBQUEsU0FBQSxFQUFBLENBQUEsaUNBQUEsQ0FBQSxDQUFBLGFBQUEsR0FBQSxhQUFBLEVBQUEsQ0FBQSxDQUFBLEtBQUEsYUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxlQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsT0FBQSxPQUFBLENBQUEsT0FBQSxhQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsV0FBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLFdBQUEscUJBQUEsQ0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxpQ0FBQSxNQUFBLENBQUEsQ0FBQSw2REFBQSxDQUFBLENBQUEsSUFBQSxhQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLGdCQUFBLENBQUEsSUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLE9BQUEsYUFBQSxLQUFBLFdBQUEsQ0FBQSxDQUFBLE1BQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLElBQUEsQ0FBQSxTQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxXQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxRQUFBLENBQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxFQUFBLE9BQUEsQ0FBQSxTQUFBLEtBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLFdBQUEsTUFBQSxDQUFBLGFBQUEsSUFBQSxXQUFBLElBQUEsV0FBQSxJQUFBLFFBQUEsS0FBQSxHQUFBLENBQUEsT0FBQSxJQUFBLFlBQUEsUUFBQSxjQUFBLE1BQUEsZ0JBQUEsR0FBQSxHQUFBLENBQUEsT0FBQSxVQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsSUFBQSxDQUFBLFdBQUEsQ0FBQSxrQkFBQSxDQUFBLENBQUEsTUFBQSxPQUFBLENBQUEsQ0FBQSxJQUFBLE9BQUEsQ0FBQSxNQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLE1BQUEsSUFBQSxXQUFBLEtBQUEsU0FBQSxJQUFBLFdBQUEsQ0FBQSxRQUFBLFVBQUEsSUFBQSxVQUFBLGtCQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsQ0FBQSxDQUFBLEdBQUEsY0FBQSxJQUFBLEtBQUEsaUJBQUEsV0FBQSxrQkFBQSxDQUFBLGFBQUEsSUFBQSxRQUFBLENBQUEsTUFBQSxDQUFBLGtCQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsSUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsTUFBQSxXQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxpQkFBQSxDQUFBLENBQUEsTUFBQSxTQUFBLE1BQUEsYUFBQSxDQUFBLENBQUEsTUFBQSxTQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLGVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxxQkFBQSxDQUFBLElBQUEsQ0FBQSxhQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxTQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsUUFBQSxnQkFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsU0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsY0FBQSxDQUFBLGFBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxRQUFBLHFCQUFBLENBQUEsUUFBQSxLQUFBLHFEQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxTQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsVUFBQSxZQUFBLE1BQUEsV0FBQSxPQUFBLENBQUEsRUFBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLElBQUEsSUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsd0JBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsYUFBQSxDQUFBLGlCQUFBLENBQUEsbUJBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxLQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLGNBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLE1BQUEsZ0JBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLEVBQUEsQ0FBQSxTQUFBLFFBQUEsQ0FBQSxDQUFBLE1BQUEsUUFBQSxXQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLENBQUEsR0FBQSxxQkFBQSxDQUFBLENBQUEsSUFBQSxtQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxnQkFBQSxDQUFBLENBQUEsSUFBQSxTQUFBLElBQUEsUUFBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQSxNQUFBLGtCQUFBLElBQUEseUJBQUEsQ0FBQSxDQUFBLElBQUEsSUFBQSxDQUFBLFVBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEtBQUEsTUFBQSxXQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsTUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLFVBQUEsS0FBQSxDQUFBLGNBQUEsUUFBQSxDQUFBLENBQUEsQ0FBQSxVQUFBLEVBQUEsQ0FBQSxDQUFBLFFBQUEsR0FBQSxhQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEseUJBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsTUFBQSxLQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsa0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxhQUFBLENBQUEsQ0FBQSxZQUFBLENBQUEsWUFBQSxLQUFBLDhCQUFBLGFBQUEsV0FBQSxjQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxnQkFBQSxRQUFBLEtBQUEsUUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBLEdBQUEsVUFBQSxFQUFBLENBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxvQkFBQSxNQUFBLFVBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLE9BQUEsQ0FBQTtBQUFBLFNBQUEsbUJBQUEsR0FBQSxFQUFB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RUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsU0FBQSxZQUFBLFNBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxFQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxTQUFBLEdBQUEsQ0FBQSxPQUFBLE9BQUEsQ0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQSxDQUFBLGVBQUEsS0FBQSxFQUFBLGdCQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLE1BQUEsQ0FBQSxhQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLG1CQUFBLElBQUEsWUFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxjQUFBLENBQUEsYUFBQSxJQUFBLFdBQUEsR0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLHFCQUFBLENBQUEscUJBQUEsQ0FBQSxnQkFBQSxDQUFBLGdCQUFBLENBQUEsZ0JBQUEsVUFBQSxjQUFBLGtCQUFBLGNBQUEsMkJBQUEsU0FBQSxDQUFBLE9BQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLHFDQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxNQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLDBCQUFBLENBQUEsU0FBQSxHQUFBLFNBQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLFlBQUEsc0JBQUEsQ0FBQSxnQ0FBQSxPQUFBLFdBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxZQUFBLENBQUEsZ0JBQUEsT0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLHNCQUFBLGNBQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSxPQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUEsU0FBQSxDQUFBLGdCQUFBLE9BQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxFQUFBLElBQUEsV0FBQSxDQUFBLElBQUEsTUFBQSxTQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxnQkFBQSxDQUFBLElBQUEsTUFBQSxVQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsZ0JBQUEsQ0FBQSxXQUFBLE1BQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxLQUFBLFdBQUEsTUFBQSxDQUFBLEVBQUEsQ0FBQSxhQUFBLDJCQUFBLGVBQUEsQ0FBQSxXQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLDBCQUFBLEVBQUEsMEJBQUEsSUFBQSwwQkFBQSxxQkFBQSxpQkFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxtQkFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEsS0FBQSxzQ0FBQSxDQUFBLEtBQUEsQ0FBQSxvQkFBQSxDQUFBLFFBQUEsQ0FBQSxXQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxlQUFBLENBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxNQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsbUJBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsQ0FBQSxtQkFBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLHNCQUFBLENBQUEsQ0FBQSxNQUFBLFFBQUEsQ0FBQSxLQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsdUJBQUEsQ0FBQSxDQUFBLE1BQUEsSUFBQSxDQUFBLENBQUEsTUFBQSxXQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLHFCQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxrQkFBQSxDQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLE1BQUEsWUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLG1CQUFBLG9CQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLFFBQUEscUJBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxRQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsYUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFBQSxtQkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsa0JBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQSxTQUFBLHVDQUFBLENBQUEsaUJBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxRQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsU0FBQSxDQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsUUFBQSxTQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsSUFBQSxDQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQSxTQUFBLHNDQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsQ0FBQSxjQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxNQUFBLEVBQUEsQ0FBQSxZQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsUUFBQSxHQUFBLENBQUEsV0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFVBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFFBQUEsR0FBQSxDQUFBLFdBQUEsVUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLGNBQUEsY0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFFBQUEsQ0FBQSxDQUFBLElBQUEsb0JBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsVUFBQSxHQUFBLENBQUEsYUFBQSxRQUFBLENBQUEsU0FBQSxVQUFBLE1BQUEsTUFBQSxhQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxjQUFBLEtBQUEsaUJBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxXQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLDRCQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxPQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsS0FBQSxhQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsTUFBQSxPQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsVUFBQSxJQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFNBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFlBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLGdCQUFBLFNBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxrQ0FBQSxpQkFBQSxDQUFBLFNBQUEsR0FBQSwwQkFBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLG1CQUFBLEtBQUEsRUFBQSwwQkFBQSxFQUFBLFlBQUEsU0FBQSxDQUFBLENBQUEsMEJBQUEsbUJBQUEsS0FBQSxFQUFBLGlCQUFBLEVBQUEsWUFBQSxTQUFBLGlCQUFBLENBQUEsV0FBQSxHQUFBLE1BQUEsQ0FBQSwwQkFBQSxFQUFBLENBQUEsd0JBQUEsQ0FBQSxDQUFBLG1CQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsd0JBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxXQUFBLFdBQUEsQ0FBQSxLQUFBLENBQUEsS0FBQSxpQkFBQSw2QkFBQSxDQUFBLENBQUEsV0FBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsYUFBQSxDQUFBLFdBQUEsTUFBQSxDQUFBLGNBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENBQUEsRUFBQSwwQkFBQSxLQUFBLENBQUEsQ0FBQSxTQUFBLEdBQUEsMEJBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBLFNBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLEtBQUEsYUFBQSxDQUFBLGFBQUEsT0FBQSxFQUFBLENBQUEsT0FBQSxxQkFBQSxDQUFBLGFBQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsQ0FBQSxTQUFBLEVBQUEsQ0FBQSxpQ0FBQSxDQUFBLENBQUEsYUFBQSxHQUFBLGFBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxhQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLGVBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxPQUFBLE9BQUEsQ0FBQSxPQUFBLGFBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQSxXQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsV0FBQSxxQkFBQSxDQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGlDQUFBLE1BQUEsQ0FBQSxDQUFBLDZEQUFBLENBQUEsQ0FBQSxJQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsZ0JBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxhQUFBLEtBQUEsV0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsSUFBQSxDQUFBLFNBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFdBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFFBQUEsQ0FBQSxDQUFBLE1BQUEsR0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLFNBQUEsS0FBQSxXQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsV0FBQSxNQUFBLENBQUEsYUFBQSxJQUFBLFdBQUEsSUFBQSxXQUFBLElBQUEsUUFBQSxLQUFBLEdBQUEsQ0FBQSxPQUFBLElBQUEsWUFBQSxRQUFBLGNBQUEsTUFBQSxnQkFBQSxHQUFBLEdBQUEsQ0FBQSxPQUFBLFVBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxJQUFBLENBQUEsV0FBQSxDQUFBLGtCQUFBLENBQUEsQ0FBQSxNQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsT0FBQSxDQUFBLE1BQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxLQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsTUFBQSxJQUFBLFdBQUEsS0FBQSxTQUFBLElBQUEsV0FBQSxDQUFBLFFBQUEsVUFBQSxJQUFBLFVBQUEsa0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLENBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxpQkFBQSxXQUFBLGtCQUFBLENBQUEsYUFBQSxJQUFBLFFBQUEsQ0FBQSxNQUFBLENBQUEsa0JBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxJQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxhQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsTUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLGlCQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsTUFBQSxhQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsZUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLHFCQUFBLENBQUEsSUFBQSxDQUFBLGFBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxRQUFBLGdCQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxTQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsVUFBQSxjQUFBLENBQUEsYUFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLFFBQUEscUJBQUEsQ0FBQSxRQUFBLEtBQUEscURBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxVQUFBLFlBQUEsTUFBQSxXQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsSUFBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSx3QkFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxhQUFBLENBQUEsaUJBQUEsQ0FBQSxtQkFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLE1BQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxVQUFBLEtBQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsY0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsTUFBQSxnQkFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsRUFBQSxDQUFBLFNBQUEsUUFBQSxDQUFBLENBQUEsTUFBQSxRQUFBLFdBQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsQ0FBQSxHQUFBLHFCQUFBLENBQUEsQ0FBQSxJQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLGdCQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsSUFBQSxRQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxPQUFBLE1BQUEsa0JBQUEsSUFBQSx5QkFBQSxDQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsVUFBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxNQUFBLFdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsVUFBQSxLQUFBLENBQUEsY0FBQSxRQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsRUFBQSxDQUFBLENBQUEsUUFBQSxHQUFBLGFBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSx5QkFBQSxPQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxNQUFBLEtBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxrQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxFQUFBLGFBQUEsQ0FBQSxDQUFBLFlBQUEsQ0FBQSxZQUFBLEtBQUEsOEJBQUEsYUFBQSxXQUFBLGNBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLFFBQUEsS0FBQSxRQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxVQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLG9CQUFBLE1BQUEsVUFBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsT0FBQSxDQUFBO0FBQUEsU0FBQSxtQkFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxPQUFBLEtBQUEsR0FBQSxJQUFBLENBQUEsS0FBQSxXQUFBLEtBQUEsSUFBQSxNQUFBLENBQUEsS0FBQSxpQkFBQSxJQUFBLENBQUEsSUFBQSxJQUFBLE9BQUEsQ0FBQSxLQUFBLFlBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSxDQUFBLEtBQUEsRUFBQSxNQUFBO0FBQUEsU0FBQSxrQkFBQSxFQUFBLDZCQUFBLElBQUEsU0FBQSxJQUFBLEdBQUEsU0FBQSxhQUFBLE9BQUEsV0FBQSxPQUFBLEVBQUEsTUFBQSxRQUFBLEdBQUEsR0FBQSxFQUFBLENBQUEsS0FBQSxDQUFBLElBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxLQUFBLElBQUEsa0JBQUEsQ0FBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxVQUFBLEtBQUEs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LEdBQUEsQ0FBQSxDQUFBLGNBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsY0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxLQUFBLEtBQUEsQ0FBQSx3QkFBQSxNQUFBLEdBQUEsTUFBQSxPQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxrQkFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLGFBQUEsdUJBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxXQUFBLDhCQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFdBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsVUFBQSxNQUFBLFlBQUEsTUFBQSxRQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsV0FBQSxNQUFBLG1CQUFBLENBQUEsSUFBQSxNQUFBLFlBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsZ0JBQUEsS0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsU0FBQSxZQUFBLFNBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxFQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxTQUFBLEdBQUEsQ0FBQSxPQUFBLE9BQUEsQ0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQSxDQUFBLGVBQUEsS0FBQSxFQUFBLGdCQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLE1BQUEsQ0FBQSxhQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLG1CQUFBLElBQUEsWUFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxjQUFBLENBQUEsYUFBQSxJQUFBLFdBQUEsR0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLHFCQUFBLENBQUEscUJBQUEsQ0FBQSxnQkFBQSxDQUFBLGdCQUFBLENBQUEsZ0JBQUEsVUFBQSxjQUFBLGtCQUFBLGNBQUEsMkJBQUEsU0FBQSxDQUFBLE9BQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLHFDQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxNQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLDBCQUFBLENBQUEsU0FBQSxHQUFBLFNBQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLFlBQUEsc0JBQUEsQ0FBQSxnQ0FBQSxPQUFBLFdBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxZQUFBLENBQUEsZ0JBQUEsT0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLHNCQUFBLGNBQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSxPQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUEsU0FBQSxDQUFBLGdCQUFBLE9BQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxFQUFBLElBQUEsV0FBQSxDQUFBLElBQUEsTUFBQSxTQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxnQkFBQSxDQUFBLElBQUEsTUFBQSxVQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsZ0JBQUEsQ0FBQSxXQUFBLE1BQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxLQUFBLFdBQUEsTUFBQSxDQUFBLEVBQUEsQ0FBQSxhQUFBLDJCQUFBLGVBQUEsQ0FBQSxXQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLDBCQUFBLEVBQUEsMEJBQUEsSUFBQSwwQkFBQSxxQkFBQSxpQkFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxtQkFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEsS0FBQSxzQ0FBQSxDQUFBLEtBQUEsQ0FBQSxvQkFBQSxDQUFBLFFBQUEsQ0FBQSxXQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxlQUFBLENBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxNQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsbUJBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsQ0FBQSxtQkFBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLHNCQUFBLENBQUEsQ0FBQSxNQUFBLFFBQUEsQ0FBQSxLQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsdUJBQUEsQ0FBQSxDQUFBLE1BQUEsSUFBQSxDQUFBLENBQUEsTUFBQSxXQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLHFCQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxrQkFBQSxDQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLE1BQUEsWUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLG1CQUFBLG9CQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLFFBQUEscUJBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxRQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsYUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFBQSxtQkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsa0JBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQSxTQUFBLHVDQUFBLENBQUEsaUJBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxRQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsU0FBQSxDQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsUUFBQSxTQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsSUFBQSxDQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQSxTQUFBLHNDQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsQ0FBQSxjQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxNQUFBLEVBQUEsQ0FBQSxZQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsUUFBQSxHQUFBLENBQUEsV0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFVBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFFBQUEsR0FBQSxDQUFBLFdBQUEsVUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLGNBQUEsY0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFFBQUEsQ0FBQSxDQUFBLElBQUEsb0JBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsVUFBQSxHQUFBLENBQUEsYUFBQSxRQUFBLENBQUEsU0FBQSxVQUFBLE1BQUEsTUFBQSxhQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxjQUFBLEtBQUEsaUJBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxXQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLDRCQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxPQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsS0FBQSxhQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsTUFBQSxPQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsVUFBQSxJQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFNBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFlBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLGdCQUFBLFNBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxrQ0FBQSxpQkFBQSxDQUFBLFNBQUEsR0FBQSwwQkFBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLG1CQUFBLEtBQUEsRUFBQSwwQkFBQSxFQUFBLFlBQUEsU0FBQSxDQUFBLENBQUEsMEJBQUEsbUJBQUEsS0FBQSxFQUFBLGlCQUFBLEVBQUEsWUFBQSxTQUFBLGlCQUFBLENBQUEsV0FBQSxHQUFBLE1BQUEsQ0FBQSwwQkFBQSxFQUFBLENBQUEsd0JBQUEsQ0FBQSxDQUFBLG1CQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsd0JBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxXQUFBLFdBQUEsQ0FBQSxLQUFBLENBQUEsS0FBQSxpQkFBQSw2QkFBQSxDQUFBLENBQUEsV0FBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsYUFBQSxDQUFBLFdBQUEsTUFBQSxDQUFBLGNBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENBQUEsRUFBQSwwQkFBQSxLQUFBLENBQUEsQ0FBQSxTQUFBLEdBQUEsMEJBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBLFNBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLEtBQUEsYUFBQSxDQUFBLGFBQUEsT0FBQSxFQUFBLENBQUEsT0FBQSxxQkFBQSxDQUFBLGFBQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsQ0FBQSxTQUFBLEVBQUEsQ0FBQSxpQ0FBQSxDQUFBLENBQUEsYUFBQSxHQUFBLGFBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxhQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLGVBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxPQUFBLE9BQUEsQ0FBQSxPQUFBLGFBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQSxXQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsV0FBQSxxQkFBQSxDQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGlDQUFBLE1BQUEsQ0FBQSxDQUFBLDZEQUFBLENBQUEsQ0FBQSxJQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsZ0JBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxhQUFBLEtBQUEsV0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsSUFBQSxDQUFBLFNBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFdBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFFBQUEsQ0FBQSxDQUFBLE1BQUEsR0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLFNBQUEsS0FBQSxXQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsV0FBQSxNQUFBLENBQUEsYUFBQSxJQUFBLFdBQUEsSUFBQSxXQUFBLElBQUEsUUFBQSxLQUFBLEdBQUEsQ0FBQSxPQUFBLElBQUEsWUFBQSxRQUFBLGNBQUEsTUFBQSxnQkFBQSxHQUFBLEdBQUEsQ0FBQSxPQUFBLFVBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxJQUFBLENBQUEsV0FBQSxDQUFBLGtCQUFBLENBQUEsQ0FBQSxNQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsT0FBQSxDQUFBLE1BQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxLQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsTUFBQSxJQUFBLFdBQUEsS0FBQSxTQUFBLElBQUEsV0FBQSxDQUFBLFFBQUEsVUFBQSxJQUFBLFVBQUEsa0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLENBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxpQkFBQSxXQUFBLGtCQUFBLENBQUEsYUFBQSxJQUFBLFFBQUEsQ0FBQSxNQUFBLENBQUEsa0JBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxJQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxhQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsTUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLGlCQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsTUFBQSxhQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsZUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLHFCQUFBLENBQUEsSUFBQSxDQUFBLGFBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxRQUFBLGdCQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxTQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsVUFBQSxjQUFBLENBQUEsYUFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLFFBQUEscUJBQUEsQ0FBQSxRQUFBLEtBQUEscURBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxVQUFBLFlBQUEsTUFBQSxXQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsSUFBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSx3QkFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxhQUFBLENBQUEsaUJBQUEsQ0FBQSxtQkFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLE1BQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxVQUFBLEtBQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsY0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsTUFBQSxnQkFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsRUFBQSxDQUFBLFNBQUEsUUFBQSxDQUFBLENBQUEsTUFBQSxRQUFBLFdBQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsQ0FBQSxHQUFBLHFCQUFBLENBQUEsQ0FBQSxJQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLGdCQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsSUFBQSxRQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxPQUFBLE1BQUEsa0JBQUEsSUFBQSx5QkFBQSxDQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsVUFBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxNQUFBLFdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsVUFBQSxLQUFBLENBQUEsY0FBQSxRQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsRUFBQSxDQUFBLENBQUEsUUFBQSxHQUFBLGFBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSx5QkFBQSxPQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxNQUFBLEtBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxrQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxFQUFBLGFBQUEsQ0FBQSxDQUFBLFlBQUEsQ0FBQSxZQUFBLEtBQUEsOEJBQUEsYUFBQSxXQUFBLGNBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLFFBQUEsS0FBQSxRQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxVQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLG9CQUFBLE1BQUEsVUFBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsT0FBQSxDQUFBO0FBQUEsU0FBQSxtQkFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxPQUFBLEtBQUEsR0FBQSxJQUFBLENBQUEsS0FBQSxXQUFBLEtBQUEsSUFBQSxNQUFBLENBQUEsS0FBQSxpQkFBQSxJQUFBLENBQUEsSUFBQSxJQUFBLE9BQUEsQ0FBQSxLQUFBLFlBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSxDQUFBLEtBQUEsRUFBQSxNQUFBO0FBQUEsU0FBQSxrQkFBQSxFQUFBLDZCQUFBLElBQUEsU0FBQSxJQUFBLEdBQUEsU0FBQSxhQUFBLE9BQUEsV0FBQSxPQUFBLEVBQUEsTUFBQSxRQUFBLEdBQUEsR0FBQSxFQUFBLENBQUEsS0FBQSxDQUFBLElBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxLQUFBLElBQUEsa0JBQUEsQ0FBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxVQUFBLEtBQUEsY0FBQSxPQUFBLEdBQUEsSUFBQSxrQkFBQSxDQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLFdBQUEsR0FBQSxLQUFBLEtBQUEsQ0FBQSxTQUFBO0FBREEsSUFBQSxRQUFBLEdBQXlFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztFQUEzRixhQUFhLEdBQUEsUUFBQSxDQUFiLGFBQWE7RUFBRSxnQkFBZ0IsR0FBQSxRQUFBLENBQWhCLGdCQUFnQjtFQUFFLElBQUksR0FBQSxRQUFBLENBQUosSUFBSTtFQUFFLE9BQU8sR0FBQSxRQUFBLENBQVAsT0FBTztFQUFFLFlBQVksR0FBQSxRQUFBLENBQVosWUFBWTtBQUNwRSxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDOztBQUU1QjtBQUNBOztBQUVBLFFBQVEsQ0FBQyxLQUFLLEVBQUUsWUFBTTtFQUNwQixRQUFRLENBQUMsY0FBYyxFQUFFLFlBQU07SUFDN0IsRUFBRSxDQUFDLGdCQUFnQixFQUFFLFlBQU07TUFDekIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3BDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBTTtJQUN4QixFQUFFLENBQUMsK0NBQStDLEVBQUUsWUFBTTtNQUN4RCxJQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO01BQ25DLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQywyQ0FBMkMsQ0FBQztJQUM3RixDQUFDLENBQUM7SUFFRixFQUFFLENBQUMsd0RBQXdELEVBQUUsWUFBTTtNQUNqRSxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO01BQ25DLElBQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7TUFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUM1Qyx1REFDRixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsRUFBRSxDQUFDLHNCQUFzQixlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxRQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsU0FBQSxRQUFBO1FBQUEsa0JBQUEsUUFBQSxDQUFBLElBQUEsR0FBQSxRQUFBLENBQUEsSUFBQTtVQUFBO1lBQ25CLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSx3QkFBd0I7Y0FDbEMsT0FBTyxFQUFFO2dCQUNQLE1BQU0sRUFBRTtjQUNWLENBQUM7Y0FDRCxRQUFRLEVBQUU7Z0JBQ1IsR0FBRyxFQUFFLE9BQU87Z0JBQ1osR0FBRyxFQUFFLE9BQU87Z0JBQ1osUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLE1BQU0sRUFBRTtjQUNWLENBQUM7Y0FDRCxVQUFVLFdBQUEsV0FBQSxFQUFHLENBQUMsQ0FBQztjQUNmLG9CQUFvQixFQUFFLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDO2NBQzlELFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXO1lBQ3pDLENBQUM7WUFDRCxLQUFLLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQztZQUV0QixNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsUUFBQSxDQUFBLElBQUE7WUFBQSxPQUVFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxRQUFBLENBQUEsSUFBQTtZQUVQLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDO1lBQzlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN6RCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDdEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDaEQsNkRBQ0YsQ0FBQztZQUVELEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUU7Y0FDWjtZQUNGLENBQUMsQ0FBQztZQUFBLFFBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsUUFBQSxDQUFBLElBQUE7WUFFSCxNQUFNLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUV2RCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztZQUNyRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNoRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDO1lBQ2xGLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFFOUIsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLGVBQWUsRUFBRTtjQUNuQjtZQUNGLENBQUMsQ0FBQztZQUFBLFFBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVU7VUFBQTtZQUVsQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztZQUN4RCxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxRQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxPQUFBO0lBQUEsQ0FDeEQsR0FBQztJQUVGLEVBQUUsQ0FBQywyQ0FBMkMsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsU0FBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFVBQUEsU0FBQTtRQUFBLGtCQUFBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLElBQUE7VUFBQTtZQUN4QyxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUM3QixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixRQUFRLEVBQUUsdUJBQXVCO2NBQ2pDLFNBQVMsRUFBRTtZQUNiLENBQUM7WUFFSyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsU0FBQSxDQUFBLElBQUE7WUFBQSxPQUVFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxTQUFBLENBQUEsSUFBQTtZQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFFekQsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsU0FBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztZQUM3QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7WUFFdEQ7WUFDQSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxTQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxRQUFBO0lBQUEsQ0FDOUIsR0FBQztJQUVGLEVBQUUsQ0FBQyxnRUFBZ0UsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsU0FBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFVBQUEsU0FBQTtRQUFBLGtCQUFBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLElBQUE7VUFBQTtZQUM3RCxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUM3QixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixRQUFRLEVBQUUsdUJBQXVCO2NBQ2pDLHdCQUF3QixFQUFFLElBQUk7Y0FDOUIsVUFBVSxXQUFBLFdBQUEsRUFBRyxDQUFDLENBQUM7Y0FDZixlQUFlLFdBQUEsZ0JBQUEsRUFBRyxDQUFDLENBQUM7Y0FDcEIsU0FBUyxFQUFFLGdCQUFnQixDQUFDLFdBQVc7WUFDekMsQ0FBQztZQUVELEtBQUssQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDO1lBQzVCLEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUM7WUFFM0IsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsU0FBQSxDQUFBLElBQUE7WUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztZQUM3QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN0RCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQztZQUNsRixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBRTlCLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUUsOEJBQThCO2dCQUN4QyxlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxTQUFBLENBQUEsSUFBQTtZQUFBLE9BRUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVO1VBQUE7WUFFbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsb0JBQW9CLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDaEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsU0FBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsUUFBQTtJQUFBLENBQ3hELEdBQUM7SUFFRixFQUFFLENBQUMsd0RBQXdELGVBQUEsaUJBQUEsZUFBQSxtQkFBQSxHQUFBLElBQUEsQ0FBRSxTQUFBLFNBQUE7TUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBO01BQUEsT0FBQSxtQkFBQSxHQUFBLElBQUEsVUFBQSxVQUFBLFNBQUE7UUFBQSxrQkFBQSxTQUFBLENBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxJQUFBO1VBQUE7WUFDckQsU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUM7WUFDL0IsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0IsT0FBTyxHQUFHO2NBQ2QsU0FBUyxFQUFFLFNBQVM7Y0FDcEIsUUFBUSxFQUFFLHVCQUF1QjtjQUNqQyx3QkFBd0IsRUFBRSxJQUFJO2NBQzlCLFNBQVMsRUFBRSxDQUFDO2NBQ1osVUFBVSxXQUFBLFdBQUEsRUFBRyxDQUFDLENBQUM7Y0FDZixlQUFlLFdBQUEsZ0JBQUEsRUFBRyxDQUFDLENBQUM7Y0FDcEIsU0FBUyxFQUFFLGdCQUFnQixDQUFDLFdBQVc7WUFDekMsQ0FBQztZQUVELEtBQUssQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDO1lBQzVCLEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUM7WUFFM0IsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsU0FBQSxDQUFBLElBQUE7WUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztZQUM3QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN0RCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQztZQUNsRixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRTdCLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUUsOEJBQThCO2dCQUN4QyxlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxTQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFNBQUEsQ0FBQSxJQUFBO1lBRUg7WUFDQSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM5RCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDO1lBRXZELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDO1lBQ3BELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNoQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDO1lBQ2xGLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFFN0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLFFBQVEsRUFBRSw4QkFBOEI7Z0JBQ3hDLGVBQWUsRUFBRTtjQUNuQjtZQUNGLENBQUMsQ0FBQztZQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVU7VUFBQTtZQUVsQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDdkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUMvRCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxTQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxRQUFBO0lBQUEsQ0FDN0MsR0FBQztJQUVGLEVBQUUsQ0FBQyxnREFBZ0QsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsU0FBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsVUFBQSxTQUFBO1FBQUEsa0JBQUEsU0FBQSxDQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsSUFBQTtVQUFBO1lBQzdDLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSx1QkFBdUI7Y0FDakMsWUFBWSxFQUFFLElBQUk7Y0FDbEIsV0FBVyxFQUFFLElBQUk7Y0FDakIsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFNBQVM7WUFDckMsQ0FBQztZQUVLLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBQSxTQUFBLENBQUEsSUFBQTtZQUFBLE9BRUksU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUM7WUFDN0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRXpCLEtBQUssR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQztZQUNoRCxNQUFNLENBQUEsT0FBQSxDQUFRLEtBQUssRUFBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDbkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBRTdCLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLFlBQVksRUFBRTtZQUNoQixDQUFDLENBQUM7WUFBQSxTQUFBLENBQUEsSUFBQTtZQUFBLE9BRWdCLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVTtVQUFBO1lBQXRDLEdBQUcsR0FBQSxTQUFBLENBQUEsSUFBQTtZQUVULE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxvTEFBQSxNQUFBLENBQzZKLEtBQUssTUFDMUwsQ0FBQztZQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsU0FBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsUUFBQTtJQUFBLENBQzNDLEdBQUM7SUFFRixFQUFFLENBQUMsa0RBQWtELGVBQUEsaUJBQUEsZUFBQSxtQkFBQSxHQUFBLElBQUEsQ0FBRSxTQUFBLFNBQUE7TUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBO01BQUEsT0FBQSxtQkFBQSxHQUFBLElBQUEsVUFBQSxVQUFBLFNBQUE7UUFBQSxrQkFBQSxTQUFBLENBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxJQUFBO1VBQUE7WUFDL0MsU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUM7WUFDL0IsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0IsT0FBTyxHQUFHO2NBQ2QsU0FBUyxFQUFFLFNBQVM7Y0FDcEIsU0FBUyxFQUFFLDJCQUEyQjtjQUN0QyxlQUFlLFdBQUEsZ0JBQUMsR0FBRyxFQUFFO2dCQUNuQixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUM7Z0JBQ3RELE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Y0FDdEMsQ0FBQztjQUNELGVBQWUsV0FBQSxnQkFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO2dCQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUM7Z0JBQ3RELE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ2pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztjQUNqRCxDQUFDO2NBQ0QsU0FBUyxFQUFFLGdCQUFnQixDQUFDLFdBQVc7WUFDekMsQ0FBQztZQUNELEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUM7WUFDakMsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQztZQUUzQixNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsU0FBQSxDQUFBLElBQUE7WUFBQSxPQUVJLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxTQUFBLENBQUEsSUFBQTtZQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDO1lBQ2pELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUUvQixHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsZUFBZSxFQUFFLEVBQUU7Z0JBQ25CLGVBQWUsRUFBRTtjQUNuQjtZQUNGLENBQUMsQ0FBQztZQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVU7VUFBQTtZQUNsQyxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsU0FBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsUUFBQTtJQUFBLENBQ25ELEdBQUM7SUFFRixFQUFFLENBQUMseURBQXlELGVBQUEsaUJBQUEsZUFBQSxtQkFBQSxHQUFBLElBQUEsQ0FBRSxTQUFBLFNBQUE7TUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEscUJBQUEsRUFBQSxZQUFBO01BQUEsT0FBQSxtQkFBQSxHQUFBLElBQUEsVUFBQSxVQUFBLFNBQUE7UUFBQSxrQkFBQSxTQUFBLENBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxJQUFBO1VBQUE7WUFDdEQsU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUM7WUFDL0IsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0IsT0FBTyxHQUFHO2NBQ2QsU0FBUyxFQUFFLFNBQVM7Y0FDcEIsU0FBUyxFQUFFLDJCQUEyQjtjQUN0QyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsV0FBVztZQUN6QyxDQUFDO1lBRUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsU0FBQSxDQUFBLElBQUE7WUFDVCxHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsZUFBZSxFQUFFLEVBQUU7Z0JBQ25CLGVBQWUsRUFBRSxFQUFFO2dCQUNuQixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxTQUFBLENBQUEsSUFBQTtZQUFBLE9BRTZCLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVTtVQUFBO1lBQUEscUJBQUEsR0FBQSxTQUFBLENBQUEsSUFBQTtZQUFuRCxZQUFZLEdBQUEscUJBQUEsQ0FBWixZQUFZO1lBQ3BCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztVQUFBO1VBQUE7WUFBQSxPQUFBLFNBQUEsQ0FBQSxJQUFBO1FBQUE7TUFBQSxHQUFBLFFBQUE7SUFBQSxDQUM5RCxHQUFDO0lBRUYsRUFBRSxDQUFDLHFFQUFxRSxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxTQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFVBQUEsU0FBQTtRQUFBLGtCQUFBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLElBQUE7VUFBQTtZQUNsRSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUM3QixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixTQUFTLEVBQUUsZ0NBQWdDO2NBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxTQUFTO1lBQ3JDLENBQUM7WUFFSyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsU0FBQSxDQUFBLElBQUE7WUFBQSxPQUVJLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxTQUFBLENBQUEsSUFBQTtZQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFFekQsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFZ0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVO1VBQUE7WUFBdEMsR0FBRyxHQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3RCLG9OQUNGLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxTQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxRQUFBO0lBQUEsQ0FDRixHQUFDO0lBRUYsRUFBRSxDQUFDLDhCQUE4QixlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxTQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsVUFBQSxTQUFBO1FBQUEsa0JBQUEsU0FBQSxDQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsSUFBQTtVQUFBO1lBQzNCLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRTtZQUNaLENBQUM7WUFFSyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsU0FBQSxDQUFBLElBQUE7WUFBQSxPQUVFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxTQUFBLENBQUEsSUFBQTtZQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDO1lBQ2pELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUUvQixHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsUUFBUSxFQUFFO2NBQ1o7WUFDRixDQUFDLENBQUM7WUFBQSxTQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUM7WUFDcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRWhDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQztVQUFBO1VBQUE7WUFBQSxPQUFBLFNBQUEsQ0FBQSxJQUFBO1FBQUE7TUFBQSxHQUFBLFFBQUE7SUFBQSxDQUN4RCxHQUFDO0lBRUYsRUFBRSxDQUFDLGdDQUFnQyxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsV0FBQSxVQUFBO1FBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsR0FBQSxVQUFBLENBQUEsSUFBQTtVQUFBO1lBQzdCLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSx1QkFBdUI7Y0FDakMsU0FBUyxFQUFFLENBQUM7Y0FDWixTQUFTLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO2NBQ3hDLFVBQVUsV0FBQSxXQUFBLEVBQUcsQ0FBQyxDQUFDO2NBQ2YsZUFBZSxXQUFBLGdCQUFBLEVBQUcsQ0FBQztZQUNyQixDQUFDO1lBQ0QsS0FBSyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7WUFDNUIsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQztZQUUzQixNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDO1lBQzdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBRXRELEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUU7Y0FDWjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQztZQUNwRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNyRCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQztZQUNsRixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRTdCLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUM7WUFDcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN6RCxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDckQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUM7WUFDbEYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUU3QixHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsZUFBZSxFQUFFO2NBQ25CO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVJLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVTtVQUFBO1lBRWxDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsb0JBQW9CLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN2RCxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzlELE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxVQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxTQUFBO0lBQUEsQ0FDaEUsR0FBQztJQUVGLEVBQUUsQ0FBQywyQ0FBMkMsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsVUFBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBO01BQUEsT0FBQSxtQkFBQSxHQUFBLElBQUEsVUFBQSxXQUFBLFVBQUE7UUFBQSxrQkFBQSxVQUFBLENBQUEsSUFBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBO1VBQUE7WUFDeEMsU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUM7WUFDL0IsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0IsT0FBTyxHQUFHO2NBQ2QsU0FBUyxFQUFFLFNBQVM7Y0FDcEIsUUFBUSxFQUFFLHVCQUF1QjtjQUNqQyxXQUFXLEVBQUUsSUFBSTtjQUNqQixPQUFPLEVBQUUsZ0JBQWdCLENBQUMsU0FBUztZQUNyQyxDQUFDO1lBRUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztZQUM3QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLE1BQU0sRUFBRTtjQUNWO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVnQixPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVU7VUFBQTtZQUF0QyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFFVCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3RCLDBLQUNGLENBQUM7WUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxVQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxTQUFBO0lBQUEsQ0FDaEUsR0FBQztJQUVGLEVBQUUsQ0FBQyw4Q0FBOEMsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsVUFBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFdBQUEsVUFBQTtRQUFBLGtCQUFBLFVBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBQSxDQUFBLElBQUE7VUFBQTtZQUMzQyxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNsQixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixRQUFRLEVBQUUsdUJBQXVCO2NBQ2pDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXO1lBQ3pDLENBQUM7WUFFSyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVJLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDO1lBQzdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBRXJELEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUU7Y0FDWjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVU7VUFBQTtZQUNsQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxVQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxTQUFBO0lBQUEsQ0FDN0MsR0FBQztJQUVGLEVBQUUsQ0FBQyxxQ0FBcUMsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsVUFBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFdBQUEsVUFBQTtRQUFBLGtCQUFBLFVBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBQSxDQUFBLElBQUE7VUFBQTtZQUNsQyxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUM3QixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixRQUFRLEVBQUUsdUJBQXVCO2NBQ2pDLFVBQVUsV0FBQSxXQUFBLEVBQUcsQ0FBQyxDQUFDO2NBQ2YsU0FBUyxFQUFFLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztjQUN4QyxTQUFTLEVBQUU7WUFDYixDQUFDO1lBQ0QsS0FBSyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7WUFFdEIsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQztZQUN0RCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRXpELEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUUsSUFBSTtnQkFDckIsZUFBZSxFQUFFO2NBQ25CO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVJLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVTtVQUFBO1lBRWxDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsb0JBQW9CLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN2RCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxVQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxTQUFBO0lBQUEsQ0FDN0MsR0FBQztJQUVGLEVBQUUsQ0FBQyw4Q0FBOEMsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsVUFBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFdBQUEsVUFBQTtRQUFBLGtCQUFBLFVBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBQSxDQUFBLElBQUE7VUFBQTtZQUMzQyxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUM3QixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixRQUFRLEVBQUUsdUJBQXVCO2NBQ2pDLFNBQVMsRUFBRSw0QkFBNEI7Y0FDdkMsVUFBVSxXQUFBLFdBQUEsRUFBRyxDQUFDLENBQUM7Y0FDZixvQkFBb0IsRUFBRSxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQztjQUM5RCxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO2NBQ3hDLFdBQVcsV0FBQSxZQUFBLEVBQUcsQ0FBQztZQUNqQixDQUFDO1lBQ0QsS0FBSyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQztZQUM1RCxLQUFLLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQztZQUV0QixNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUU5QixTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQztZQUNsRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRXpELEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUUsRUFBRTtnQkFDbkIsZUFBZSxFQUFFO2NBQ25CO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVVLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUVILE1BQU0sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRXZELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDO1lBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNoQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDO1lBQ2xGLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRWxDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVO1VBQUE7WUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsVUFBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsU0FBQTtJQUFBLENBQ3RELEdBQUM7SUFFRixFQUFFLENBQUMsMkNBQTJDLGVBQUEsaUJBQUEsZUFBQSxtQkFBQSxHQUFBLElBQUEsQ0FBRSxTQUFBLFVBQUE7TUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBO01BQUEsT0FBQSxtQkFBQSxHQUFBLElBQUEsVUFBQSxXQUFBLFVBQUE7UUFBQSxrQkFBQSxVQUFBLENBQUEsSUFBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBO1VBQUE7WUFDeEMsU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUM7WUFDL0IsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0IsT0FBTyxHQUFHO2NBQ2QsU0FBUyxFQUFFLFNBQVM7Y0FDcEIsUUFBUSxFQUFFLHVCQUF1QjtjQUNqQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO2NBQ3hDLE9BQU8sV0FBQSxRQUFBLEVBQUcsQ0FBQztZQUNiLENBQUM7WUFFSyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDO1lBQzdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUUvQixHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsUUFBUSxFQUFFO2NBQ1o7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUM7WUFDcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRWhDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVkLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFFRixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUYsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUM7WUFDcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRS9CLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUUsQ0FBQztnQkFDbEIsZUFBZSxFQUFFO2NBQ25CO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVVLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDO1lBQ3BELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUVoQyxHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsZUFBZSxFQUFFO2NBQ25CO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVJLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVTtVQUFBO1lBQ2xDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztVQUFBO1VBQUE7WUFBQSxPQUFBLFVBQUEsQ0FBQSxJQUFBO1FBQUE7TUFBQSxHQUFBLFNBQUE7SUFBQSxDQUM3QyxHQUFDO0lBRUYsRUFBRSxDQUFDLGtDQUFrQyxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsV0FBQSxVQUFBO1FBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsR0FBQSxVQUFBLENBQUEsSUFBQTtVQUFBO1lBQy9CLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSx1QkFBdUI7Y0FDakMsU0FBUyxFQUFFLDRCQUE0QjtjQUN2QyxtQkFBbUIsRUFBRTtZQUN2QixDQUFDO1lBRUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQztZQUNsRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRXpELEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUUsRUFBRTtnQkFDbkIsZUFBZSxFQUFFO2NBQ25CO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVVLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDO1lBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRWxFLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxVQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxTQUFBO0lBQUEsQ0FDSCxHQUFDO0lBRUYsRUFBRSxDQUFDLDZDQUE2QyxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsV0FBQSxVQUFBO1FBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsR0FBQSxVQUFBLENBQUEsSUFBQTtVQUFBO1lBQzFDLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSx1QkFBdUI7Y0FDakMsU0FBUyxFQUFFLDRCQUE0QjtjQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO2NBQ3BDLFdBQVcsRUFBRTtZQUNmLENBQUM7WUFFSyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVJLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDO1lBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUUvQixHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUcsQ0FBRTtZQUNmLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVU7VUFBQTtZQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUMxQyxJQUFJLEtBQUssQ0FDUCw2S0FDRixDQUNGLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxVQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxTQUFBO0lBQUEsQ0FDRixHQUFDO0lBRUYsRUFBRSxDQUFDLHlEQUF5RCxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsV0FBQSxVQUFBO1FBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsR0FBQSxVQUFBLENBQUEsSUFBQTtVQUFBO1lBQ3RELFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSx1QkFBdUI7Y0FDakMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztjQUNwQyxXQUFXLEVBQUU7WUFDZixDQUFDO1lBRUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztZQUM3QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7O1lBRS9CO1lBQ0EsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVU7VUFBQTtZQUVoQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUMxQyxJQUFJLEtBQUssQ0FDUCxtS0FDRixDQUNGLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxVQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxTQUFBO0lBQUEsQ0FDRixHQUFDO0lBRUYsRUFBRSxDQUFDLHdFQUF3RSxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFdBQUEsVUFBQTtRQUFBLGtCQUFBLFVBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBQSxDQUFBLElBQUE7VUFBQTtZQUNyRSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUM3QixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixVQUFVLEVBQUUsR0FBRztjQUNmLFFBQVEsRUFBRSx1QkFBdUI7Y0FDakMsV0FBVyxFQUFFLEVBQUU7Y0FDZixPQUFPLEVBQUUsZ0JBQWdCLENBQUMsU0FBUztZQUNyQyxDQUFDO1lBRUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztZQUM3QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRXpELEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUU7Y0FDWjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFZ0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVO1VBQUE7WUFBdEMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3RCLG1SQUNGLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxVQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxTQUFBO0lBQUEsQ0FDRixHQUFDO0lBRUYsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQU07TUFDdEQsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztNQUNuQyxJQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ2xDLFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsV0FBVyxFQUFFO01BQ2YsQ0FBQyxDQUFDO01BQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUM1QywrREFDRixDQUFDO0lBQ0gsQ0FBQyxDQUFDOztJQUVGO0lBQ0E7SUFDQSxFQUFFLENBQUMseUJBQXlCLGVBQUEsaUJBQUEsZUFBQSxtQkFBQSxHQUFBLElBQUEsQ0FBRSxTQUFBLFVBQUE7TUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBO01BQUEsT0FBQSxtQkFBQSxHQUFBLElBQUEsVUFBQSxXQUFBLFVBQUE7UUFBQSxrQkFBQSxVQUFBLENBQUEsSUFBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBO1VBQUE7WUFDdEIsU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUM7WUFDL0IsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0IsT0FBTyxHQUFHO2NBQ2QsU0FBUyxFQUFFLFNBQVM7Y0FDcEIsUUFBUSxFQUFFLHNCQUFzQjtjQUNoQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztjQUN6QixTQUFTLEVBQUUsZ0JBQWdCLENBQUMsV0FBVztZQUN6QyxDQUFDO1lBRUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztZQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztZQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLFFBQVEsRUFBRTtjQUNaO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVVLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUVoQyxHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFO1lBQ1YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVVLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUUvQixHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsZUFBZSxFQUFFLENBQUM7Z0JBQ2xCLGVBQWUsRUFBRTtjQUNuQjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztZQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFFaEMsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztZQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLGVBQWUsRUFBRSxDQUFDO2dCQUNsQixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7WUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRWhDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVO1VBQUE7WUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsVUFBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsU0FBQTtJQUFBLENBQzdDLEdBQUM7O0lBRUY7SUFDQTtJQUNBLEVBQUUsQ0FBQyx1RUFBdUUsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsVUFBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxxQkFBQSxFQUFBLHNCQUFBLEVBQUEsTUFBQSxFQUFBLHNCQUFBLEVBQUEsc0JBQUEsRUFBQSxNQUFBO01BQUEsT0FBQSxtQkFBQSxHQUFBLElBQUEsVUFBQSxXQUFBLFVBQUE7UUFBQSxrQkFBQSxVQUFBLENBQUEsSUFBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBO1VBQUE7WUFDcEUsU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUM7WUFDL0IsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0IsT0FBTyxHQUFHO2NBQ2QsU0FBUyxFQUFFLFNBQVM7Y0FDcEIsUUFBUSxFQUFFLHNCQUFzQjtjQUNoQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztjQUN6QixTQUFTLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO2NBQ3hDLGFBQWEsRUFBRSxTQUFBLGNBQUE7Z0JBQUEsT0FBTSxJQUFJO2NBQUE7WUFDM0IsQ0FBQztZQUVELEtBQUssQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2pELEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFckQsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztZQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztZQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLFFBQVEsRUFBRTtjQUNaO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVVLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUVoQyxHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFO1lBQ1YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVVLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUUvQixHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsZUFBZSxFQUFFLENBQUM7Z0JBQ2xCLGVBQWUsRUFBRTtjQUNuQjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztZQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFFaEMsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztZQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLGVBQWUsRUFBRSxDQUFDO2dCQUNsQixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7WUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRWhDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVO1VBQUE7WUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQUEscUJBQUEsR0FFM0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFBLHNCQUFBLEdBQUEsY0FBQSxDQUFBLHFCQUFBLE1BQTVDLE1BQU0sR0FBQSxzQkFBQTtZQUNiLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFBQSxzQkFBQSxHQUNsRSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUEsc0JBQUEsR0FBQSxjQUFBLENBQUEsc0JBQUEsTUFBNUMsTUFBTSxHQUFBLHNCQUFBO1lBQ2IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsVUFBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsU0FBQTtJQUFBLENBQ3BGLEdBQUM7O0lBRUY7SUFDQTtJQUNBLEVBQUUsQ0FBQyx1RUFBdUUsZUFBQSxpQkFBQSxlQUFBLG1CQUFBLEdBQUEsSUFBQSxDQUFFLFNBQUEsVUFBQTtNQUFBLElBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFdBQUEsVUFBQTtRQUFBLGtCQUFBLFVBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBQSxDQUFBLElBQUE7VUFBQTtZQUNwRSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUM3QixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixRQUFRLEVBQUUsc0JBQXNCO2NBQ2hDLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO2NBQ3pCLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7Y0FDeEMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztjQUNwQyxhQUFhLEVBQUUsU0FBQSxjQUFBO2dCQUFBLE9BQU0sS0FBSztjQUFBO1lBQzVCLENBQUM7WUFFSyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVJLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1lBQzVDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7WUFFL0I7WUFDQSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTlDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUU7WUFDVixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVO1VBQUE7WUFFaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztVQUFBO1VBQUE7WUFBQSxPQUFBLFVBQUEsQ0FBQSxJQUFBO1FBQUE7TUFBQSxHQUFBLFNBQUE7SUFBQSxDQUNqRCxHQUFDO0lBRUYsRUFBRSxDQUFDLGdFQUFnRSxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBO01BQUEsT0FBQSxtQkFBQSxHQUFBLElBQUEsVUFBQSxXQUFBLFVBQUE7UUFBQSxrQkFBQSxVQUFBLENBQUEsSUFBQSxHQUFBLFVBQUEsQ0FBQSxJQUFBO1VBQUE7WUFDN0QsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0IsT0FBTyxHQUFHO2NBQ2QsU0FBUyxFQUFFLElBQUksYUFBYSxDQUFDLENBQUM7Y0FDOUIsUUFBUSxFQUFFLHNCQUFzQjtjQUNoQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztjQUN6QixTQUFTLFdBQUEsVUFBQSxFQUFHLENBQUMsQ0FBQztjQUNkLE9BQU8sV0FBQSxRQUFBLEVBQUcsQ0FBQztZQUNiLENBQUM7WUFFRCxLQUFLLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQztZQUMzQixLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQztZQUVuQixNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUM7WUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVSLElBQUksQ0FBQyxHQUFHLENBQUM7VUFBQTtZQUVULEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUM7WUFDdkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFFeEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7WUFDckQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUM7WUFDbkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztVQUFBO1VBQUE7WUFBQSxPQUFBLFVBQUEsQ0FBQSxJQUFBO1FBQUE7TUFBQSxHQUFBLFNBQUE7SUFBQSxDQUNqRCxHQUFDO0lBRUYsRUFBRSxDQUFDLHNEQUFzRCxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsV0FBQSxVQUFBO1FBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsR0FBQSxVQUFBLENBQUEsSUFBQTtVQUFBO1lBQ25ELFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSxzQkFBc0I7Y0FDaEMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDO2NBQ2pCLFNBQVMsV0FBQSxVQUFBLEVBQUcsQ0FBQyxDQUFDO2NBQ2QsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFNBQVM7WUFDckMsQ0FBQztZQUNELEtBQUssQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDO1lBRXJCLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUM7WUFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRS9CLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUU7WUFDVixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUM7WUFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOztZQUUvQjtZQUNBLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFOUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVU7VUFBQTtZQUVoQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsVUFBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsU0FBQTtJQUFBLENBQ2pELEdBQUM7SUFFRixFQUFFLENBQUMsd0RBQXdELGVBQUEsaUJBQUEsZUFBQSxtQkFBQSxHQUFBLElBQUEsQ0FBRSxTQUFBLFVBQUE7TUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsTUFBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsV0FBQSxVQUFBO1FBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsR0FBQSxVQUFBLENBQUEsSUFBQTtVQUFBO1lBQ3JELFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSxzQkFBc0I7Y0FDaEMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDO2NBQ2pCLE9BQU8sV0FBQSxRQUFBLEVBQUcsQ0FBQztZQUNiLENBQUM7WUFFRCxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQztZQUVuQixNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7WUFDNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVJLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1lBQzVDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUUvQixLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUV4QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFZCxHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFO1lBQ1YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVtQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7VUFBQTtZQUFqRSxNQUFNLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFFWixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztVQUFBO1VBQUE7WUFBQSxPQUFBLFVBQUEsQ0FBQSxJQUFBO1FBQUE7TUFBQSxHQUFBLFNBQUE7SUFBQSxDQUNqQyxHQUFDO0lBRUYsRUFBRSxDQUFDLHdFQUF3RSxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUE7TUFBQSxPQUFBLG1CQUFBLEdBQUEsSUFBQSxVQUFBLFdBQUEsVUFBQTtRQUFBLGtCQUFBLFVBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBQSxDQUFBLElBQUE7VUFBQTtZQUNyRSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUM3QixPQUFPLEdBQUc7Y0FDZCxTQUFTLEVBQUUsU0FBUztjQUNwQixRQUFRLEVBQUUsc0JBQXNCO2NBQ2hDLFNBQVMsRUFBRSxDQUFDO2NBQ1osZUFBZSxXQUFBLGdCQUFBLEVBQUc7Z0JBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztjQUNoQjtZQUNGLENBQUM7WUFFRCxLQUFLLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRTdDLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUM7WUFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRS9CLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUU7Y0FDWjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztZQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFFaEMsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLGVBQWUsRUFBRTtjQUNuQjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFbUIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1VBQUE7WUFBakUsTUFBTSxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBRVosTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsVUFBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsU0FBQTtJQUFBLENBQ2pDLEdBQUM7SUFFRixFQUFFLENBQUMsOEVBQThFLGVBQUEsaUJBQUEsZUFBQSxtQkFBQSxHQUFBLElBQUEsQ0FBRSxTQUFBLFVBQUE7TUFBQSxJQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsTUFBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsV0FBQSxVQUFBO1FBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsR0FBQSxVQUFBLENBQUEsSUFBQTtVQUFBO1lBQzNFLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSxzQkFBc0I7Y0FDaEMsT0FBTyxXQUFBLFFBQUEsRUFBRyxDQUFDO1lBQ2IsQ0FBQztZQUVELEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRXJDLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUksU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUM7WUFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRS9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVkLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUU7Y0FDWjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFbUIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1VBQUE7WUFBakUsTUFBTSxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBRVosTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztVQUFBO1VBQUE7WUFBQSxPQUFBLFVBQUEsQ0FBQSxJQUFBO1FBQUE7TUFBQSxHQUFBLFNBQUE7SUFBQSxDQUNqQyxHQUFDO0lBRUYsRUFBRSxDQUFDLHdEQUF3RCxlQUFBLGlCQUFBLGVBQUEsbUJBQUEsR0FBQSxJQUFBLENBQUUsU0FBQSxVQUFBO01BQUEsSUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsR0FBQTtNQUFBLE9BQUEsbUJBQUEsR0FBQSxJQUFBLFVBQUEsV0FBQSxVQUFBO1FBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsR0FBQSxVQUFBLENBQUEsSUFBQTtVQUFBO1lBQ3JELFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzdCLE9BQU8sR0FBRztjQUNkLFNBQVMsRUFBRSxTQUFTO2NBQ3BCLFFBQVEsRUFBRSxzQkFBc0I7Y0FDaEMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDO2NBQ2pCLE9BQU8sV0FBQSxRQUFBLEVBQUcsQ0FBQyxDQUFDO2NBQ1osU0FBUyxFQUFFLGdCQUFnQixDQUFDLFdBQVc7WUFDekMsQ0FBQztZQUNELEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDO1lBRW5CLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUM7WUFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRS9CLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixRQUFRLEVBQUU7Y0FDWjtZQUNGLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztZQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFFaEMsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFVSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsVUFBQSxDQUFBLElBQUE7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztZQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRSxHQUFHO2NBQ1gsZUFBZSxFQUFFO2dCQUNmLGVBQWUsRUFBRSxDQUFDO2dCQUNsQixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7WUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRWhDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUU7Y0FDbkI7WUFDRixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7WUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRWhDLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUU7WUFDVixDQUFDLENBQUM7WUFBQSxVQUFBLENBQUEsSUFBQTtZQUFBLE9BRVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1VBQUE7WUFBbkMsR0FBRyxHQUFBLFVBQUEsQ0FBQSxJQUFBO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7WUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRS9CLEdBQUcsQ0FBQyxXQUFXLENBQUM7Y0FDZCxNQUFNLEVBQUUsR0FBRztjQUNYLGVBQWUsRUFBRTtnQkFDZixlQUFlLEVBQUUsQ0FBQztnQkFDbEIsZUFBZSxFQUFFO2NBQ25CO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVVLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztVQUFBO1lBQW5DLEdBQUcsR0FBQSxVQUFBLENBQUEsSUFBQTtZQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUVoQyxHQUFHLENBQUMsV0FBVyxDQUFDO2NBQ2QsTUFBTSxFQUFFLEdBQUc7Y0FDWCxlQUFlLEVBQUU7Z0JBQ2YsZUFBZSxFQUFFO2NBQ25CO1lBQ0YsQ0FBQyxDQUFDO1lBQUEsVUFBQSxDQUFBLElBQUE7WUFBQSxPQUVJLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVTtVQUFBO1lBQ2xDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUEsVUFBQSxDQUFBLElBQUE7UUFBQTtNQUFBLEdBQUEsU0FBQTtJQUFBLENBQzdDLEdBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7Ozs7OzsrQ0M1eUNGLHFKQUFBLG1CQUFBLFlBQUEsb0JBQUEsV0FBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLFNBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLGNBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsY0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxLQUFBLEtBQUEsQ0FBQSx3QkFBQSxNQUFBLEdBQUEsTUFBQSxPQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxrQkFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLGFBQUEsdUJBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxXQUFBLDhCQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFdBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsVUFBQSxNQUFBLFlBQUEsTUFBQSxRQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsV0FBQSxNQUFBLG1CQUFBLENBQUEsSUFBQSxNQUFBLFlBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsZ0JBQUEsS0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsU0FBQSxZQUFBLFNBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxFQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxTQUFBLEdBQUEsQ0FBQSxPQUFBLE9BQUEsQ0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQSxDQUFBLGVBQUEsS0FBQSxFQUFBLGdCQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLE1BQUEsQ0FBQSxhQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLG1CQUFBLElBQUEsWUFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxjQUFBLENBQUEsYUFBQSxJQUFBLFdBQUEsR0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLHFCQUFBLENBQUEscUJBQUEsQ0FBQSxnQkFBQSxDQUFBLGdCQUFBLENBQUEsZ0JBQUEsVUFBQSxjQUFBLGtCQUFBLGNBQUEsMkJBQUEsU0FBQSxDQUFBLE9BQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLHFDQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxNQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLDBCQUFBLENBQUEsU0FBQSxHQUFBLFNBQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLFlBQUEsc0JBQUEsQ0FBQSxnQ0FBQSxPQUFBLFdBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxZQUFBLENBQUEsZ0JBQUEsT0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLHNCQUFBLGNBQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSxPQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUEsU0FBQSxDQUFBLGdCQUFBLE9BQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxFQUFBLElBQUEsV0FBQSxDQUFBLElBQUEsTUFBQSxTQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxnQkFBQSxDQUFBLElBQUEsTUFBQSxVQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsZ0JBQUEsQ0FBQSxXQUFBLE1BQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxLQUFBLFdBQUEsTUFBQSxDQUFBLEVBQUEsQ0FBQSxhQUFBLDJCQUFBLGVBQUEsQ0FBQSxXQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLDBCQUFBLEVBQUEsMEJBQUEsSUFBQSwwQkFBQSxxQkFBQSxpQkFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxtQkFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEsS0FBQSxzQ0FBQSxDQUFBLEtBQUEsQ0FBQSxvQkFBQSxDQUFBLFFBQUEsQ0FBQSxXQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxlQUFBLENBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxNQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsbUJBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsQ0FBQSxtQkFBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLHNCQUFBLENBQUEsQ0FBQSxNQUFBLFFBQUEsQ0FBQSxLQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsdUJBQUEsQ0FBQSxDQUFBLE1BQUEsSUFBQSxDQUFBLENBQUEsTUFBQSxXQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLHFCQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxrQkFBQSxDQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLE1BQUEsWUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLG1CQUFBLG9CQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLFFBQUEscUJBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxRQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsYUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFBQSxtQkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsa0JBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQSxTQUFBLHVDQUFBLENBQUEsaUJBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxRQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsU0FBQSxDQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsUUFBQSxTQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsSUFBQSxDQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQSxTQUFBLHNDQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsQ0FBQSxjQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxNQUFBLEVBQUEsQ0FBQSxZQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsUUFBQSxHQUFBLENBQUEsV0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFVBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFFBQUEsR0FBQSxDQUFBLFdBQUEsVUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLGNBQUEsY0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFFBQUEsQ0FBQSxDQUFBLElBQUEsb0JBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsVUFBQSxHQUFBLENBQUEsYUFBQSxRQUFBLENBQUEsU0FBQSxVQUFBLE1BQUEsTUFBQSxhQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxjQUFBLEtBQUEsaUJBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxXQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLDRCQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxPQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsS0FBQSxhQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsTUFBQSxPQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsVUFBQSxJQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFNBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFlBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLGdCQUFBLFNBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxrQ0FBQSxpQkFBQSxDQUFBLFNBQUEsR0FBQSwwQkFBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLG1CQUFBLEtBQUEsRUFBQSwwQkFBQSxFQUFBLFlBQUEsU0FBQSxDQUFBLENBQUEsMEJBQUEsbUJBQUEsS0FBQSxFQUFBLGlCQUFBLEVBQUEsWUFBQSxTQUFBLGlCQUFBLENBQUEsV0FBQSxHQUFBLE1BQUEsQ0FBQSwwQkFBQSxFQUFBLENBQUEsd0JBQUEsQ0FBQSxDQUFBLG1CQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsd0JBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxXQUFBLFdBQUEsQ0FBQSxLQUFBLENBQUEsS0FBQSxpQkFBQSw2QkFBQSxDQUFBLENBQUEsV0FBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsYUFBQSxDQUFBLFdBQUEsTUFBQSxDQUFBLGNBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENBQUEsRUFBQSwwQkFBQSxLQUFBLENBQUEsQ0FBQSxTQUFBLEdBQUEsMEJBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBLFNBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLEtBQUEsYUFBQSxDQUFBLGFBQUEsT0FBQSxFQUFBLENBQUEsT0FBQSxxQkFBQSxDQUFBLGFBQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsQ0FBQSxTQUFBLEVBQUEsQ0FBQSxpQ0FBQSxDQUFBLENBQUEsYUFBQSxHQUFBLGFBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxhQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLGVBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxPQUFBLE9BQUEsQ0FBQSxPQUFBLGFBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQSxXQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsV0FBQSxxQkFBQSxDQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGlDQUFBLE1BQUEsQ0FBQSxDQUFBLDZEQUFBLENBQUEsQ0FBQSxJQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsZ0JBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxhQUFBLEtBQUEsV0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsSUFBQSxDQUFBLFNBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFdBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFFBQUEsQ0FBQSxDQUFBLE1BQUEsR0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLFNBQUEsS0FBQSxXQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsV0FBQSxNQUFBLENBQUEsYUFBQSxJQUFBLFdBQUEsSUFBQSxXQUFBLElBQUEsUUFBQSxLQUFBLEdBQUEsQ0FBQSxPQUFBLElBQUEsWUFBQSxRQUFBLGNBQUEsTUFBQSxnQkFBQSxHQUFBLEdBQUEsQ0FBQSxPQUFBLFVBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxJQUFBLENBQUEsV0FBQSxDQUFBLGtCQUFBLENBQUEsQ0FBQSxNQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsT0FBQSxDQUFBLE1BQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxLQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsTUFBQSxJQUFBLFdBQUEsS0FBQSxTQUFBLElBQUEsV0FBQSxDQUFBLFFBQUEsVUFBQSxJQUFBLFVBQUEsa0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLENBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxpQkFBQSxXQUFBLGtCQUFBLENBQUEsYUFBQSxJQUFBLFFBQUEsQ0FBQSxNQUFBLENBQUEsa0JBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxJQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQSxhQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsTUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLGlCQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsTUFBQSxhQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsZUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLHFCQUFBLENBQUEsSUFBQSxDQUFBLGFBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxRQUFBLGdCQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxTQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsVUFBQSxjQUFBLENBQUEsYUFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLFFBQUEscUJBQUEsQ0FBQSxRQUFBLEtBQUEscURBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxVQUFBLFlBQUEsTUFBQSxXQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsSUFBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSx3QkFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxhQUFBLENBQUEsaUJBQUEsQ0FBQSxtQkFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLE1BQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxVQUFBLEtBQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsY0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsTUFBQSxnQkFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsRUFBQSxDQUFBLFNBQUEsUUFBQSxDQUFBLENBQUEsTUFBQSxRQUFBLFdBQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsQ0FBQSxHQUFBLHFCQUFBLENBQUEsQ0FBQSxJQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLGdCQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsSUFBQSxRQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxPQUFBLE1BQUEsa0JBQUEsSUFBQSx5QkFBQSxDQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsVUFBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxNQUFBLFdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsVUFBQSxLQUFBLENBQUEsY0FBQSxRQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsRUFBQSxDQUFBLENBQUEsUUFBQSxHQUFBLGFBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSx5QkFBQSxPQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxNQUFBLEtBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxrQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxFQUFBLGFBQUEsQ0FBQSxDQUFB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T0FBQSxDQUFBLENBQUEsZ0JBQUEsQ0FBQSxDQUFBLENBQUEsZUFBQSxLQUFBLEVBQUEsZ0JBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBLGFBQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsbUJBQUEsSUFBQSxZQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGNBQUEsQ0FBQSxhQUFBLElBQUEsV0FBQSxHQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEscUJBQUEsQ0FBQSxxQkFBQSxDQUFBLGdCQUFBLENBQUEsZ0JBQUEsQ0FBQSxnQkFBQSxVQUFBLGNBQUEsa0JBQUEsY0FBQSwyQkFBQSxTQUFBLENBQUEsT0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEscUNBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLE1BQUEsUUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsMEJBQUEsQ0FBQSxTQUFBLEdBQUEsU0FBQSxDQUFBLFNBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsWUFBQSxzQkFBQSxDQUFBLGdDQUFBLE9BQUEsV0FBQSxDQUFBLElBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFlBQUEsQ0FBQSxnQkFBQSxPQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsc0JBQUEsY0FBQSxDQUFBLEVBQUEsQ0FBQSxhQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsS0FBQSxTQUFBLENBQUEsZ0JBQUEsT0FBQSxDQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsZUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLEVBQUEsSUFBQSxXQUFBLENBQUEsSUFBQSxNQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLENBQUEsSUFBQSxNQUFBLFVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxXQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxnQkFBQSxDQUFBLFdBQUEsTUFBQSxVQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxTQUFBLENBQUEsRUFBQSxDQUFBLG9CQUFBLEtBQUEsV0FBQSxNQUFBLENBQUEsRUFBQSxDQUFBLGFBQUEsMkJBQUEsZUFBQSxDQUFBLFdBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxnQkFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsMEJBQUEsRUFBQSwwQkFBQSxJQUFBLDBCQUFBLHFCQUFBLGlCQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLG1CQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxLQUFBLENBQUEsUUFBQSxLQUFBLHNDQUFBLENBQUEsS0FBQSxDQUFBLG9CQUFBLENBQUEsUUFBQSxDQUFBLFdBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLE1BQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxtQkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxDQUFBLG1CQUFBLENBQUEscUJBQUEsQ0FBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsc0JBQUEsQ0FBQSxDQUFBLE1BQUEsUUFBQSxDQUFBLEtBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsaUJBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSx1QkFBQSxDQUFBLENBQUEsTUFBQSxJQUFBLENBQUEsQ0FBQSxNQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxLQUFBLENBQUEscUJBQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLGtCQUFBLENBQUEsQ0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsbUJBQUEsb0JBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsUUFBQSxxQkFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFFBQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxhQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxFQUFBLG1CQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxrQkFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLE1BQUEsWUFBQSxDQUFBLENBQUEsR0FBQSxPQUFBLFNBQUEsdUNBQUEsQ0FBQSxpQkFBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLFFBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxtQkFBQSxDQUFBLENBQUEsSUFBQSxTQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxTQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsVUFBQSxJQUFBLENBQUEsQ0FBQSxLQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsT0FBQSxlQUFBLENBQUEsQ0FBQSxNQUFBLEtBQUEsQ0FBQSxDQUFBLE1BQUEsV0FBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxTQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLE1BQUEsWUFBQSxDQUFBLENBQUEsR0FBQSxPQUFBLFNBQUEsc0NBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxDQUFBLGNBQUEsYUFBQSxDQUFBLFFBQUEsQ0FBQSxLQUFBLE1BQUEsRUFBQSxDQUFBLFlBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxRQUFBLEdBQUEsQ0FBQSxXQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsVUFBQSxHQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsUUFBQSxHQUFBLENBQUEsV0FBQSxVQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsY0FBQSxjQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsUUFBQSxDQUFBLENBQUEsSUFBQSxvQkFBQSxDQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSxVQUFBLEdBQUEsQ0FBQSxhQUFBLFFBQUEsQ0FBQSxTQUFBLFVBQUEsTUFBQSxNQUFBLGFBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLGNBQUEsS0FBQSxpQkFBQSxPQUFBLENBQUEsUUFBQSxDQUFBLFdBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsNEJBQUEsQ0FBQSxDQUFBLElBQUEsU0FBQSxDQUFBLE9BQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxLQUFBLGFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxNQUFBLE9BQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxVQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsSUFBQSxPQUFBLElBQUEsU0FBQSxJQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxPQUFBLElBQUEsWUFBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsZ0JBQUEsU0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLGtDQUFBLGlCQUFBLENBQUEsU0FBQSxHQUFBLDBCQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsbUJBQUEsS0FBQSxFQUFBLDBCQUFBLEVBQUEsWUFBQSxTQUFBLENBQUEsQ0FBQSwwQkFBQSxtQkFBQSxLQUFBLEVBQUEsaUJBQUEsRUFBQSxZQUFBLFNBQUEsaUJBQUEsQ0FBQSxXQUFBLEdBQUEsTUFBQSxDQUFBLDBCQUFBLEVBQUEsQ0FBQSx3QkFBQSxDQUFBLENBQUEsbUJBQUEsYUFBQSxDQUFBLFFBQUEsQ0FBQSx3QkFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFdBQUEsV0FBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLGlCQUFBLDZCQUFBLENBQUEsQ0FBQSxXQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsT0FBQSxDQUFBLENBQUEsSUFBQSxhQUFBLENBQUEsV0FBQSxNQUFBLENBQUEsY0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQSxFQUFBLDBCQUFBLEtBQUEsQ0FBQSxDQUFBLFNBQUEsR0FBQSwwQkFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSx5QkFBQSxDQUFBLENBQUEsU0FBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsS0FBQSxhQUFBLENBQUEsYUFBQSxPQUFBLEVBQUEsQ0FBQSxPQUFBLHFCQUFBLENBQUEsYUFBQSxDQUFBLFNBQUEsR0FBQSxNQUFBLENBQUEsYUFBQSxDQUFBLFNBQUEsRUFBQSxDQUFBLGlDQUFBLENBQUEsQ0FBQSxhQUFBLEdBQUEsYUFBQSxFQUFBLENBQUEsQ0FBQSxLQUFBLGFBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsZUFBQSxDQUFBLEtBQUEsQ0FBQSxHQUFBLE9BQUEsT0FBQSxDQUFBLE9BQUEsYUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxJQUFBLFdBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxXQUFBLHFCQUFBLENBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxnQkFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsaUNBQUEsTUFBQSxDQUFBLENBQUEsNkRBQUEsQ0FBQSxDQUFBLElBQUEsYUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxnQkFBQSxDQUFBLElBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLGFBQUEsS0FBQSxXQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsU0FBQSxJQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxPQUFBLElBQUEsV0FBQSxJQUFBLENBQUEsSUFBQSxPQUFBLElBQUEsUUFBQSxDQUFBLENBQUEsTUFBQSxHQUFBLE1BQUEsRUFBQSxPQUFBLENBQUEsU0FBQSxLQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxXQUFBLE1BQUEsQ0FBQSxhQUFBLElBQUEsV0FBQSxJQUFBLFdBQUEsSUFBQSxRQUFBLEtBQUEsR0FBQSxDQUFBLE9BQUEsSUFBQSxZQUFBLFFBQUEsY0FBQSxNQUFBLGdCQUFBLEdBQUEsR0FBQSxDQUFBLE9BQUEsVUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLElBQUEsQ0FBQSxXQUFBLENBQUEsa0JBQUEsQ0FBQSxDQUFBLE1BQUEsT0FBQSxDQUFBLENBQUEsSUFBQSxPQUFBLENBQUEsTUFBQSxLQUFBLEVBQUEsQ0FBQSxDQUFBLEtBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLElBQUEsV0FBQSxLQUFBLFNBQUEsSUFBQSxXQUFBLENBQUEsUUFBQSxVQUFBLElBQUEsVUFBQSxrQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLENBQUEsQ0FBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLGlCQUFBLFdBQUEsa0JBQUEsQ0FBQSxhQUFBLElBQUEsUUFBQSxDQUFBLE1BQUEsQ0FBQSxrQkFBQSxPQUFBLENBQUEsRUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLElBQUEsWUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLE1BQUEsV0FBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsaUJBQUEsQ0FBQSxDQUFBLE1BQUEsU0FBQSxNQUFBLGFBQUEsQ0FBQSxDQUFBLE1BQUEsU0FBQSxJQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxlQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEscUJBQUEsQ0FBQSxJQUFBLENBQUEsYUFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLFFBQUEsZ0JBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxVQUFBLGNBQUEsQ0FBQSxhQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxTQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsUUFBQSxxQkFBQSxDQUFBLFFBQUEsS0FBQSxxREFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsU0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsWUFBQSxNQUFBLFdBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxhQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsTUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLE1BQUEsU0FBQSxJQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLHdCQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxRQUFBLENBQUEsR0FBQSxDQUFBLGFBQUEsQ0FBQSxpQkFBQSxDQUFBLG1CQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsTUFBQSxJQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFVBQUEsS0FBQSxDQUFBLGNBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxjQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxNQUFBLGdCQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxFQUFBLENBQUEsU0FBQSxRQUFBLENBQUEsQ0FBQSxNQUFBLFFBQUEsV0FBQSxTQUFBLENBQUEsRUFBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsQ0FBQSxDQUFBLEdBQUEscUJBQUEsQ0FBQSxDQUFBLElBQUEsbUJBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsZ0JBQUEsQ0FBQSxDQUFBLElBQUEsU0FBQSxJQUFBLFFBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLE9BQUEsTUFBQSxrQkFBQSxJQUFBLHlCQUFBLENBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxVQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLE1BQUEsV0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxVQUFBLEtBQUEsQ0FBQSxjQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUEsVUFBQSxFQUFBLENBQUEsQ0FBQSxRQUFBLEdBQUEsYUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLHlCQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsTUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLE1BQUEsS0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLGtCQUFBLENBQUEsQ0FB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QUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLGdCQUFBLEtBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFNBQUEsWUFBQSxTQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsU0FBQSxHQUFBLENBQUEsT0FBQSxPQUFBLENBQUEsQ0FBQSxnQkFBQSxDQUFBLENBQUEsQ0FBQSxlQUFBLEtBQUEsRUFBQSxnQkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsYUFBQSxTQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxtQkFBQSxJQUFBLFlBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsY0FBQSxDQUFBLGFBQUEsSUFBQSxXQUFBLEdBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxxQkFBQSxDQUFBLHFCQUFBLENBQUEsZ0JBQUEsQ0FBQSxnQkFBQSxDQUFBLGdCQUFBLFVBQUEsY0FBQSxrQkFBQSxjQUFBLDJCQUFBLFNBQUEsQ0FBQSxPQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxxQ0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsTUFBQSxRQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxPQUFBLENBQUEsR0FBQSwwQkFBQSxDQUFBLFNBQUEsR0FBQSxTQUFBLENBQUEsU0FBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxZQUFBLHNCQUFBLENBQUEsZ0NBQUEsT0FBQSxXQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsWUFBQSxDQUFBLGdCQUFBLE9BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxzQkFBQSxjQUFBLENBQUEsRUFBQSxDQUFBLGFBQUEsT0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxLQUFBLFNBQUEsQ0FBQSxnQkFBQSxPQUFBLENBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsRUFBQSxJQUFBLFdBQUEsQ0FBQSxJQUFBLE1BQUEsU0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsQ0FBQSxJQUFBLE1BQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLFdBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLGdCQUFBLENBQUEsV0FBQSxNQUFBLFVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsb0JBQUEsS0FBQSxXQUFBLE1BQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSwyQkFBQSxlQUFBLENBQUEsV0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSwwQkFBQSxFQUFBLDBCQUFBLElBQUEsMEJBQUEscUJBQUEsaUJBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsbUJBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsQ0FBQSxRQUFBLEtBQUEsc0NBQUEsQ0FBQSxLQUFBLENBQUEsb0JBQUEsQ0FBQSxRQUFBLENBQUEsV0FBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsVUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsTUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLG1CQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxLQUFBLENBQUEsbUJBQUEsQ0FBQSxxQkFBQSxDQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxzQkFBQSxDQUFBLENBQUEsTUFBQSxRQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSxpQkFBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLHVCQUFBLENBQUEsQ0FBQSxNQUFBLElBQUEsQ0FBQSxDQUFBLE1BQUEsV0FBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxxQkFBQSxLQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsa0JBQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxNQUFBLFlBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxtQkFBQSxvQkFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxRQUFBLHFCQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsUUFBQSxlQUFBLENBQUEsQ0FBQSxNQUFBLGFBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUEsbUJBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQSxNQUFBLGtCQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLE9BQUEsU0FBQSx1Q0FBQSxDQUFBLGlCQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsUUFBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLE1BQUEsWUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLFFBQUEsU0FBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxVQUFBLElBQUEsQ0FBQSxDQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxPQUFBLGVBQUEsQ0FBQSxDQUFBLE1BQUEsS0FBQSxDQUFBLENBQUEsTUFBQSxXQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLE9BQUEsU0FBQSxzQ0FBQSxDQUFBLENBQUEsUUFBQSxTQUFBLENBQUEsY0FBQSxhQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsTUFBQSxFQUFBLENBQUEsWUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLFFBQUEsR0FBQSxDQUFBLFdBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxVQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxRQUFBLEdBQUEsQ0FBQSxXQUFBLFVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxjQUFBLGNBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxRQUFBLENBQUEsQ0FBQSxJQUFBLG9CQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLFVBQUEsR0FBQSxDQUFBLGFBQUEsUUFBQSxDQUFBLFNBQUEsVUFBQSxNQUFBLE1BQUEsYUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsY0FBQSxLQUFBLGlCQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsV0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSw0QkFBQSxDQUFBLENBQUEsSUFBQSxTQUFBLENBQUEsT0FBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLE1BQUEsU0FBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLEtBQUEsYUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUEsT0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxTQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxZQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxnQkFBQSxTQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsa0NBQUEsaUJBQUEsQ0FBQSxTQUFBLEdBQUEsMEJBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxtQkFBQSxLQUFBLEVBQUEsMEJBQUEsRUFBQSxZQUFBLFNBQUEsQ0FBQSxDQUFBLDBCQUFBLG1CQUFBLEtBQUEsRUFBQSxpQkFBQSxFQUFBLFlBQUEsU0FBQSxpQkFBQSxDQUFBLFdBQUEsR0FBQSxNQUFBLENBQUEsMEJBQUEsRUFBQSxDQUFBLHdCQUFBLENBQUEsQ0FBQSxtQkFBQSxhQUFBLENBQUEsUUFBQSxDQUFBLHdCQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsV0FBQSxXQUFBLENBQUEsS0FBQSxDQUFBLEtBQUEsaUJBQUEsNkJBQUEsQ0FBQSxDQUFBLFdBQUEsSUFBQSxDQUFBLENBQUEsSUFBQSxPQUFBLENBQUEsQ0FBQSxJQUFBLGFBQUEsQ0FBQSxXQUFBLE1BQUEsQ0FBQSxjQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLEVBQUEsMEJBQUEsS0FBQSxDQUFBLENBQUEsU0FBQSxHQUFBLDBCQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLHlCQUFBLENBQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxLQUFBLGFBQUEsQ0FBQSxhQUFBLE9BQUEsRUFBQSxDQUFBLE9BQUEscUJBQUEsQ0FBQSxhQUFBLENBQUEsU0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLENBQUEsU0FBQSxFQUFBLENBQUEsaUNBQUEsQ0FBQSxDQUFBLGFBQUEsR0FBQSxhQUFBLEVBQUEsQ0FBQSxDQUFBLEtBQUEsYUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxlQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsT0FBQSxPQUFBLENBQUEsT0FBQSxhQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLG1CQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsV0FBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLFdBQUEscUJBQUEsQ0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxpQ0FBQSxNQUFBLENBQUEsQ0FBQSw2REFBQSxDQUFBLENBQUEsSUFBQSxhQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLGdCQUFBLENBQUEsSUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLE9BQUEsYUFBQSxLQUFBLFdBQUEsQ0FBQSxDQUFBLE1BQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsUUFBQSxDQUFBLElBQUEsQ0FBQSxTQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxXQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsSUFBQSxRQUFBLENBQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxFQUFBLE9BQUEsQ0FBQSxTQUFBLEtBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLFdBQUEsTUFBQSxDQUFBLGFBQUEsSUFBQSxXQUFBLElBQUEsV0FBQSxJQUFBLFFBQUEsS0FBQSxHQUFBLENBQUEsT0FBQSxJQUFBLFlBQUEsUUFBQSxjQUFBLE1BQUEsZ0JBQUEsR0FBQSxHQUFBLENBQUEsT0FBQSxVQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsSUFBQSxDQUFBLFdBQUEsQ0FBQSxrQkFBQSxDQUFBLENBQUEsTUFBQSxPQUFBLENBQUEsQ0FBQSxJQUFBLE9BQUEsQ0FBQSxNQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLE1BQUEsSUFBQSxXQUFBLEtBQUEsU0FBQSxJQUFBLFdBQUEsQ0FBQSxRQUFBLFVBQUEsSUFBQSxVQUFBLGtCQUFBLENBQUEsQ0FBQSxJQUFBLFFBQUEsQ0FBQSxDQUFBLEdBQUEsY0FBQSxJQUFBLEtBQUEsaUJBQUEsV0FBQSxrQkFBQSxDQUFBLGFBQUEsSUFBQSxRQUFBLENBQUEsTUFBQSxDQUFBLGtCQUFBLE9BQUEsQ0FBQSxFQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsSUFBQSxZQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsTUFBQSxXQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxpQkFBQSxDQUFBLENBQUEsTUFBQSxTQUFBLE1BQUEsYUFBQSxDQUFBLENBQUEsTUFBQSxTQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLGVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxxQkFBQSxDQUFBLElBQUEsQ0FBQSxhQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxTQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsUUFBQSxnQkFBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsU0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsY0FBQSxDQUFBLGFBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxRQUFBLFNBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxRQUFBLHFCQUFBLENBQUEsUUFBQSxLQUFBLHFEQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxTQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsVUFBQSxZQUFBLE1BQUEsV0FBQSxPQUFBLENBQUEsRUFBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLElBQUEsSUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsd0JBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsYUFBQSxDQUFBLGlCQUFBLENBQUEsbUJBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxNQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxLQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLGNBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLE1BQUEsZ0JBQUEsSUFBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLEVBQUEsQ0FBQSxTQUFBLFFBQUEsQ0FBQSxDQUFBLE1BQUEsUUFBQSxXQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLENBQUEsR0FBQSxxQkFBQSxDQUFBLENBQUEsSUFBQSxtQkFBQSxDQUFBLENBQUEsSUFBQSxRQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxnQkFBQSxDQUFBLENBQUEsSUFBQSxTQUFBLElBQUEsUUFBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQSxNQUFBLGtCQUFBLElBQUEseUJBQUEsQ0FBQSxDQUFBLElBQUEsSUFBQSxDQUFBLFVBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEtBQUEsTUFBQSxXQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsTUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLFVBQUEsS0FBQSxDQUFBLGNBQUEsUUFBQSxDQUFBLENBQUEsQ0FBQSxVQUFBLEVBQUEsQ0FBQSxDQUFBLFFBQUEsR0FBQSxhQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEseUJBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLFVBQUEsQ0FBQSxNQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLENBQUEsTUFBQSxLQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsa0JBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxhQUFBLENBQUEsQ0FBQSxZQUFBLENBQUEsWUFBQSxLQUFBLDhCQUFBLGFBQUEsV0FBQSxjQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxnQkFBQSxRQUFBLEtBQUEsUUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBLEdBQUEsVUFBQSxFQUFBLENBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxvQkFBQSxNQUFBLFVBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLE9BQUEsQ0FBQTtBQUFBLFNBQUEsbUJBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsT0FBQSxLQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUEsV0FBQSxLQUFBLElBQUEsTUFBQSxDQUFBLEtBQUEsaUJBQUEsSUFBQSxDQUFBLElBQUEsSUFBQSxPQUFBLENBQUEsS0FBQSxZQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxFQUFBLElBQUEsQ0FBQSxLQUFBLEVBQUEsTUFBQTtBQUFBLFNBQUEsa0JBQUEsRUFBQSw2QkFBQSxJQUFBLFNBQUEsSUFBQSxHQUFBLFNBQUEsYUFBQSxPQUFBLFdBQUEsT0FBQSxFQUFBLE1BQUEsUUFBQSxHQUFBLEdBQUEsRUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLEVB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RyxDQUFDO2tCQUNqQyxPQUFPLENBQUMsQ0FBQztnQkFDWCxDQUFDLENBQUM7Y0FDSjtZQUNGLENBQUM7WUFDRCxLQUFLLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDO1lBQ2pDLEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUM7WUFFM0IsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsMkJBQTJCLEVBQUUsT0FBTyxDQUFDO1lBQUEsU0FBQSxDQUFBLElBQUE7WUFBQSxPQUVqRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7VUFBQTtZQUFuQyxHQUFHLEdBQUEsU0FBQSxDQUFBLElBQUE7WUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQztZQUNqRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFFakMsR0FBRyxDQUFDLFdBQVcsQ0FBQztjQUNkLE1BQU0sRUFBRTtZQUNWLENBQUMsQ0FBQztZQUFBLFNBQUEsQ0FBQSxJQUFBO1lBQUEsT0FFSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztVQUFBO1lBQ2xELE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7VUFBQTtVQUFBO1lBQUEsT0FBQSxTQUFBLENBQUEsSUFBQTtRQUFBO01BQUEsR0FBQSxRQUFBO0lBQUEsQ0FDbkQsR0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9pc1JlYWN0TmF0aXZlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1JlYWN0TmF0aXZlLmpzXCIpKTtcbnZhciBfdXJpVG9CbG9iID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91cmlUb0Jsb2IuanNcIikpO1xudmFyIF9GaWxlU291cmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zb3VyY2VzL0ZpbGVTb3VyY2UuanNcIikpO1xudmFyIF9TdHJlYW1Tb3VyY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NvdXJjZXMvU3RyZWFtU291cmNlLmpzXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqL1xuICBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgICByZXR1cm4gZTtcbiAgfTtcbiAgdmFyIHQsXG4gICAgZSA9IHt9LFxuICAgIHIgPSBPYmplY3QucHJvdG90eXBlLFxuICAgIG4gPSByLmhhc093blByb3BlcnR5LFxuICAgIG8gPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgfHwgZnVuY3Rpb24gKHQsIGUsIHIpIHtcbiAgICAgIHRbZV0gPSByLnZhbHVlO1xuICAgIH0sXG4gICAgaSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sID8gU3ltYm9sIDoge30sXG4gICAgYSA9IGkuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCIsXG4gICAgYyA9IGkuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiLFxuICAgIHUgPSBpLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuICBmdW5jdGlvbiBkZWZpbmUodCwgZSwgcikge1xuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgZSwge1xuICAgICAgdmFsdWU6IHIsXG4gICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICB3cml0YWJsZTogITBcbiAgICB9KSwgdFtlXTtcbiAgfVxuICB0cnkge1xuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKHQpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUodCwgZSwgcikge1xuICAgICAgcmV0dXJuIHRbZV0gPSByO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gd3JhcCh0LCBlLCByLCBuKSB7XG4gICAgdmFyIGkgPSBlICYmIGUucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gZSA6IEdlbmVyYXRvcixcbiAgICAgIGEgPSBPYmplY3QuY3JlYXRlKGkucHJvdG90eXBlKSxcbiAgICAgIGMgPSBuZXcgQ29udGV4dChuIHx8IFtdKTtcbiAgICByZXR1cm4gbyhhLCBcIl9pbnZva2VcIiwge1xuICAgICAgdmFsdWU6IG1ha2VJbnZva2VNZXRob2QodCwgciwgYylcbiAgICB9KSwgYTtcbiAgfVxuICBmdW5jdGlvbiB0cnlDYXRjaCh0LCBlLCByKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwibm9ybWFsXCIsXG4gICAgICAgIGFyZzogdC5jYWxsKGUsIHIpXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidGhyb3dcIixcbiAgICAgICAgYXJnOiB0XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBlLndyYXAgPSB3cmFwO1xuICB2YXIgaCA9IFwic3VzcGVuZGVkU3RhcnRcIixcbiAgICBsID0gXCJzdXNwZW5kZWRZaWVsZFwiLFxuICAgIGYgPSBcImV4ZWN1dGluZ1wiLFxuICAgIHMgPSBcImNvbXBsZXRlZFwiLFxuICAgIHkgPSB7fTtcbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG4gIHZhciBwID0ge307XG4gIGRlZmluZShwLCBhLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICB2YXIgZCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICB2ID0gZCAmJiBkKGQodmFsdWVzKFtdKSkpO1xuICB2ICYmIHYgIT09IHIgJiYgbi5jYWxsKHYsIGEpICYmIChwID0gdik7XG4gIHZhciBnID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID0gR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocCk7XG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyh0KSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIGRlZmluZSh0LCBlLCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKGUsIHQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcih0LCBlKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKHIsIG8sIGksIGEpIHtcbiAgICAgIHZhciBjID0gdHJ5Q2F0Y2godFtyXSwgdCwgbyk7XG4gICAgICBpZiAoXCJ0aHJvd1wiICE9PSBjLnR5cGUpIHtcbiAgICAgICAgdmFyIHUgPSBjLmFyZyxcbiAgICAgICAgICBoID0gdS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIGggJiYgXCJvYmplY3RcIiA9PSBfdHlwZW9mKGgpICYmIG4uY2FsbChoLCBcIl9fYXdhaXRcIikgPyBlLnJlc29sdmUoaC5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB0LCBpLCBhKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCB0LCBpLCBhKTtcbiAgICAgICAgfSkgOiBlLnJlc29sdmUoaCkudGhlbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHUudmFsdWUgPSB0LCBpKHUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCB0LCBpLCBhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBhKGMuYXJnKTtcbiAgICB9XG4gICAgdmFyIHI7XG4gICAgbyh0aGlzLCBcIl9pbnZva2VcIiwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHQsIG4pIHtcbiAgICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBlKGZ1bmN0aW9uIChlLCByKSB7XG4gICAgICAgICAgICBpbnZva2UodCwgbiwgZSwgcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHIgPSByID8gci50aGVuKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLCBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZykgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoZSwgciwgbikge1xuICAgIHZhciBvID0gaDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGksIGEpIHtcbiAgICAgIGlmIChvID09PSBmKSB0aHJvdyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICBpZiAobyA9PT0gcykge1xuICAgICAgICBpZiAoXCJ0aHJvd1wiID09PSBpKSB0aHJvdyBhO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiB0LFxuICAgICAgICAgIGRvbmU6ICEwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBmb3IgKG4ubWV0aG9kID0gaSwgbi5hcmcgPSBhOzspIHtcbiAgICAgICAgdmFyIGMgPSBuLmRlbGVnYXRlO1xuICAgICAgICBpZiAoYykge1xuICAgICAgICAgIHZhciB1ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShjLCBuKTtcbiAgICAgICAgICBpZiAodSkge1xuICAgICAgICAgICAgaWYgKHUgPT09IHkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIHU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcIm5leHRcIiA9PT0gbi5tZXRob2QpIG4uc2VudCA9IG4uX3NlbnQgPSBuLmFyZztlbHNlIGlmIChcInRocm93XCIgPT09IG4ubWV0aG9kKSB7XG4gICAgICAgICAgaWYgKG8gPT09IGgpIHRocm93IG8gPSBzLCBuLmFyZztcbiAgICAgICAgICBuLmRpc3BhdGNoRXhjZXB0aW9uKG4uYXJnKTtcbiAgICAgICAgfSBlbHNlIFwicmV0dXJuXCIgPT09IG4ubWV0aG9kICYmIG4uYWJydXB0KFwicmV0dXJuXCIsIG4uYXJnKTtcbiAgICAgICAgbyA9IGY7XG4gICAgICAgIHZhciBwID0gdHJ5Q2F0Y2goZSwgciwgbik7XG4gICAgICAgIGlmIChcIm5vcm1hbFwiID09PSBwLnR5cGUpIHtcbiAgICAgICAgICBpZiAobyA9IG4uZG9uZSA/IHMgOiBsLCBwLmFyZyA9PT0geSkgY29udGludWU7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBwLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IG4uZG9uZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgXCJ0aHJvd1wiID09PSBwLnR5cGUgJiYgKG8gPSBzLCBuLm1ldGhvZCA9IFwidGhyb3dcIiwgbi5hcmcgPSBwLmFyZyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGUsIHIpIHtcbiAgICB2YXIgbiA9IHIubWV0aG9kLFxuICAgICAgbyA9IGUuaXRlcmF0b3Jbbl07XG4gICAgaWYgKG8gPT09IHQpIHJldHVybiByLmRlbGVnYXRlID0gbnVsbCwgXCJ0aHJvd1wiID09PSBuICYmIGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0gJiYgKHIubWV0aG9kID0gXCJyZXR1cm5cIiwgci5hcmcgPSB0LCBtYXliZUludm9rZURlbGVnYXRlKGUsIHIpLCBcInRocm93XCIgPT09IHIubWV0aG9kKSB8fCBcInJldHVyblwiICE9PSBuICYmIChyLm1ldGhvZCA9IFwidGhyb3dcIiwgci5hcmcgPSBuZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAnXCIgKyBuICsgXCInIG1ldGhvZFwiKSksIHk7XG4gICAgdmFyIGkgPSB0cnlDYXRjaChvLCBlLml0ZXJhdG9yLCByLmFyZyk7XG4gICAgaWYgKFwidGhyb3dcIiA9PT0gaS50eXBlKSByZXR1cm4gci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gaS5hcmcsIHIuZGVsZWdhdGUgPSBudWxsLCB5O1xuICAgIHZhciBhID0gaS5hcmc7XG4gICAgcmV0dXJuIGEgPyBhLmRvbmUgPyAocltlLnJlc3VsdE5hbWVdID0gYS52YWx1ZSwgci5uZXh0ID0gZS5uZXh0TG9jLCBcInJldHVyblwiICE9PSByLm1ldGhvZCAmJiAoci5tZXRob2QgPSBcIm5leHRcIiwgci5hcmcgPSB0KSwgci5kZWxlZ2F0ZSA9IG51bGwsIHkpIDogYSA6IChyLm1ldGhvZCA9IFwidGhyb3dcIiwgci5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIiksIHIuZGVsZWdhdGUgPSBudWxsLCB5KTtcbiAgfVxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkodCkge1xuICAgIHZhciBlID0ge1xuICAgICAgdHJ5TG9jOiB0WzBdXG4gICAgfTtcbiAgICAxIGluIHQgJiYgKGUuY2F0Y2hMb2MgPSB0WzFdKSwgMiBpbiB0ICYmIChlLmZpbmFsbHlMb2MgPSB0WzJdLCBlLmFmdGVyTG9jID0gdFszXSksIHRoaXMudHJ5RW50cmllcy5wdXNoKGUpO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkodCkge1xuICAgIHZhciBlID0gdC5jb21wbGV0aW9uIHx8IHt9O1xuICAgIGUudHlwZSA9IFwibm9ybWFsXCIsIGRlbGV0ZSBlLmFyZywgdC5jb21wbGV0aW9uID0gZTtcbiAgfVxuICBmdW5jdGlvbiBDb250ZXh0KHQpIHtcbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbe1xuICAgICAgdHJ5TG9jOiBcInJvb3RcIlxuICAgIH1dLCB0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsdWVzKGUpIHtcbiAgICBpZiAoZSB8fCBcIlwiID09PSBlKSB7XG4gICAgICB2YXIgciA9IGVbYV07XG4gICAgICBpZiAocikgcmV0dXJuIHIuY2FsbChlKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUubmV4dCkgcmV0dXJuIGU7XG4gICAgICBpZiAoIWlzTmFOKGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgbyA9IC0xLFxuICAgICAgICAgIGkgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgZm9yICg7ICsrbyA8IGUubGVuZ3RoOykgaWYgKG4uY2FsbChlLCBvKSkgcmV0dXJuIG5leHQudmFsdWUgPSBlW29dLCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgICAgICAgIHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGkubmV4dCA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoX3R5cGVvZihlKSArIFwiIGlzIG5vdCBpdGVyYWJsZVwiKTtcbiAgfVxuICByZXR1cm4gR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIG8oZywgXCJjb25zdHJ1Y3RvclwiLCB7XG4gICAgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgfSksIG8oR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwge1xuICAgIHZhbHVlOiBHZW5lcmF0b3JGdW5jdGlvbixcbiAgICBjb25maWd1cmFibGU6ICEwXG4gIH0pLCBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgdSwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSwgZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgZSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdCAmJiB0LmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiAhIWUgJiYgKGUgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8IFwiR2VuZXJhdG9yRnVuY3Rpb25cIiA9PT0gKGUuZGlzcGxheU5hbWUgfHwgZS5uYW1lKSk7XG4gIH0sIGUubWFyayA9IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZih0LCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAodC5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKHQsIHUsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLCB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZyksIHQ7XG4gIH0sIGUuYXdyYXAgPSBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB7XG4gICAgICBfX2F3YWl0OiB0XG4gICAgfTtcbiAgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKSwgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBjLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCBlLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yLCBlLmFzeW5jID0gZnVuY3Rpb24gKHQsIHIsIG4sIG8sIGkpIHtcbiAgICB2b2lkIDAgPT09IGkgJiYgKGkgPSBQcm9taXNlKTtcbiAgICB2YXIgYSA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAodCwgciwgbiwgbyksIGkpO1xuICAgIHJldHVybiBlLmlzR2VuZXJhdG9yRnVuY3Rpb24ocikgPyBhIDogYS5uZXh0KCkudGhlbihmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQuZG9uZSA/IHQudmFsdWUgOiBhLm5leHQoKTtcbiAgICB9KTtcbiAgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKGcpLCBkZWZpbmUoZywgdSwgXCJHZW5lcmF0b3JcIiksIGRlZmluZShnLCBhLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCBkZWZpbmUoZywgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pLCBlLmtleXMgPSBmdW5jdGlvbiAodCkge1xuICAgIHZhciBlID0gT2JqZWN0KHQpLFxuICAgICAgciA9IFtdO1xuICAgIGZvciAodmFyIG4gaW4gZSkgci5wdXNoKG4pO1xuICAgIHJldHVybiByLnJldmVyc2UoKSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGZvciAoOyByLmxlbmd0aDspIHtcbiAgICAgICAgdmFyIHQgPSByLnBvcCgpO1xuICAgICAgICBpZiAodCBpbiBlKSByZXR1cm4gbmV4dC52YWx1ZSA9IHQsIG5leHQuZG9uZSA9ICExLCBuZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgIH07XG4gIH0sIGUudmFsdWVzID0gdmFsdWVzLCBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcbiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoZSkge1xuICAgICAgaWYgKHRoaXMucHJldiA9IDAsIHRoaXMubmV4dCA9IDAsIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB0LCB0aGlzLmRvbmUgPSAhMSwgdGhpcy5kZWxlZ2F0ZSA9IG51bGwsIHRoaXMubWV0aG9kID0gXCJuZXh0XCIsIHRoaXMuYXJnID0gdCwgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSksICFlKSBmb3IgKHZhciByIGluIHRoaXMpIFwidFwiID09PSByLmNoYXJBdCgwKSAmJiBuLmNhbGwodGhpcywgcikgJiYgIWlzTmFOKCtyLnNsaWNlKDEpKSAmJiAodGhpc1tyXSA9IHQpO1xuICAgIH0sXG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuZG9uZSA9ICEwO1xuICAgICAgdmFyIHQgPSB0aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtcbiAgICAgIGlmIChcInRocm93XCIgPT09IHQudHlwZSkgdGhyb3cgdC5hcmc7XG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uIGRpc3BhdGNoRXhjZXB0aW9uKGUpIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHRocm93IGU7XG4gICAgICB2YXIgciA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobiwgbykge1xuICAgICAgICByZXR1cm4gYS50eXBlID0gXCJ0aHJvd1wiLCBhLmFyZyA9IGUsIHIubmV4dCA9IG4sIG8gJiYgKHIubWV0aG9kID0gXCJuZXh0XCIsIHIuYXJnID0gdCksICEhbztcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIG8gPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgbyA+PSAwOyAtLW8pIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLnRyeUVudHJpZXNbb10sXG4gICAgICAgICAgYSA9IGkuY29tcGxldGlvbjtcbiAgICAgICAgaWYgKFwicm9vdFwiID09PSBpLnRyeUxvYykgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgaWYgKGkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBjID0gbi5jYWxsKGksIFwiY2F0Y2hMb2NcIiksXG4gICAgICAgICAgICB1ID0gbi5jYWxsKGksIFwiZmluYWxseUxvY1wiKTtcbiAgICAgICAgICBpZiAoYyAmJiB1KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgaS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShpLmNhdGNoTG9jLCAhMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgaS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGkuZmluYWxseUxvYyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgaS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShpLmNhdGNoTG9jLCAhMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdSkgdGhyb3cgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBpLmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoaS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFicnVwdDogZnVuY3Rpb24gYWJydXB0KHQsIGUpIHtcbiAgICAgIGZvciAodmFyIHIgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgciA+PSAwOyAtLXIpIHtcbiAgICAgICAgdmFyIG8gPSB0aGlzLnRyeUVudHJpZXNbcl07XG4gICAgICAgIGlmIChvLnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgbi5jYWxsKG8sIFwiZmluYWxseUxvY1wiKSAmJiB0aGlzLnByZXYgPCBvLmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgaSA9IG87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGkgJiYgKFwiYnJlYWtcIiA9PT0gdCB8fCBcImNvbnRpbnVlXCIgPT09IHQpICYmIGkudHJ5TG9jIDw9IGUgJiYgZSA8PSBpLmZpbmFsbHlMb2MgJiYgKGkgPSBudWxsKTtcbiAgICAgIHZhciBhID0gaSA/IGkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmV0dXJuIGEudHlwZSA9IHQsIGEuYXJnID0gZSwgaSA/ICh0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLm5leHQgPSBpLmZpbmFsbHlMb2MsIHkpIDogdGhpcy5jb21wbGV0ZShhKTtcbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh0LCBlKSB7XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSB0LnR5cGUpIHRocm93IHQuYXJnO1xuICAgICAgcmV0dXJuIFwiYnJlYWtcIiA9PT0gdC50eXBlIHx8IFwiY29udGludWVcIiA9PT0gdC50eXBlID8gdGhpcy5uZXh0ID0gdC5hcmcgOiBcInJldHVyblwiID09PSB0LnR5cGUgPyAodGhpcy5ydmFsID0gdGhpcy5hcmcgPSB0LmFyZywgdGhpcy5tZXRob2QgPSBcInJldHVyblwiLCB0aGlzLm5leHQgPSBcImVuZFwiKSA6IFwibm9ybWFsXCIgPT09IHQudHlwZSAmJiBlICYmICh0aGlzLm5leHQgPSBlKSwgeTtcbiAgICB9LFxuICAgIGZpbmlzaDogZnVuY3Rpb24gZmluaXNoKHQpIHtcbiAgICAgIGZvciAodmFyIGUgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgZSA+PSAwOyAtLWUpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnRyeUVudHJpZXNbZV07XG4gICAgICAgIGlmIChyLmZpbmFsbHlMb2MgPT09IHQpIHJldHVybiB0aGlzLmNvbXBsZXRlKHIuY29tcGxldGlvbiwgci5hZnRlckxvYyksIHJlc2V0VHJ5RW50cnkociksIHk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uIF9jYXRjaCh0KSB7XG4gICAgICBmb3IgKHZhciBlID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGUgPj0gMDsgLS1lKSB7XG4gICAgICAgIHZhciByID0gdGhpcy50cnlFbnRyaWVzW2VdO1xuICAgICAgICBpZiAoci50cnlMb2MgPT09IHQpIHtcbiAgICAgICAgICB2YXIgbiA9IHIuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAoXCJ0aHJvd1wiID09PSBuLnR5cGUpIHtcbiAgICAgICAgICAgIHZhciBvID0gbi5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiBkZWxlZ2F0ZVlpZWxkKGUsIHIsIG4pIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGUpLFxuICAgICAgICByZXN1bHROYW1lOiByLFxuICAgICAgICBuZXh0TG9jOiBuXG4gICAgICB9LCBcIm5leHRcIiA9PT0gdGhpcy5tZXRob2QgJiYgKHRoaXMuYXJnID0gdCksIHk7XG4gICAgfVxuICB9LCBlO1xufVxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbnZhciBGaWxlUmVhZGVyID0gZXhwb3J0cy5kZWZhdWx0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRmlsZVJlYWRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZVJlYWRlcik7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhGaWxlUmVhZGVyLCBbe1xuICAgIGtleTogXCJvcGVuRmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX29wZW5GaWxlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlKGlucHV0LCBjaHVua1NpemUpIHtcbiAgICAgICAgdmFyIGJsb2I7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGlmICghKCgwLCBfaXNSZWFjdE5hdGl2ZS5kZWZhdWx0KSgpICYmIGlucHV0ICYmIHR5cGVvZiBpbnB1dC51cmkgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7XG4gICAgICAgICAgICAgIHJldHVybiAoMCwgX3VyaVRvQmxvYi5kZWZhdWx0KShpbnB1dC51cmkpO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICBibG9iID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCBuZXcgX0ZpbGVTb3VyY2UuZGVmYXVsdChibG9iKSk7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA4O1xuICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0W1wiY2F0Y2hcIl0oMSk7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInR1czogY2Fubm90IGZldGNoIGBmaWxlLnVyaWAgYXMgQmxvYiwgbWFrZSBzdXJlIHRoZSB1cmkgaXMgY29ycmVjdCBhbmQgYWNjZXNzaWJsZS4gXCIuY29uY2F0KF9jb250ZXh0LnQwKSk7XG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgaW5wdXQuc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGlucHV0LnNpemUgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIFByb21pc2UucmVzb2x2ZShuZXcgX0ZpbGVTb3VyY2UuZGVmYXVsdChpbnB1dCkpKTtcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgIGlmICghKHR5cGVvZiBpbnB1dC5yZWFkID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjaHVua1NpemUgPSBOdW1iZXIoY2h1bmtTaXplKTtcbiAgICAgICAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZShjaHVua1NpemUpKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE3O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdjYW5ub3QgY3JlYXRlIHNvdXJjZSBmb3Igc3RyZWFtIHdpdGhvdXQgYSBmaW5pdGUgdmFsdWUgZm9yIHRoZSBgY2h1bmtTaXplYCBvcHRpb24nKSkpO1xuICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCBQcm9taXNlLnJlc29sdmUobmV3IF9TdHJlYW1Tb3VyY2UuZGVmYXVsdChpbnB1dCwgY2h1bmtTaXplKSkpO1xuICAgICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ3NvdXJjZSBvYmplY3QgbWF5IG9ubHkgYmUgYW4gaW5zdGFuY2Ugb2YgRmlsZSwgQmxvYiwgb3IgUmVhZGVyIGluIHRoaXMgZW52aXJvbm1lbnQnKSkpO1xuICAgICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMSwgOF1dKTtcbiAgICAgIH0pKTtcbiAgICAgIGZ1bmN0aW9uIG9wZW5GaWxlKF94LCBfeDIpIHtcbiAgICAgICAgcmV0dXJuIF9vcGVuRmlsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wZW5GaWxlO1xuICAgIH0oKVxuICB9XSk7XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmaW5nZXJwcmludDtcbnZhciBfaXNSZWFjdE5hdGl2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNSZWFjdE5hdGl2ZS5qc1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLy8gVE9ETzogRGlmZmVyZW5jaWF0ZSBiZXR3ZWVuIGlucHV0IHR5cGVzXG5cbi8qKlxuICogR2VuZXJhdGUgYSBmaW5nZXJwcmludCBmb3IgYSBmaWxlIHdoaWNoIHdpbGwgYmUgdXNlZCB0aGUgc3RvcmUgdGhlIGVuZHBvaW50XG4gKlxuICogQHBhcmFtIHtGaWxlfSBmaWxlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gZmluZ2VycHJpbnQoZmlsZSwgb3B0aW9ucykge1xuICBpZiAoKDAsIF9pc1JlYWN0TmF0aXZlLmRlZmF1bHQpKCkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWN0TmF0aXZlRmluZ2VycHJpbnQoZmlsZSwgb3B0aW9ucykpO1xuICB9XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoWyd0dXMtYnInLCBmaWxlLm5hbWUsIGZpbGUudHlwZSwgZmlsZS5zaXplLCBmaWxlLmxhc3RNb2RpZmllZCwgb3B0aW9ucy5lbmRwb2ludF0uam9pbignLScpKTtcbn1cbmZ1bmN0aW9uIHJlYWN0TmF0aXZlRmluZ2VycHJpbnQoZmlsZSwgb3B0aW9ucykge1xuICB2YXIgZXhpZkhhc2ggPSBmaWxlLmV4aWYgPyBoYXNoQ29kZShKU09OLnN0cmluZ2lmeShmaWxlLmV4aWYpKSA6ICdub2V4aWYnO1xuICByZXR1cm4gWyd0dXMtcm4nLCBmaWxlLm5hbWUgfHwgJ25vbmFtZScsIGZpbGUuc2l6ZSB8fCAnbm9zaXplJywgZXhpZkhhc2gsIG9wdGlvbnMuZW5kcG9pbnRdLmpvaW4oJy8nKTtcbn1cbmZ1bmN0aW9uIGhhc2hDb2RlKHN0cikge1xuICAvLyBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84ODMxOTM3LzE1MTY2NlxuICB2YXIgaGFzaCA9IDA7XG4gIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2NoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgX2NoYXI7XG4gICAgaGFzaCAmPSBoYXNoOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gaGFzaDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmZ1bmN0aW9uIF90eXBlb2Yobykge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIF90eXBlb2Yobyk7XG59XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbnZhciBYSFJIdHRwU3RhY2sgPSBleHBvcnRzLmRlZmF1bHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBYSFJIdHRwU3RhY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFhIUkh0dHBTdGFjayk7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhYSFJIdHRwU3RhY2ssIFt7XG4gICAga2V5OiBcImNyZWF0ZVJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmVxdWVzdChtZXRob2QsIHVybCkge1xuICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0KG1ldGhvZCwgdXJsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TmFtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgICAgcmV0dXJuICdYSFJIdHRwU3RhY2snO1xuICAgIH1cbiAgfV0pO1xufSgpO1xudmFyIFJlcXVlc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcXVlc3QpO1xuICAgIHRoaXMuX3hociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHRoaXMuX3hoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICB0aGlzLl9tZXRob2QgPSBtZXRob2Q7XG4gICAgdGhpcy5fdXJsID0gdXJsO1xuICAgIHRoaXMuX2hlYWRlcnMgPSB7fTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFJlcXVlc3QsIFt7XG4gICAga2V5OiBcImdldE1ldGhvZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNZXRob2QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWV0aG9kO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRVUkxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VVJMKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3VybDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0SGVhZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhlYWRlcihoZWFkZXIsIHZhbHVlKSB7XG4gICAgICB0aGlzLl94aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIHZhbHVlKTtcbiAgICAgIHRoaXMuX2hlYWRlcnNbaGVhZGVyXSA9IHZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRIZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVhZGVyKGhlYWRlcikge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNbaGVhZGVyXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0UHJvZ3Jlc3NIYW5kbGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByb2dyZXNzSGFuZGxlcihwcm9ncmVzc0hhbmRsZXIpIHtcbiAgICAgIC8vIFRlc3Qgc3VwcG9ydCBmb3IgcHJvZ3Jlc3MgZXZlbnRzIGJlZm9yZSBhdHRhY2hpbmcgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICAgIGlmICghKCd1cGxvYWQnIGluIHRoaXMuX3hocikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5feGhyLnVwbG9hZC5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFlLmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcHJvZ3Jlc3NIYW5kbGVyKGUubG9hZGVkKTtcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNlbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgYm9keSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIF90aGlzLl94aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKF90aGlzLl94aHIpKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3hoci5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5feGhyLnNlbmQoYm9keSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWJvcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICB0aGlzLl94aHIuYWJvcnQoKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VW5kZXJseWluZ09iamVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVbmRlcmx5aW5nT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3hocjtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbnZhciBSZXNwb25zZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlc3BvbnNlKHhocikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNwb25zZSk7XG4gICAgdGhpcy5feGhyID0geGhyO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoUmVzcG9uc2UsIFt7XG4gICAga2V5OiBcImdldFN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdGF0dXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5feGhyLnN0YXR1cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0SGVhZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEhlYWRlcihoZWFkZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl94aHIuZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Qm9keVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCb2R5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3hoci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFVuZGVybHlpbmdPYmplY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VW5kZXJseWluZ09iamVjdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl94aHI7XG4gICAgfVxuICB9XSk7XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWZhdWx0SHR0cFN0YWNrXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9odHRwU3RhY2suZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZXRhaWxlZEVycm9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lcnJvci5kZWZhdWx0O1xuICB9XG59KTtcbmV4cG9ydHMuVXBsb2FkID0gdm9pZCAwO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2FuU3RvcmVVUkxzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91cmxTdG9yYWdlLmNhblN0b3JlVVJMcztcbiAgfVxufSk7XG5leHBvcnRzLmRlZmF1bHRPcHRpb25zID0gdm9pZCAwO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5hYmxlRGVidWdMb2dcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2xvZ2dlci5lbmFibGVEZWJ1Z0xvZztcbiAgfVxufSk7XG5leHBvcnRzLmlzU3VwcG9ydGVkID0gdm9pZCAwO1xudmFyIF9lcnJvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2Vycm9yLmpzXCIpKTtcbnZhciBfbG9nZ2VyID0gcmVxdWlyZShcIi4uL2xvZ2dlci5qc1wiKTtcbnZhciBfbm9vcFVybFN0b3JhZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9ub29wVXJsU3RvcmFnZS5qc1wiKSk7XG52YXIgX3VwbG9hZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3VwbG9hZC5qc1wiKSk7XG52YXIgX2ZpbGVSZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2ZpbGVSZWFkZXIuanNcIikpO1xudmFyIF9maWxlU2lnbmF0dXJlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9maWxlU2lnbmF0dXJlLmpzXCIpKTtcbnZhciBfaHR0cFN0YWNrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9odHRwU3RhY2suanNcIikpO1xudmFyIF91cmxTdG9yYWdlID0gcmVxdWlyZShcIi4vdXJsU3RvcmFnZS5qc1wiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHtcbiAgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTtcbn1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICB9IGNhdGNoICh0KSB7fVxuICByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICAgIHJldHVybiAhIXQ7XG4gIH0pKCk7XG59XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikge1xuICB2YXIgdCA9IE9iamVjdC5rZXlzKGUpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtcbiAgICByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7XG4gICAgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHtcbiAgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHtcbiAgICB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307XG4gICAgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbnZhciBkZWZhdWx0T3B0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdE9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF91cGxvYWQuZGVmYXVsdC5kZWZhdWx0T3B0aW9ucyksIHt9LCB7XG4gIGh0dHBTdGFjazogbmV3IF9odHRwU3RhY2suZGVmYXVsdCgpLFxuICBmaWxlUmVhZGVyOiBuZXcgX2ZpbGVSZWFkZXIuZGVmYXVsdCgpLFxuICB1cmxTdG9yYWdlOiBfdXJsU3RvcmFnZS5jYW5TdG9yZVVSTHMgPyBuZXcgX3VybFN0b3JhZ2UuV2ViU3RvcmFnZVVybFN0b3JhZ2UoKSA6IG5ldyBfbm9vcFVybFN0b3JhZ2UuZGVmYXVsdCgpLFxuICBmaW5nZXJwcmludDogX2ZpbGVTaWduYXR1cmUuZGVmYXVsdFxufSk7XG52YXIgVXBsb2FkID0gZXhwb3J0cy5VcGxvYWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlVXBsb2FkKSB7XG4gIGZ1bmN0aW9uIFVwbG9hZCgpIHtcbiAgICB2YXIgZmlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVwbG9hZCk7XG4gICAgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdE9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICByZXR1cm4gX2NhbGxTdXBlcih0aGlzLCBVcGxvYWQsIFtmaWxlLCBvcHRpb25zXSk7XG4gIH1cbiAgX2luaGVyaXRzKFVwbG9hZCwgX0Jhc2VVcGxvYWQpO1xuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFVwbG9hZCwgbnVsbCwgW3tcbiAgICBrZXk6IFwidGVybWluYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRlcm1pbmF0ZSh1cmwpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gX3VwbG9hZC5kZWZhdWx0LnRlcm1pbmF0ZSh1cmwsIG9wdGlvbnMpO1xuICAgIH1cbiAgfV0pO1xufShfdXBsb2FkLmRlZmF1bHQpOyAvLyBOb3RlOiBXZSBkb24ndCByZWZlcmVuY2UgYHdpbmRvd2AgaGVyZSBiZWNhdXNlIHRoZXNlIGNsYXNzZXMgYWxzbyBleGlzdCBpbiBhIFdlYiBXb3JrZXIncyBjb250ZXh0LlxudmFyIGlzU3VwcG9ydGVkID0gZXhwb3J0cy5pc1N1cHBvcnRlZCA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgQmxvYi5wcm90b3R5cGUuc2xpY2UgPT09ICdmdW5jdGlvbic7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgaXNSZWFjdE5hdGl2ZSA9IGZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XG4gIHJldHVybiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci5wcm9kdWN0LnRvTG93ZXJDYXNlKCkgPT09ICdyZWFjdG5hdGl2ZSc7XG59O1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gaXNSZWFjdE5hdGl2ZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfaXNDb3Jkb3ZhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0NvcmRvdmEuanNcIikpO1xudmFyIF9yZWFkQXNCeXRlQXJyYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlYWRBc0J5dGVBcnJheS5qc1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjtcbn1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7XG4gIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpO1xufVxudmFyIEZpbGVTb3VyY2UgPSBleHBvcnRzLmRlZmF1bHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvLyBNYWtlIHRoaXMuc2l6ZSBhIG1ldGhvZFxuICBmdW5jdGlvbiBGaWxlU291cmNlKGZpbGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZVNvdXJjZSk7XG4gICAgdGhpcy5fZmlsZSA9IGZpbGU7XG4gICAgdGhpcy5zaXplID0gZmlsZS5zaXplO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRmlsZVNvdXJjZSwgW3tcbiAgICBrZXk6IFwic2xpY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgICAgLy8gSW4gQXBhY2hlIENvcmRvdmEgYXBwbGljYXRpb25zLCBhIEZpbGUgbXVzdCBiZSByZXNvbHZlZCB1c2luZ1xuICAgICAgLy8gRmlsZVJlYWRlciBpbnN0YW5jZXMsIHNlZVxuICAgICAgLy8gaHR0cHM6Ly9jb3Jkb3ZhLmFwYWNoZS5vcmcvZG9jcy9lbi84LngvcmVmZXJlbmNlL2NvcmRvdmEtcGx1Z2luLWZpbGUvaW5kZXguaHRtbCNyZWFkLWEtZmlsZVxuICAgICAgaWYgKCgwLCBfaXNDb3Jkb3ZhLmRlZmF1bHQpKCkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfcmVhZEFzQnl0ZUFycmF5LmRlZmF1bHQpKHRoaXMuX2ZpbGUuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fZmlsZS5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIHZhciBkb25lID0gZW5kID49IHRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGRvbmU6IGRvbmVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG8gaGVyZSBzaW5jZSB3ZSBkb24ndCBuZWVkIHRvIHJlbGVhc2UgYW55IHJlc291cmNlcy5cbiAgICB9XG4gIH1dKTtcbn0oKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmZ1bmN0aW9uIF90eXBlb2Yobykge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIF90eXBlb2Yobyk7XG59XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbmZ1bmN0aW9uIGxlbihibG9iT3JBcnJheSkge1xuICBpZiAoYmxvYk9yQXJyYXkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIGlmIChibG9iT3JBcnJheS5zaXplICE9PSB1bmRlZmluZWQpIHJldHVybiBibG9iT3JBcnJheS5zaXplO1xuICByZXR1cm4gYmxvYk9yQXJyYXkubGVuZ3RoO1xufVxuXG4vKlxuICBUeXBlZCBhcnJheXMgYW5kIGJsb2JzIGRvbid0IGhhdmUgYSBjb25jYXQgbWV0aG9kLlxuICBUaGlzIGZ1bmN0aW9uIGhlbHBzIFN0cmVhbVNvdXJjZSBhY2N1bXVsYXRlIGRhdGEgdG8gcmVhY2ggY2h1bmtTaXplLlxuKi9cbmZ1bmN0aW9uIGNvbmNhdChhLCBiKSB7XG4gIGlmIChhLmNvbmNhdCkge1xuICAgIC8vIElzIGBhYCBhbiBBcnJheT9cbiAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gIH1cbiAgaWYgKGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgcmV0dXJuIG5ldyBCbG9iKFthLCBiXSwge1xuICAgICAgdHlwZTogYS50eXBlXG4gICAgfSk7XG4gIH1cbiAgaWYgKGEuc2V0KSB7XG4gICAgLy8gSXMgYGFgIGEgdHlwZWQgYXJyYXk/XG4gICAgdmFyIGMgPSBuZXcgYS5jb25zdHJ1Y3RvcihhLmxlbmd0aCArIGIubGVuZ3RoKTtcbiAgICBjLnNldChhKTtcbiAgICBjLnNldChiLCBhLmxlbmd0aCk7XG4gICAgcmV0dXJuIGM7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGRhdGEgdHlwZScpO1xufVxudmFyIFN0cmVhbVNvdXJjZSA9IGV4cG9ydHMuZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0cmVhbVNvdXJjZShyZWFkZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RyZWFtU291cmNlKTtcbiAgICB0aGlzLl9idWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fYnVmZmVyT2Zmc2V0ID0gMDtcbiAgICB0aGlzLl9yZWFkZXIgPSByZWFkZXI7XG4gICAgdGhpcy5fZG9uZSA9IGZhbHNlO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoU3RyZWFtU291cmNlLCBbe1xuICAgIGtleTogXCJzbGljZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoc3RhcnQgPCB0aGlzLl9idWZmZXJPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlJlcXVlc3RlZCBkYXRhIGlzIGJlZm9yZSB0aGUgcmVhZGVyJ3MgY3VycmVudCBvZmZzZXRcIikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRVbnRpbEVub3VnaERhdGFPckRvbmUoc3RhcnQsIGVuZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9yZWFkVW50aWxFbm91Z2hEYXRhT3JEb25lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWFkVW50aWxFbm91Z2hEYXRhT3JEb25lKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgaGFzRW5vdWdoRGF0YSA9IGVuZCA8PSB0aGlzLl9idWZmZXJPZmZzZXQgKyBsZW4odGhpcy5fYnVmZmVyKTtcbiAgICAgIGlmICh0aGlzLl9kb25lIHx8IGhhc0Vub3VnaERhdGEpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fZ2V0RGF0YUZyb21CdWZmZXIoc3RhcnQsIGVuZCk7XG4gICAgICAgIHZhciBkb25lID0gdmFsdWUgPT0gbnVsbCA/IHRoaXMuX2RvbmUgOiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIGRvbmU6IGRvbmVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICAgICAgZG9uZSA9IF9yZWYuZG9uZTtcbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICBfdGhpcy5fZG9uZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuX2J1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgX3RoaXMuX2J1ZmZlciA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9idWZmZXIgPSBjb25jYXQoX3RoaXMuX2J1ZmZlciwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcy5fcmVhZFVudGlsRW5vdWdoRGF0YU9yRG9uZShzdGFydCwgZW5kKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0RGF0YUZyb21CdWZmZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERhdGFGcm9tQnVmZmVyKHN0YXJ0LCBlbmQpIHtcbiAgICAgIC8vIFJlbW92ZSBkYXRhIGZyb20gYnVmZmVyIGJlZm9yZSBgc3RhcnRgLlxuICAgICAgLy8gRGF0YSBtaWdodCBiZSByZXJlYWQgZnJvbSB0aGUgYnVmZmVyIGlmIGFuIHVwbG9hZCBmYWlscywgc28gd2UgY2FuIG9ubHlcbiAgICAgIC8vIHNhZmVseSBkZWxldGUgZGF0YSB3aGVuIGl0IGNvbWVzICpiZWZvcmUqIHdoYXQgaXMgY3VycmVudGx5IGJlaW5nIHJlYWQuXG4gICAgICBpZiAoc3RhcnQgPiB0aGlzLl9idWZmZXJPZmZzZXQpIHtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gdGhpcy5fYnVmZmVyLnNsaWNlKHN0YXJ0IC0gdGhpcy5fYnVmZmVyT2Zmc2V0KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyT2Zmc2V0ID0gc3RhcnQ7XG4gICAgICB9XG4gICAgICAvLyBJZiB0aGUgYnVmZmVyIGlzIGVtcHR5IGFmdGVyIHJlbW92aW5nIG9sZCBkYXRhLCBhbGwgZGF0YSBoYXMgYmVlbiByZWFkLlxuICAgICAgdmFyIGhhc0FsbERhdGFCZWVuUmVhZCA9IGxlbih0aGlzLl9idWZmZXIpID09PSAwO1xuICAgICAgaWYgKHRoaXMuX2RvbmUgJiYgaGFzQWxsRGF0YUJlZW5SZWFkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gV2UgYWxyZWFkeSByZW1vdmVkIGRhdGEgYmVmb3JlIGBzdGFydGAsIHNvIHdlIGp1c3QgcmV0dXJuIHRoZSBmaXJzdFxuICAgICAgLy8gY2h1bmsgZnJvbSB0aGUgYnVmZmVyLlxuICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlci5zbGljZSgwLCBlbmQgLSBzdGFydCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgaWYgKHRoaXMuX3JlYWRlci5jYW5jZWwpIHtcbiAgICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xufSgpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGlzQ29yZG92YSA9IGZ1bmN0aW9uIGlzQ29yZG92YSgpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2Ygd2luZG93LlBob25lR2FwICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93LkNvcmRvdmEgIT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiB3aW5kb3cuY29yZG92YSAhPT0gJ3VuZGVmaW5lZCcpO1xufTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9IGlzQ29yZG92YTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlYWRBc0J5dGVBcnJheTtcbi8qKlxuICogcmVhZEFzQnl0ZUFycmF5IGNvbnZlcnRzIGEgRmlsZSBvYmplY3QgdG8gYSBVaW50OEFycmF5LlxuICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IHVzZWQgb24gdGhlIEFwYWNoZSBDb3Jkb3ZhIHBsYXRmb3JtLlxuICogU2VlIGh0dHBzOi8vY29yZG92YS5hcGFjaGUub3JnL2RvY3MvZW4vbGF0ZXN0L3JlZmVyZW5jZS9jb3Jkb3ZhLXBsdWdpbi1maWxlL2luZGV4Lmh0bWwjcmVhZC1hLWZpbGVcbiAqL1xuZnVuY3Rpb24gcmVhZEFzQnl0ZUFycmF5KGNodW5rKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBVaW50OEFycmF5KHJlYWRlci5yZXN1bHQpO1xuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH07XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGNodW5rKTtcbiAgfSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1cmlUb0Jsb2I7XG4vKipcbiAqIHVyaVRvQmxvYiByZXNvbHZlcyBhIFVSSSB0byBhIEJsb2Igb2JqZWN0LiBUaGlzIGlzIHVzZWQgZm9yXG4gKiBSZWFjdCBOYXRpdmUgdG8gcmV0cmlldmUgYSBmaWxlIChpZGVudGlmaWVkIGJ5IGEgZmlsZTovL1xuICogVVJJKSBhcyBhIGJsb2IuXG4gKi9cbmZ1bmN0aW9uIHVyaVRvQmxvYih1cmkpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJztcbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJsb2IgPSB4aHIucmVzcG9uc2U7XG4gICAgICByZXNvbHZlKGJsb2IpO1xuICAgIH07XG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9O1xuICAgIHhoci5vcGVuKCdHRVQnLCB1cmkpO1xuICAgIHhoci5zZW5kKCk7XG4gIH0pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jYW5TdG9yZVVSTHMgPSBleHBvcnRzLldlYlN0b3JhZ2VVcmxTdG9yYWdlID0gdm9pZCAwO1xuZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjtcbn1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7XG4gIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpO1xufVxudmFyIGhhc1N0b3JhZ2UgPSBmYWxzZTtcbnRyeSB7XG4gIC8vIE5vdGU6IGxvY2FsU3RvcmFnZSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgV2ViIFdvcmtlcidzIGNvbnRleHQsIHNvIHdlIG11c3QgdXNlIHdpbmRvdyBoZXJlLlxuICBoYXNTdG9yYWdlID0gJ2xvY2FsU3RvcmFnZScgaW4gd2luZG93O1xuXG4gIC8vIEF0dGVtcHQgdG8gc3RvcmUgYW5kIHJlYWQgZW50cmllcyBmcm9tIHRoZSBsb2NhbCBzdG9yYWdlIHRvIGRldGVjdCBQcml2YXRlXG4gIC8vIE1vZGUgb24gU2FmYXJpIG9uIGlPUyAoc2VlICM0OSlcbiAgLy8gSWYgdGhlIGtleSB3YXMgbm90IHVzZWQgYmVmb3JlLCB3ZSByZW1vdmUgaXQgZnJvbSBsb2NhbCBzdG9yYWdlIGFnYWluIHRvXG4gIC8vIG5vdCBjYXVzZSBjb25mdXNpb24gd2hlcmUgdGhlIGVudHJ5IGNhbWUgZnJvbS5cbiAgdmFyIGtleSA9ICd0dXNTdXBwb3J0JztcbiAgdmFyIG9yaWdpbmFsVmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIG9yaWdpbmFsVmFsdWUpO1xuICBpZiAob3JpZ2luYWxWYWx1ZSA9PT0gbnVsbCkgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbn0gY2F0Y2ggKGUpIHtcbiAgLy8gSWYgd2UgdHJ5IHRvIGFjY2VzcyBsb2NhbFN0b3JhZ2UgaW5zaWRlIGEgc2FuZGJveGVkIGlmcmFtZSwgYSBTZWN1cml0eUVycm9yXG4gIC8vIGlzIHRocm93bi4gV2hlbiBpbiBwcml2YXRlIG1vZGUgb24gaU9TIFNhZmFyaSwgYSBRdW90YUV4Y2VlZGVkRXJyb3IgaXNcbiAgLy8gdGhyb3duIChzZWUgIzQ5KVxuICBpZiAoZS5jb2RlID09PSBlLlNFQ1VSSVRZX0VSUiB8fCBlLmNvZGUgPT09IGUuUVVPVEFfRVhDRUVERURfRVJSKSB7XG4gICAgaGFzU3RvcmFnZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGU7XG4gIH1cbn1cbnZhciBjYW5TdG9yZVVSTHMgPSBleHBvcnRzLmNhblN0b3JlVVJMcyA9IGhhc1N0b3JhZ2U7XG52YXIgV2ViU3RvcmFnZVVybFN0b3JhZ2UgPSBleHBvcnRzLldlYlN0b3JhZ2VVcmxTdG9yYWdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gV2ViU3RvcmFnZVVybFN0b3JhZ2UoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYlN0b3JhZ2VVcmxTdG9yYWdlKTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFdlYlN0b3JhZ2VVcmxTdG9yYWdlLCBbe1xuICAgIGtleTogXCJmaW5kQWxsVXBsb2Fkc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kQWxsVXBsb2FkcygpIHtcbiAgICAgIHZhciByZXN1bHRzID0gdGhpcy5fZmluZEVudHJpZXMoJ3R1czo6Jyk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaW5kVXBsb2Fkc0J5RmluZ2VycHJpbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFVwbG9hZHNCeUZpbmdlcnByaW50KGZpbmdlcnByaW50KSB7XG4gICAgICB2YXIgcmVzdWx0cyA9IHRoaXMuX2ZpbmRFbnRyaWVzKFwidHVzOjpcIi5jb25jYXQoZmluZ2VycHJpbnQsIFwiOjpcIikpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVVwbG9hZCh1cmxTdG9yYWdlS2V5KSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh1cmxTdG9yYWdlS2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFVwbG9hZChmaW5nZXJwcmludCwgdXBsb2FkKSB7XG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTEyKTtcbiAgICAgIHZhciBrZXkgPSBcInR1czo6XCIuY29uY2F0KGZpbmdlcnByaW50LCBcIjo6XCIpLmNvbmNhdChpZCk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHVwbG9hZCkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShrZXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZmluZEVudHJpZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmRFbnRyaWVzKHByZWZpeCkge1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBfa2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTtcbiAgICAgICAgaWYgKF9rZXkuaW5kZXhPZihwcmVmaXgpICE9PSAwKSBjb250aW51ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgdXBsb2FkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShfa2V5KSk7XG4gICAgICAgICAgdXBsb2FkLnVybFN0b3JhZ2VLZXkgPSBfa2V5O1xuICAgICAgICAgIHJlc3VsdHMucHVzaCh1cGxvYWQpO1xuICAgICAgICB9IGNhdGNoIChfZSkge1xuICAgICAgICAgIC8vIFRoZSBKU09OIHBhcnNlIGVycm9yIGlzIGludGVudGlvbmFsbHkgaWdub3JlZCBoZXJlLCBzbyBhIG1hbGZvcm1lZFxuICAgICAgICAgIC8vIGVudHJ5IGluIHRoZSBzdG9yYWdlIGNhbm5vdCBwcmV2ZW50IGFuIHVwbG9hZC5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICB9XSk7XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5mdW5jdGlvbiBfY2FsbFN1cGVyKHQsIG8sIGUpIHtcbiAgcmV0dXJuIG8gPSBfZ2V0UHJvdG90eXBlT2YobyksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSA/IFJlZmxlY3QuY29uc3RydWN0KG8sIGUgfHwgW10sIF9nZXRQcm90b3R5cGVPZih0KS5jb25zdHJ1Y3RvcikgOiBvLmFwcGx5KHQsIGUpKTtcbn1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn1cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuZnVuY3Rpb24gX2NvbnN0cnVjdCh0LCBlLCByKSB7XG4gIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB2YXIgbyA9IFtudWxsXTtcbiAgby5wdXNoLmFwcGx5KG8sIGUpO1xuICB2YXIgcCA9IG5ldyAodC5iaW5kLmFwcGx5KHQsIG8pKSgpO1xuICByZXR1cm4gciAmJiBfc2V0UHJvdG90eXBlT2YocCwgci5wcm90b3R5cGUpLCBwO1xufVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gIH0gY2F0Y2ggKHQpIHt9XG4gIHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gICAgcmV0dXJuICEhdDtcbiAgfSkoKTtcbn1cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIjtcbiAgfVxufVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cbnZhciBEZXRhaWxlZEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtcbiAgZnVuY3Rpb24gRGV0YWlsZWRFcnJvcihtZXNzYWdlKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIHZhciBjYXVzaW5nRXJyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgIHZhciByZXEgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGV0YWlsZWRFcnJvcik7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIERldGFpbGVkRXJyb3IsIFttZXNzYWdlXSk7XG4gICAgX3RoaXMub3JpZ2luYWxSZXF1ZXN0ID0gcmVxO1xuICAgIF90aGlzLm9yaWdpbmFsUmVzcG9uc2UgPSByZXM7XG4gICAgX3RoaXMuY2F1c2luZ0Vycm9yID0gY2F1c2luZ0VycjtcbiAgICBpZiAoY2F1c2luZ0VyciAhPSBudWxsKSB7XG4gICAgICBtZXNzYWdlICs9IFwiLCBjYXVzZWQgYnkgXCIuY29uY2F0KGNhdXNpbmdFcnIudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGlmIChyZXEgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlcXVlc3RJZCA9IHJlcS5nZXRIZWFkZXIoJ1gtUmVxdWVzdC1JRCcpIHx8ICduL2EnO1xuICAgICAgdmFyIG1ldGhvZCA9IHJlcS5nZXRNZXRob2QoKTtcbiAgICAgIHZhciB1cmwgPSByZXEuZ2V0VVJMKCk7XG4gICAgICB2YXIgc3RhdHVzID0gcmVzID8gcmVzLmdldFN0YXR1cygpIDogJ24vYSc7XG4gICAgICB2YXIgYm9keSA9IHJlcyA/IHJlcy5nZXRCb2R5KCkgfHwgJycgOiAnbi9hJztcbiAgICAgIG1lc3NhZ2UgKz0gXCIsIG9yaWdpbmF0ZWQgZnJvbSByZXF1ZXN0IChtZXRob2Q6IFwiLmNvbmNhdChtZXRob2QsIFwiLCB1cmw6IFwiKS5jb25jYXQodXJsLCBcIiwgcmVzcG9uc2UgY29kZTogXCIpLmNvbmNhdChzdGF0dXMsIFwiLCByZXNwb25zZSB0ZXh0OiBcIikuY29uY2F0KGJvZHksIFwiLCByZXF1ZXN0IGlkOiBcIikuY29uY2F0KHJlcXVlc3RJZCwgXCIpXCIpO1xuICAgIH1cbiAgICBfdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKERldGFpbGVkRXJyb3IsIF9FcnJvcik7XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoRGV0YWlsZWRFcnJvcik7XG59KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gRGV0YWlsZWRFcnJvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZW5hYmxlRGVidWdMb2cgPSBlbmFibGVEZWJ1Z0xvZztcbmV4cG9ydHMubG9nID0gbG9nO1xudmFyIGlzRW5hYmxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW5hYmxlRGVidWdMb2coKSB7XG4gIGlzRW5hYmxlZCA9IHRydWU7XG59XG5mdW5jdGlvbiBsb2cobXNnKSB7XG4gIGlmICghaXNFbmFibGVkKSByZXR1cm47XG4gIGNvbnNvbGUubG9nKG1zZyk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7XG4gIHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiO1xufVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHtcbiAgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7XG4gIHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7XG59XG52YXIgTm9vcFVybFN0b3JhZ2UgPSBleHBvcnRzLmRlZmF1bHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOb29wVXJsU3RvcmFnZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9vcFVybFN0b3JhZ2UpO1xuICB9XG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoTm9vcFVybFN0b3JhZ2UsIFt7XG4gICAga2V5OiBcImxpc3RBbGxVcGxvYWRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RBbGxVcGxvYWRzKCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbmRVcGxvYWRzQnlGaW5nZXJwcmludFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kVXBsb2Fkc0J5RmluZ2VycHJpbnQoX2ZpbmdlcnByaW50KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVVwbG9hZChfdXJsU3RvcmFnZUtleSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRVcGxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVXBsb2FkKF9maW5nZXJwcmludCwgX3VwbG9hZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gIH1dKTtcbn0oKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfanNCYXNlID0gcmVxdWlyZShcImpzLWJhc2U2NFwiKTtcbnZhciBfdXJsUGFyc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1cmwtcGFyc2VcIikpO1xudmFyIF9lcnJvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZXJyb3IuanNcIikpO1xudmFyIF9sb2dnZXIgPSByZXF1aXJlKFwiLi9sb2dnZXIuanNcIik7XG52YXIgX3V1aWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V1aWQuanNcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8qISByZWdlbmVyYXRvci1ydW50aW1lIC0tIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLiAtLSBsaWNlbnNlIChNSVQpOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvYmxvYi9tYWluL0xJQ0VOU0UgKi9cbiAgX3JlZ2VuZXJhdG9yUnVudGltZSA9IGZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7XG4gICAgcmV0dXJuIGU7XG4gIH07XG4gIHZhciB0LFxuICAgIGUgPSB7fSxcbiAgICByID0gT2JqZWN0LnByb3RvdHlwZSxcbiAgICBuID0gci5oYXNPd25Qcm9wZXJ0eSxcbiAgICBvID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uICh0LCBlLCByKSB7XG4gICAgICB0W2VdID0gci52YWx1ZTtcbiAgICB9LFxuICAgIGkgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbCA6IHt9LFxuICAgIGEgPSBpLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiLFxuICAgIGMgPSBpLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIixcbiAgICB1ID0gaS50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcbiAgZnVuY3Rpb24gZGVmaW5lKHQsIGUsIHIpIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGUsIHtcbiAgICAgIHZhbHVlOiByLFxuICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgd3JpdGFibGU6ICEwXG4gICAgfSksIHRbZV07XG4gIH1cbiAgdHJ5IHtcbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoICh0KSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKHQsIGUsIHIpIHtcbiAgICAgIHJldHVybiB0W2VdID0gcjtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHdyYXAodCwgZSwgciwgbikge1xuICAgIHZhciBpID0gZSAmJiBlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IGUgOiBHZW5lcmF0b3IsXG4gICAgICBhID0gT2JqZWN0LmNyZWF0ZShpLnByb3RvdHlwZSksXG4gICAgICBjID0gbmV3IENvbnRleHQobiB8fCBbXSk7XG4gICAgcmV0dXJuIG8oYSwgXCJfaW52b2tlXCIsIHtcbiAgICAgIHZhbHVlOiBtYWtlSW52b2tlTWV0aG9kKHQsIHIsIGMpXG4gICAgfSksIGE7XG4gIH1cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2godCwgZSwgcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIm5vcm1hbFwiLFxuICAgICAgICBhcmc6IHQuY2FsbChlLCByKVxuICAgICAgfTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInRocm93XCIsXG4gICAgICAgIGFyZzogdFxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgZS53cmFwID0gd3JhcDtcbiAgdmFyIGggPSBcInN1c3BlbmRlZFN0YXJ0XCIsXG4gICAgbCA9IFwic3VzcGVuZGVkWWllbGRcIixcbiAgICBmID0gXCJleGVjdXRpbmdcIixcbiAgICBzID0gXCJjb21wbGV0ZWRcIixcbiAgICB5ID0ge307XG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuICB2YXIgcCA9IHt9O1xuICBkZWZpbmUocCwgYSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgdmFyIGQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgdiA9IGQgJiYgZChkKHZhbHVlcyhbXSkpKTtcbiAgdiAmJiB2ICE9PSByICYmIG4uY2FsbCh2LCBhKSAmJiAocCA9IHYpO1xuICB2YXIgZyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHApO1xuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHModCkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICBkZWZpbmUodCwgZSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShlLCB0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IodCwgZSkge1xuICAgIGZ1bmN0aW9uIGludm9rZShyLCBvLCBpLCBhKSB7XG4gICAgICB2YXIgYyA9IHRyeUNhdGNoKHRbcl0sIHQsIG8pO1xuICAgICAgaWYgKFwidGhyb3dcIiAhPT0gYy50eXBlKSB7XG4gICAgICAgIHZhciB1ID0gYy5hcmcsXG4gICAgICAgICAgaCA9IHUudmFsdWU7XG4gICAgICAgIHJldHVybiBoICYmIFwib2JqZWN0XCIgPT0gX3R5cGVvZihoKSAmJiBuLmNhbGwoaCwgXCJfX2F3YWl0XCIpID8gZS5yZXNvbHZlKGguX19hd2FpdCkudGhlbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdCwgaSwgYSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgdCwgaSwgYSk7XG4gICAgICAgIH0pIDogZS5yZXNvbHZlKGgpLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB1LnZhbHVlID0gdCwgaSh1KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgdCwgaSwgYSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYShjLmFyZyk7XG4gICAgfVxuICAgIHZhciByO1xuICAgIG8odGhpcywgXCJfaW52b2tlXCIsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSh0LCBuKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgZShmdW5jdGlvbiAoZSwgcikge1xuICAgICAgICAgICAgaW52b2tlKHQsIG4sIGUsIHIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByID0gciA/IHIudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGUsIHIsIG4pIHtcbiAgICB2YXIgbyA9IGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpLCBhKSB7XG4gICAgICBpZiAobyA9PT0gZikgdGhyb3cgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgaWYgKG8gPT09IHMpIHtcbiAgICAgICAgaWYgKFwidGhyb3dcIiA9PT0gaSkgdGhyb3cgYTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogdCxcbiAgICAgICAgICBkb25lOiAhMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZm9yIChuLm1ldGhvZCA9IGksIG4uYXJnID0gYTs7KSB7XG4gICAgICAgIHZhciBjID0gbi5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICB2YXIgdSA9IG1heWJlSW52b2tlRGVsZWdhdGUoYywgbik7XG4gICAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICAgIGlmICh1ID09PSB5KSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJuZXh0XCIgPT09IG4ubWV0aG9kKSBuLnNlbnQgPSBuLl9zZW50ID0gbi5hcmc7ZWxzZSBpZiAoXCJ0aHJvd1wiID09PSBuLm1ldGhvZCkge1xuICAgICAgICAgIGlmIChvID09PSBoKSB0aHJvdyBvID0gcywgbi5hcmc7XG4gICAgICAgICAgbi5kaXNwYXRjaEV4Y2VwdGlvbihuLmFyZyk7XG4gICAgICAgIH0gZWxzZSBcInJldHVyblwiID09PSBuLm1ldGhvZCAmJiBuLmFicnVwdChcInJldHVyblwiLCBuLmFyZyk7XG4gICAgICAgIG8gPSBmO1xuICAgICAgICB2YXIgcCA9IHRyeUNhdGNoKGUsIHIsIG4pO1xuICAgICAgICBpZiAoXCJub3JtYWxcIiA9PT0gcC50eXBlKSB7XG4gICAgICAgICAgaWYgKG8gPSBuLmRvbmUgPyBzIDogbCwgcC5hcmcgPT09IHkpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcC5hcmcsXG4gICAgICAgICAgICBkb25lOiBuLmRvbmVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFwidGhyb3dcIiA9PT0gcC50eXBlICYmIChvID0gcywgbi5tZXRob2QgPSBcInRocm93XCIsIG4uYXJnID0gcC5hcmcpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShlLCByKSB7XG4gICAgdmFyIG4gPSByLm1ldGhvZCxcbiAgICAgIG8gPSBlLml0ZXJhdG9yW25dO1xuICAgIGlmIChvID09PSB0KSByZXR1cm4gci5kZWxlZ2F0ZSA9IG51bGwsIFwidGhyb3dcIiA9PT0gbiAmJiBlLml0ZXJhdG9yW1wicmV0dXJuXCJdICYmIChyLm1ldGhvZCA9IFwicmV0dXJuXCIsIHIuYXJnID0gdCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShlLCByKSwgXCJ0aHJvd1wiID09PSByLm1ldGhvZCkgfHwgXCJyZXR1cm5cIiAhPT0gbiAmJiAoci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gbmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ1wiICsgbiArIFwiJyBtZXRob2RcIikpLCB5O1xuICAgIHZhciBpID0gdHJ5Q2F0Y2gobywgZS5pdGVyYXRvciwgci5hcmcpO1xuICAgIGlmIChcInRocm93XCIgPT09IGkudHlwZSkgcmV0dXJuIHIubWV0aG9kID0gXCJ0aHJvd1wiLCByLmFyZyA9IGkuYXJnLCByLmRlbGVnYXRlID0gbnVsbCwgeTtcbiAgICB2YXIgYSA9IGkuYXJnO1xuICAgIHJldHVybiBhID8gYS5kb25lID8gKHJbZS5yZXN1bHROYW1lXSA9IGEudmFsdWUsIHIubmV4dCA9IGUubmV4dExvYywgXCJyZXR1cm5cIiAhPT0gci5tZXRob2QgJiYgKHIubWV0aG9kID0gXCJuZXh0XCIsIHIuYXJnID0gdCksIHIuZGVsZWdhdGUgPSBudWxsLCB5KSA6IGEgOiAoci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpLCByLmRlbGVnYXRlID0gbnVsbCwgeSk7XG4gIH1cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KHQpIHtcbiAgICB2YXIgZSA9IHtcbiAgICAgIHRyeUxvYzogdFswXVxuICAgIH07XG4gICAgMSBpbiB0ICYmIChlLmNhdGNoTG9jID0gdFsxXSksIDIgaW4gdCAmJiAoZS5maW5hbGx5TG9jID0gdFsyXSwgZS5hZnRlckxvYyA9IHRbM10pLCB0aGlzLnRyeUVudHJpZXMucHVzaChlKTtcbiAgfVxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KHQpIHtcbiAgICB2YXIgZSA9IHQuY29tcGxldGlvbiB8fCB7fTtcbiAgICBlLnR5cGUgPSBcIm5vcm1hbFwiLCBkZWxldGUgZS5hcmcsIHQuY29tcGxldGlvbiA9IGU7XG4gIH1cbiAgZnVuY3Rpb24gQ29udGV4dCh0KSB7XG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3tcbiAgICAgIHRyeUxvYzogXCJyb290XCJcbiAgICB9XSwgdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyksIHRoaXMucmVzZXQoITApO1xuICB9XG4gIGZ1bmN0aW9uIHZhbHVlcyhlKSB7XG4gICAgaWYgKGUgfHwgXCJcIiA9PT0gZSkge1xuICAgICAgdmFyIHIgPSBlW2FdO1xuICAgICAgaWYgKHIpIHJldHVybiByLmNhbGwoZSk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLm5leHQpIHJldHVybiBlO1xuICAgICAgaWYgKCFpc05hTihlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIG8gPSAtMSxcbiAgICAgICAgICBpID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIGZvciAoOyArK28gPCBlLmxlbmd0aDspIGlmIChuLmNhbGwoZSwgbykpIHJldHVybiBuZXh0LnZhbHVlID0gZVtvXSwgbmV4dC5kb25lID0gITEsIG5leHQ7XG4gICAgICAgICAgICByZXR1cm4gbmV4dC52YWx1ZSA9IHQsIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBpLm5leHQgPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKF90eXBlb2YoZSkgKyBcIiBpcyBub3QgaXRlcmFibGVcIik7XG4gIH1cbiAgcmV0dXJuIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBvKGcsIFwiY29uc3RydWN0b3JcIiwge1xuICAgIHZhbHVlOiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICBjb25maWd1cmFibGU6ICEwXG4gIH0pLCBvKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIHtcbiAgICB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb24sXG4gICAgY29uZmlndXJhYmxlOiAhMFxuICB9KSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHUsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIiksIGUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgJiYgdC5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gISFlICYmIChlID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgPT09IChlLmRpc3BsYXlOYW1lIHx8IGUubmFtZSkpO1xuICB9LCBlLm1hcmsgPSBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YodCwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpIDogKHQuX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGRlZmluZSh0LCB1LCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSwgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGcpLCB0O1xuICB9LCBlLmF3cmFwID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19hd2FpdDogdFxuICAgIH07XG4gIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvciwgZS5hc3luYyA9IGZ1bmN0aW9uICh0LCByLCBuLCBvLCBpKSB7XG4gICAgdm9pZCAwID09PSBpICYmIChpID0gUHJvbWlzZSk7XG4gICAgdmFyIGEgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKHQsIHIsIG4sIG8pLCBpKTtcbiAgICByZXR1cm4gZS5pc0dlbmVyYXRvckZ1bmN0aW9uKHIpID8gYSA6IGEubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0LmRvbmUgPyB0LnZhbHVlIDogYS5uZXh0KCk7XG4gICAgfSk7XG4gIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhnKSwgZGVmaW5lKGcsIHUsIFwiR2VuZXJhdG9yXCIpLCBkZWZpbmUoZywgYSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZGVmaW5lKGcsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KSwgZS5rZXlzID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgZSA9IE9iamVjdCh0KSxcbiAgICAgIHIgPSBbXTtcbiAgICBmb3IgKHZhciBuIGluIGUpIHIucHVzaChuKTtcbiAgICByZXR1cm4gci5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBmb3IgKDsgci5sZW5ndGg7KSB7XG4gICAgICAgIHZhciB0ID0gci5wb3AoKTtcbiAgICAgICAgaWYgKHQgaW4gZSkgcmV0dXJuIG5leHQudmFsdWUgPSB0LCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXh0LmRvbmUgPSAhMCwgbmV4dDtcbiAgICB9O1xuICB9LCBlLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KGUpIHtcbiAgICAgIGlmICh0aGlzLnByZXYgPSAwLCB0aGlzLm5leHQgPSAwLCB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdCwgdGhpcy5kb25lID0gITEsIHRoaXMuZGVsZWdhdGUgPSBudWxsLCB0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLmFyZyA9IHQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhZSkgZm9yICh2YXIgciBpbiB0aGlzKSBcInRcIiA9PT0gci5jaGFyQXQoMCkgJiYgbi5jYWxsKHRoaXMsIHIpICYmICFpc05hTigrci5zbGljZSgxKSkgJiYgKHRoaXNbcl0gPSB0KTtcbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmRvbmUgPSAhMDtcbiAgICAgIHZhciB0ID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSB0LnR5cGUpIHRocm93IHQuYXJnO1xuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihlKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB0aHJvdyBlO1xuICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKG4sIG8pIHtcbiAgICAgICAgcmV0dXJuIGEudHlwZSA9IFwidGhyb3dcIiwgYS5hcmcgPSBlLCByLm5leHQgPSBuLCBvICYmIChyLm1ldGhvZCA9IFwibmV4dFwiLCByLmFyZyA9IHQpLCAhIW87XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBvID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IG8gPj0gMDsgLS1vKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy50cnlFbnRyaWVzW29dLFxuICAgICAgICAgIGEgPSBpLmNvbXBsZXRpb247XG4gICAgICAgIGlmIChcInJvb3RcIiA9PT0gaS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIGlmIChpLnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgYyA9IG4uY2FsbChpLCBcImNhdGNoTG9jXCIpLFxuICAgICAgICAgICAgdSA9IG4uY2FsbChpLCBcImZpbmFsbHlMb2NcIik7XG4gICAgICAgICAgaWYgKGMgJiYgdSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoaS5jYXRjaExvYywgITApO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShpLmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoaS5jYXRjaExvYywgITApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXUpIHRocm93IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgaS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGkuZmluYWxseUxvYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0LCBlKSB7XG4gICAgICBmb3IgKHZhciByID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IHIgPj0gMDsgLS1yKSB7XG4gICAgICAgIHZhciBvID0gdGhpcy50cnlFbnRyaWVzW3JdO1xuICAgICAgICBpZiAoby50cnlMb2MgPD0gdGhpcy5wcmV2ICYmIG4uY2FsbChvLCBcImZpbmFsbHlMb2NcIikgJiYgdGhpcy5wcmV2IDwgby5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGkgPSBvO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpICYmIChcImJyZWFrXCIgPT09IHQgfHwgXCJjb250aW51ZVwiID09PSB0KSAmJiBpLnRyeUxvYyA8PSBlICYmIGUgPD0gaS5maW5hbGx5TG9jICYmIChpID0gbnVsbCk7XG4gICAgICB2YXIgYSA9IGkgPyBpLmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJldHVybiBhLnR5cGUgPSB0LCBhLmFyZyA9IGUsIGkgPyAodGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5uZXh0ID0gaS5maW5hbGx5TG9jLCB5KSA6IHRoaXMuY29tcGxldGUoYSk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodCwgZSkge1xuICAgICAgaWYgKFwidGhyb3dcIiA9PT0gdC50eXBlKSB0aHJvdyB0LmFyZztcbiAgICAgIHJldHVybiBcImJyZWFrXCIgPT09IHQudHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHQudHlwZSA/IHRoaXMubmV4dCA9IHQuYXJnIDogXCJyZXR1cm5cIiA9PT0gdC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gdC5hcmcsIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIiwgdGhpcy5uZXh0ID0gXCJlbmRcIikgOiBcIm5vcm1hbFwiID09PSB0LnR5cGUgJiYgZSAmJiAodGhpcy5uZXh0ID0gZSksIHk7XG4gICAgfSxcbiAgICBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaCh0KSB7XG4gICAgICBmb3IgKHZhciBlID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGUgPj0gMDsgLS1lKSB7XG4gICAgICAgIHZhciByID0gdGhpcy50cnlFbnRyaWVzW2VdO1xuICAgICAgICBpZiAoci5maW5hbGx5TG9jID09PSB0KSByZXR1cm4gdGhpcy5jb21wbGV0ZShyLmNvbXBsZXRpb24sIHIuYWZ0ZXJMb2MpLCByZXNldFRyeUVudHJ5KHIpLCB5O1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2godCkge1xuICAgICAgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkge1xuICAgICAgICB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTtcbiAgICAgICAgaWYgKHIudHJ5TG9jID09PSB0KSB7XG4gICAgICAgICAgdmFyIG4gPSByLmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKFwidGhyb3dcIiA9PT0gbi50eXBlKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG4uYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChlLCByLCBuKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcixcbiAgICAgICAgbmV4dExvYzogblxuICAgICAgfSwgXCJuZXh0XCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHQpLCB5O1xuICAgIH1cbiAgfSwgZTtcbn1cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHtcbiAgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKG51bGwgIT0gdCkge1xuICAgIHZhciBlLFxuICAgICAgbixcbiAgICAgIGksXG4gICAgICB1LFxuICAgICAgYSA9IFtdLFxuICAgICAgZiA9ICEwLFxuICAgICAgbyA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7XG4gICAgICAgIGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjtcbiAgICAgICAgZiA9ICExO1xuICAgICAgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgIG8gPSAhMCwgbiA9IHI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZiAmJiBudWxsICE9IHRbXCJyZXR1cm5cIl0gJiYgKHUgPSB0W1wicmV0dXJuXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChvKSB0aHJvdyBuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfVxufVxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7XG4gIHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAoIWl0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZTogZnVuY3Rpb24gZShfZSkge1xuICAgICAgICAgIHRocm93IF9lO1xuICAgICAgICB9LFxuICAgICAgICBmOiBGXG4gICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cbiAgdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLFxuICAgIGRpZEVyciA9IGZhbHNlLFxuICAgIGVycjtcbiAgcmV0dXJuIHtcbiAgICBzOiBmdW5jdGlvbiBzKCkge1xuICAgICAgaXQgPSBpdC5jYWxsKG8pO1xuICAgIH0sXG4gICAgbjogZnVuY3Rpb24gbigpIHtcbiAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpO1xuICAgICAgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTtcbiAgICAgIHJldHVybiBzdGVwO1xuICAgIH0sXG4gICAgZTogZnVuY3Rpb24gZShfZTIpIHtcbiAgICAgIGRpZEVyciA9IHRydWU7XG4gICAgICBlcnIgPSBfZTI7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbiBmKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0W1wicmV0dXJuXCJdICE9IG51bGwpIGl0W1wicmV0dXJuXCJdKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcbiAgcmV0dXJuIGFycjI7XG59XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHtcbiAgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7XG4gICAgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pO1xuICB9XG4gIHJldHVybiB0O1xufVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7XG4gIGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7XG4gICAgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9O1xuICAgIHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbnZhciBQUk9UT0NPTF9UVVNfVjEgPSAndHVzLXYxJztcbnZhciBQUk9UT0NPTF9JRVRGX0RSQUZUXzAzID0gJ2lldGYtZHJhZnQtMDMnO1xudmFyIFBST1RPQ09MX0lFVEZfRFJBRlRfMDUgPSAnaWV0Zi1kcmFmdC0wNSc7XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGVuZHBvaW50OiBudWxsLFxuICB1cGxvYWRVcmw6IG51bGwsXG4gIG1ldGFkYXRhOiB7fSxcbiAgbWV0YWRhdGFGb3JQYXJ0aWFsVXBsb2Fkczoge30sXG4gIGZpbmdlcnByaW50OiBudWxsLFxuICB1cGxvYWRTaXplOiBudWxsLFxuICBvblByb2dyZXNzOiBudWxsLFxuICBvbkNodW5rQ29tcGxldGU6IG51bGwsXG4gIG9uU3VjY2VzczogbnVsbCxcbiAgb25FcnJvcjogbnVsbCxcbiAgb25VcGxvYWRVcmxBdmFpbGFibGU6IG51bGwsXG4gIG92ZXJyaWRlUGF0Y2hNZXRob2Q6IGZhbHNlLFxuICBoZWFkZXJzOiB7fSxcbiAgYWRkUmVxdWVzdElkOiBmYWxzZSxcbiAgb25CZWZvcmVSZXF1ZXN0OiBudWxsLFxuICBvbkFmdGVyUmVzcG9uc2U6IG51bGwsXG4gIG9uU2hvdWxkUmV0cnk6IGRlZmF1bHRPblNob3VsZFJldHJ5LFxuICBjaHVua1NpemU6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgcmV0cnlEZWxheXM6IFswLCAxMDAwLCAzMDAwLCA1MDAwXSxcbiAgcGFyYWxsZWxVcGxvYWRzOiAxLFxuICBwYXJhbGxlbFVwbG9hZEJvdW5kYXJpZXM6IG51bGwsXG4gIHN0b3JlRmluZ2VycHJpbnRGb3JSZXN1bWluZzogdHJ1ZSxcbiAgcmVtb3ZlRmluZ2VycHJpbnRPblN1Y2Nlc3M6IGZhbHNlLFxuICB1cGxvYWRMZW5ndGhEZWZlcnJlZDogZmFsc2UsXG4gIHVwbG9hZERhdGFEdXJpbmdDcmVhdGlvbjogZmFsc2UsXG4gIHVybFN0b3JhZ2U6IG51bGwsXG4gIGZpbGVSZWFkZXI6IG51bGwsXG4gIGh0dHBTdGFjazogbnVsbCxcbiAgcHJvdG9jb2w6IFBST1RPQ09MX1RVU19WMVxufTtcbnZhciBCYXNlVXBsb2FkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVVwbG9hZChmaWxlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VVcGxvYWQpO1xuICAgIC8vIFdhcm4gYWJvdXQgcmVtb3ZlZCBvcHRpb25zIGZyb20gcHJldmlvdXMgdmVyc2lvbnNcbiAgICBpZiAoJ3Jlc3VtZScgaW4gb3B0aW9ucykge1xuICAgICAgY29uc29sZS5sb2coJ3R1czogVGhlIGByZXN1bWVgIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkIGluIHR1cy1qcy1jbGllbnQgdjIuIFBsZWFzZSB1c2UgdGhlIFVSTCBzdG9yYWdlIEFQSSBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWZhdWx0IG9wdGlvbnMgd2lsbCBhbHJlYWR5IGJlIGFkZGVkIGZyb20gdGhlIHdyYXBwZXIgY2xhc3Nlcy5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgLy8gQ2FzdCBjaHVua1NpemUgdG8gaW50ZWdlclxuICAgIHRoaXMub3B0aW9ucy5jaHVua1NpemUgPSBOdW1iZXIodGhpcy5vcHRpb25zLmNodW5rU2l6ZSk7XG5cbiAgICAvLyBUaGUgc3RvcmFnZSBtb2R1bGUgdXNlZCB0byBzdG9yZSBVUkxzXG4gICAgdGhpcy5fdXJsU3RvcmFnZSA9IHRoaXMub3B0aW9ucy51cmxTdG9yYWdlO1xuXG4gICAgLy8gVGhlIHVuZGVybHlpbmcgRmlsZS9CbG9iIG9iamVjdFxuICAgIHRoaXMuZmlsZSA9IGZpbGU7XG5cbiAgICAvLyBUaGUgVVJMIGFnYWluc3Qgd2hpY2ggdGhlIGZpbGUgd2lsbCBiZSB1cGxvYWRlZFxuICAgIHRoaXMudXJsID0gbnVsbDtcblxuICAgIC8vIFRoZSB1bmRlcmx5aW5nIHJlcXVlc3Qgb2JqZWN0IGZvciB0aGUgY3VycmVudCBQQVRDSCByZXF1ZXN0XG4gICAgdGhpcy5fcmVxID0gbnVsbDtcblxuICAgIC8vIFRoZSBmaW5nZXJwaW5ydCBmb3IgdGhlIGN1cnJlbnQgZmlsZSAoc2V0IGFmdGVyIHN0YXJ0KCkpXG4gICAgdGhpcy5fZmluZ2VycHJpbnQgPSBudWxsO1xuXG4gICAgLy8gVGhlIGtleSB0aGF0IHRoZSBVUkwgc3RvcmFnZSByZXR1cm5lZCB3aGVuIHNhdmluZyBhbiBVUkwgd2l0aCBhIGZpbmdlcnByaW50LFxuICAgIHRoaXMuX3VybFN0b3JhZ2VLZXkgPSBudWxsO1xuXG4gICAgLy8gVGhlIG9mZnNldCB1c2VkIGluIHRoZSBjdXJyZW50IFBBVENIIHJlcXVlc3RcbiAgICB0aGlzLl9vZmZzZXQgPSBudWxsO1xuXG4gICAgLy8gVHJ1ZSBpZiB0aGUgY3VycmVudCBQQVRDSCByZXF1ZXN0IGhhcyBiZWVuIGFib3J0ZWRcbiAgICB0aGlzLl9hYm9ydGVkID0gZmFsc2U7XG5cbiAgICAvLyBUaGUgZmlsZSdzIHNpemUgaW4gYnl0ZXNcbiAgICB0aGlzLl9zaXplID0gbnVsbDtcblxuICAgIC8vIFRoZSBTb3VyY2Ugb2JqZWN0IHdoaWNoIHdpbGwgd3JhcCBhcm91bmQgdGhlIGdpdmVuIGZpbGUgYW5kIHByb3ZpZGVzIHVzXG4gICAgLy8gd2l0aCBhIHVuaWZpZWQgaW50ZXJmYWNlIGZvciBnZXR0aW5nIGl0cyBzaXplIGFuZCBzbGljZSBjaHVua3MgZnJvbSBpdHNcbiAgICAvLyBjb250ZW50IGFsbG93aW5nIHVzIHRvIGVhc2lseSBoYW5kbGUgRmlsZXMsIEJsb2JzLCBCdWZmZXJzIGFuZCBTdHJlYW1zLlxuICAgIHRoaXMuX3NvdXJjZSA9IG51bGw7XG5cbiAgICAvLyBUaGUgY3VycmVudCBjb3VudCBvZiBhdHRlbXB0cyB3aGljaCBoYXZlIGJlZW4gbWFkZS4gWmVybyBpbmRpY2F0ZXMgbm9uZS5cbiAgICB0aGlzLl9yZXRyeUF0dGVtcHQgPSAwO1xuXG4gICAgLy8gVGhlIHRpbWVvdXQncyBJRCB3aGljaCBpcyB1c2VkIHRvIGRlbGF5IHRoZSBuZXh0IHJldHJ5XG4gICAgdGhpcy5fcmV0cnlUaW1lb3V0ID0gbnVsbDtcblxuICAgIC8vIFRoZSBvZmZzZXQgb2YgdGhlIHJlbW90ZSB1cGxvYWQgYmVmb3JlIHRoZSBsYXRlc3QgYXR0ZW1wdCB3YXMgc3RhcnRlZC5cbiAgICB0aGlzLl9vZmZzZXRCZWZvcmVSZXRyeSA9IDA7XG5cbiAgICAvLyBBbiBhcnJheSBvZiBCYXNlVXBsb2FkIGluc3RhbmNlcyB3aGljaCBhcmUgdXNlZCBmb3IgdXBsb2FkaW5nIHRoZSBkaWZmZXJlbnRcbiAgICAvLyBwYXJ0cywgaWYgdGhlIHBhcmFsbGVsVXBsb2FkcyBvcHRpb24gaXMgdXNlZC5cbiAgICB0aGlzLl9wYXJhbGxlbFVwbG9hZHMgPSBudWxsO1xuXG4gICAgLy8gQW4gYXJyYXkgb2YgdXBsb2FkIFVSTHMgd2hpY2ggYXJlIHVzZWQgZm9yIHVwbG9hZGluZyB0aGUgZGlmZmVyZW50XG4gICAgLy8gcGFydHMsIGlmIHRoZSBwYXJhbGxlbFVwbG9hZHMgb3B0aW9uIGlzIHVzZWQuXG4gICAgdGhpcy5fcGFyYWxsZWxVcGxvYWRVcmxzID0gbnVsbDtcblxuICAgIC8vIFRoZSByZW1vdGUgdXBsb2FkIHJlc291cmNlIGlzIGRlZmVycmVkXG4gICAgdGhpcy5fZGVmZXJyZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdGhlIFRlcm1pbmF0aW9uIGV4dGVuc2lvbiB0byBkZWxldGUgYW4gdXBsb2FkIGZyb20gdGhlIHNlcnZlciBieSBzZW5kaW5nIGEgREVMRVRFXG4gICAqIHJlcXVlc3QgdG8gdGhlIHNwZWNpZmllZCB1cGxvYWQgVVJMLiBUaGlzIGlzIG9ubHkgcG9zc2libGUgaWYgdGhlIHNlcnZlciBzdXBwb3J0cyB0aGVcbiAgICogVGVybWluYXRpb24gZXh0ZW5zaW9uLiBJZiB0aGUgYG9wdGlvbnMucmV0cnlEZWxheXNgIHByb3BlcnR5IGlzIHNldCwgdGhlIG1ldGhvZCB3aWxsXG4gICAqIGFsc28gcmV0cnkgaWYgYW4gZXJyb3Igb2N1cnJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSB1cGxvYWQncyBVUkwgd2hpY2ggd2lsbCBiZSB0ZXJtaW5hdGVkLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciBpbmZsdWVuY2luZyBIVFRQIHJlcXVlc3RzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkL3JlamVjdGVkIHdoZW4gdGhlIHJlcXVlc3RzIGZpbmlzaC5cbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoQmFzZVVwbG9hZCwgW3tcbiAgICBrZXk6IFwiZmluZFByZXZpb3VzVXBsb2Fkc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kUHJldmlvdXNVcGxvYWRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZmluZ2VycHJpbnQodGhpcy5maWxlLCB0aGlzLm9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGZpbmdlcnByaW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fdXJsU3RvcmFnZS5maW5kVXBsb2Fkc0J5RmluZ2VycHJpbnQoZmluZ2VycHJpbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc3VtZUZyb21QcmV2aW91c1VwbG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWVGcm9tUHJldmlvdXNVcGxvYWQocHJldmlvdXNVcGxvYWQpIHtcbiAgICAgIHRoaXMudXJsID0gcHJldmlvdXNVcGxvYWQudXBsb2FkVXJsIHx8IG51bGw7XG4gICAgICB0aGlzLl9wYXJhbGxlbFVwbG9hZFVybHMgPSBwcmV2aW91c1VwbG9hZC5wYXJhbGxlbFVwbG9hZFVybHMgfHwgbnVsbDtcbiAgICAgIHRoaXMuX3VybFN0b3JhZ2VLZXkgPSBwcmV2aW91c1VwbG9hZC51cmxTdG9yYWdlS2V5O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgdmFyIGZpbGUgPSB0aGlzLmZpbGU7XG4gICAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcigndHVzOiBubyBmaWxlIG9yIHN0cmVhbSB0byB1cGxvYWQgcHJvdmlkZWQnKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghW1BST1RPQ09MX1RVU19WMSwgUFJPVE9DT0xfSUVURl9EUkFGVF8wMywgUFJPVE9DT0xfSUVURl9EUkFGVF8wNV0uaW5jbHVkZXModGhpcy5vcHRpb25zLnByb3RvY29sKSkge1xuICAgICAgICB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwidHVzOiB1bnN1cHBvcnRlZCBwcm90b2NvbCBcIi5jb25jYXQodGhpcy5vcHRpb25zLnByb3RvY29sKSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5lbmRwb2ludCAmJiAhdGhpcy5vcHRpb25zLnVwbG9hZFVybCAmJiAhdGhpcy51cmwpIHtcbiAgICAgICAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcigndHVzOiBuZWl0aGVyIGFuIGVuZHBvaW50IG9yIGFuIHVwbG9hZCBVUkwgaXMgcHJvdmlkZWQnKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByZXRyeURlbGF5cyA9IHRoaXMub3B0aW9ucy5yZXRyeURlbGF5cztcbiAgICAgIGlmIChyZXRyeURlbGF5cyAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZXRyeURlbGF5cykgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcigndHVzOiB0aGUgYHJldHJ5RGVsYXlzYCBvcHRpb24gbXVzdCBlaXRoZXIgYmUgYW4gYXJyYXkgb3IgbnVsbCcpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXJhbGxlbFVwbG9hZHMgPiAxKSB7XG4gICAgICAgIC8vIFRlc3Qgd2hpY2ggb3B0aW9ucyBhcmUgaW5jb21wYXRpYmxlIHdpdGggcGFyYWxsZWwgdXBsb2Fkcy5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYXJyID0gWyd1cGxvYWRVcmwnLCAndXBsb2FkU2l6ZScsICd1cGxvYWRMZW5ndGhEZWZlcnJlZCddOyBfaSA8IF9hcnIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgdmFyIG9wdGlvbk5hbWUgPSBfYXJyW19pXTtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zW29wdGlvbk5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwidHVzOiBjYW5ub3QgdXNlIHRoZSBcIi5jb25jYXQob3B0aW9uTmFtZSwgXCIgb3B0aW9uIHdoZW4gcGFyYWxsZWxVcGxvYWRzIGlzIGVuYWJsZWRcIikpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFyYWxsZWxVcGxvYWRCb3VuZGFyaWVzKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFyYWxsZWxVcGxvYWRzIDw9IDEpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKCd0dXM6IGNhbm5vdCB1c2UgdGhlIGBwYXJhbGxlbFVwbG9hZEJvdW5kYXJpZXNgIG9wdGlvbiB3aGVuIGBwYXJhbGxlbFVwbG9hZHNgIGlzIGRpc2FibGVkJykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhcmFsbGVsVXBsb2FkcyAhPT0gdGhpcy5vcHRpb25zLnBhcmFsbGVsVXBsb2FkQm91bmRhcmllcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKCd0dXM6IHRoZSBgcGFyYWxsZWxVcGxvYWRCb3VuZGFyaWVzYCBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoIGFzIHRoZSB2YWx1ZSBvZiBgcGFyYWxsZWxVcGxvYWRzYCcpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMub3B0aW9ucy5maW5nZXJwcmludChmaWxlLCB0aGlzLm9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGZpbmdlcnByaW50KSB7XG4gICAgICAgIGlmIChmaW5nZXJwcmludCA9PSBudWxsKSB7XG4gICAgICAgICAgKDAsIF9sb2dnZXIubG9nKSgnTm8gZmluZ2VycHJpbnQgd2FzIGNhbGN1bGF0ZWQgbWVhbmluZyB0aGF0IHRoZSB1cGxvYWQgY2Fubm90IGJlIHN0b3JlZCBpbiB0aGUgVVJMIHN0b3JhZ2UuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKDAsIF9sb2dnZXIubG9nKShcIkNhbGN1bGF0ZWQgZmluZ2VycHJpbnQ6IFwiLmNvbmNhdChmaW5nZXJwcmludCkpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzMi5fZmluZ2VycHJpbnQgPSBmaW5nZXJwcmludDtcbiAgICAgICAgaWYgKF90aGlzMi5fc291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpczIub3B0aW9ucy5maWxlUmVhZGVyLm9wZW5GaWxlKGZpbGUsIF90aGlzMi5vcHRpb25zLmNodW5rU2l6ZSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgX3RoaXMyLl9zb3VyY2UgPSBzb3VyY2U7XG5cbiAgICAgICAgLy8gRmlyc3QsIHdlIGxvb2sgYXQgdGhlIHVwbG9hZExlbmd0aERlZmVycmVkIG9wdGlvbi5cbiAgICAgICAgLy8gTmV4dCwgd2UgY2hlY2sgaWYgdGhlIGNhbGxlciBoYXMgc3VwcGxpZWQgYSBtYW51YWwgdXBsb2FkIHNpemUuXG4gICAgICAgIC8vIEZpbmFsbHksIHdlIHRyeSB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgc2l6ZSBmcm9tIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMudXBsb2FkTGVuZ3RoRGVmZXJyZWQpIHtcbiAgICAgICAgICBfdGhpczIuX3NpemUgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzMi5vcHRpb25zLnVwbG9hZFNpemUgIT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzMi5fc2l6ZSA9IE51bWJlcihfdGhpczIub3B0aW9ucy51cGxvYWRTaXplKTtcbiAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKF90aGlzMi5fc2l6ZSkpIHtcbiAgICAgICAgICAgIF90aGlzMi5fZW1pdEVycm9yKG5ldyBFcnJvcigndHVzOiBjYW5ub3QgY29udmVydCBgdXBsb2FkU2l6ZWAgb3B0aW9uIGludG8gYSBudW1iZXInKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMi5fc2l6ZSA9IF90aGlzMi5fc291cmNlLnNpemU7XG4gICAgICAgICAgaWYgKF90aGlzMi5fc2l6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBfdGhpczIuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJ0dXM6IGNhbm5vdCBhdXRvbWF0aWNhbGx5IGRlcml2ZSB1cGxvYWQncyBzaXplIGZyb20gaW5wdXQuIFNwZWNpZnkgaXQgbWFudWFsbHkgdXNpbmcgdGhlIGB1cGxvYWRTaXplYCBvcHRpb24gb3IgdXNlIHRoZSBgdXBsb2FkTGVuZ3RoRGVmZXJyZWRgIG9wdGlvblwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIHVwbG9hZCB3YXMgY29uZmlndXJlZCB0byB1c2UgbXVsdGlwbGUgcmVxdWVzdHMgb3IgaWYgd2UgcmVzdW1lIGZyb21cbiAgICAgICAgLy8gYW4gdXBsb2FkIHdoaWNoIHVzZWQgbXVsdGlwbGUgcmVxdWVzdHMsIHdlIHN0YXJ0IGEgcGFyYWxsZWwgdXBsb2FkLlxuICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMucGFyYWxsZWxVcGxvYWRzID4gMSB8fCBfdGhpczIuX3BhcmFsbGVsVXBsb2FkVXJscyAhPSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMyLl9zdGFydFBhcmFsbGVsVXBsb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMyLl9zdGFydFNpbmdsZVVwbG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgX3RoaXMyLl9lbWl0RXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYXRlIHRoZSB1cGxvYWRpbmcgcHJvY2VkdXJlIGZvciBhIHBhcmFsbGVsaXplZCB1cGxvYWQsIHdoZXJlIG9uZSBmaWxlIGlzIHNwbGl0IGludG9cbiAgICAgKiBtdWx0aXBsZSByZXF1ZXN0IHdoaWNoIGFyZSBydW4gaW4gcGFyYWxsZWwuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfc3RhcnRQYXJhbGxlbFVwbG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RhcnRQYXJhbGxlbFVwbG9hZCgpIHtcbiAgICAgIHZhciBfdGhpcyRvcHRpb25zJHBhcmFsbGUsXG4gICAgICAgIF90aGlzMyA9IHRoaXM7XG4gICAgICB2YXIgdG90YWxTaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgIHZhciB0b3RhbFByb2dyZXNzID0gMDtcbiAgICAgIHRoaXMuX3BhcmFsbGVsVXBsb2FkcyA9IFtdO1xuICAgICAgdmFyIHBhcnRDb3VudCA9IHRoaXMuX3BhcmFsbGVsVXBsb2FkVXJscyAhPSBudWxsID8gdGhpcy5fcGFyYWxsZWxVcGxvYWRVcmxzLmxlbmd0aCA6IHRoaXMub3B0aW9ucy5wYXJhbGxlbFVwbG9hZHM7XG5cbiAgICAgIC8vIFRoZSBpbnB1dCBmaWxlIHdpbGwgYmUgc3BsaXQgaW50byBtdWx0aXBsZSBzbGljZXMgd2hpY2ggYXJlIHVwbG9hZGVkIGluIHNlcGFyYXRlXG4gICAgICAvLyByZXF1ZXN0cy4gSGVyZSB3ZSBnZXQgdGhlIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb24gZm9yIHRoZSBzbGljZXMuXG4gICAgICB2YXIgcGFydHMgPSAoX3RoaXMkb3B0aW9ucyRwYXJhbGxlID0gdGhpcy5vcHRpb25zLnBhcmFsbGVsVXBsb2FkQm91bmRhcmllcykgIT09IG51bGwgJiYgX3RoaXMkb3B0aW9ucyRwYXJhbGxlICE9PSB2b2lkIDAgPyBfdGhpcyRvcHRpb25zJHBhcmFsbGUgOiBzcGxpdFNpemVJbnRvUGFydHModGhpcy5fc291cmNlLnNpemUsIHBhcnRDb3VudCk7XG5cbiAgICAgIC8vIEF0dGFjaCBVUkxzIGZyb20gcHJldmlvdXMgdXBsb2FkcywgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHRoaXMuX3BhcmFsbGVsVXBsb2FkVXJscykge1xuICAgICAgICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0LCBpbmRleCkge1xuICAgICAgICAgIHBhcnQudXBsb2FkVXJsID0gX3RoaXMzLl9wYXJhbGxlbFVwbG9hZFVybHNbaW5kZXhdIHx8IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYW4gZW1wdHkgbGlzdCBmb3Igc3RvcmluZyB0aGUgdXBsb2FkIFVSTHNcbiAgICAgIHRoaXMuX3BhcmFsbGVsVXBsb2FkVXJscyA9IG5ldyBBcnJheShwYXJ0cy5sZW5ndGgpO1xuXG4gICAgICAvLyBHZW5lcmF0ZSBhIHByb21pc2UgZm9yIGVhY2ggc2xpY2UgdGhhdCB3aWxsIGJlIHJlc29sdmUgaWYgdGhlIHJlc3BlY3RpdmVcbiAgICAgIC8vIHVwbG9hZCBpcyBjb21wbGV0ZWQuXG4gICAgICB2YXIgdXBsb2FkcyA9IHBhcnRzLm1hcChmdW5jdGlvbiAocGFydCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGxhc3RQYXJ0UHJvZ3Jlc3MgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXMzLl9zb3VyY2Uuc2xpY2UocGFydC5zdGFydCwgcGFydC5lbmQpLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlO1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAvLyBNZXJnZSB3aXRoIHRoZSB1c2VyIHN1cHBsaWVkIG9wdGlvbnMgYnV0IG92ZXJ3cml0ZSBzb21lIHZhbHVlcy5cbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpczMub3B0aW9ucyksIHt9LCB7XG4gICAgICAgICAgICAgIC8vIElmIGF2YWlsYWJsZSwgdGhlIHBhcnRpYWwgdXBsb2FkIHNob3VsZCBiZSByZXN1bWVkIGZyb20gYSBwcmV2aW91cyBVUkwuXG4gICAgICAgICAgICAgIHVwbG9hZFVybDogcGFydC51cGxvYWRVcmwgfHwgbnVsbCxcbiAgICAgICAgICAgICAgLy8gV2UgdGFrZSBtYW51YWxseSBjYXJlIG9mIHJlc3VtaW5nIGZvciBwYXJ0aWFsIHVwbG9hZHMsIHNvIHRoZXkgc2hvdWxkXG4gICAgICAgICAgICAgIC8vIG5vdCBiZSBzdG9yZWQgaW4gdGhlIFVSTCBzdG9yYWdlLlxuICAgICAgICAgICAgICBzdG9yZUZpbmdlcnByaW50Rm9yUmVzdW1pbmc6IGZhbHNlLFxuICAgICAgICAgICAgICByZW1vdmVGaW5nZXJwcmludE9uU3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBwYXJhbGxlbFVwbG9hZHMgb3B0aW9uIHRvIG5vdCBjYXVzZSByZWN1cnNpb24uXG4gICAgICAgICAgICAgIHBhcmFsbGVsVXBsb2FkczogMSxcbiAgICAgICAgICAgICAgLy8gUmVzZXQgdGhpcyBvcHRpb24gYXMgd2UgYXJlIG5vdCBkb2luZyBhIHBhcmFsbGVsIHVwbG9hZC5cbiAgICAgICAgICAgICAgcGFyYWxsZWxVcGxvYWRCb3VuZGFyaWVzOiBudWxsLFxuICAgICAgICAgICAgICBtZXRhZGF0YTogX3RoaXMzLm9wdGlvbnMubWV0YWRhdGFGb3JQYXJ0aWFsVXBsb2FkcyxcbiAgICAgICAgICAgICAgLy8gQWRkIHRoZSBoZWFkZXIgdG8gaW5kaWNhdGUgdGhlIHRoaXMgaXMgYSBwYXJ0aWFsIHVwbG9hZC5cbiAgICAgICAgICAgICAgaGVhZGVyczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpczMub3B0aW9ucy5oZWFkZXJzKSwge30sIHtcbiAgICAgICAgICAgICAgICAnVXBsb2FkLUNvbmNhdCc6ICdwYXJ0aWFsJ1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgLy8gUmVqZWN0IG9yIHJlc29sdmUgdGhlIHByb21pc2UgaWYgdGhlIHVwbG9hZCBlcnJvcnMgb3IgY29tcGxldGVzLlxuICAgICAgICAgICAgICBvblN1Y2Nlc3M6IHJlc29sdmUsXG4gICAgICAgICAgICAgIG9uRXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgLy8gQmFzZWQgaW4gdGhlIHByb2dyZXNzIGZvciB0aGlzIHBhcnRpYWwgdXBsb2FkLCBjYWxjdWxhdGUgdGhlIHByb2dyZXNzXG4gICAgICAgICAgICAgIC8vIGZvciB0aGUgZW50aXJlIGZpbmFsIHVwbG9hZC5cbiAgICAgICAgICAgICAgb25Qcm9ncmVzczogZnVuY3Rpb24gb25Qcm9ncmVzcyhuZXdQYXJ0UHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICB0b3RhbFByb2dyZXNzID0gdG90YWxQcm9ncmVzcyAtIGxhc3RQYXJ0UHJvZ3Jlc3MgKyBuZXdQYXJ0UHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgbGFzdFBhcnRQcm9ncmVzcyA9IG5ld1BhcnRQcm9ncmVzcztcbiAgICAgICAgICAgICAgICBfdGhpczMuX2VtaXRQcm9ncmVzcyh0b3RhbFByb2dyZXNzLCB0b3RhbFNpemUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAvLyBXYWl0IHVudGlsIGV2ZXJ5IHBhcnRpYWwgdXBsb2FkIGhhcyBhbiB1cGxvYWQgVVJMLCBzbyB3ZSBjYW4gYWRkXG4gICAgICAgICAgICAgIC8vIHRoZW0gdG8gdGhlIFVSTCBzdG9yYWdlLlxuICAgICAgICAgICAgICBvblVwbG9hZFVybEF2YWlsYWJsZTogZnVuY3Rpb24gb25VcGxvYWRVcmxBdmFpbGFibGUoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMzLl9wYXJhbGxlbFVwbG9hZFVybHNbaW5kZXhdID0gdXBsb2FkLnVybDtcbiAgICAgICAgICAgICAgICAvLyBUZXN0IGlmIGFsbCB1cGxvYWRzIGhhdmUgcmVjZWl2ZWQgYW4gVVJMXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMy5fcGFyYWxsZWxVcGxvYWRVcmxzLmZpbHRlcihmdW5jdGlvbiAodSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4odSk7XG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoID09PSBwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzMy5fc2F2ZVVwbG9hZEluVXJsU3RvcmFnZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdXBsb2FkID0gbmV3IEJhc2VVcGxvYWQodmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdXBsb2FkLnN0YXJ0KCk7XG5cbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSB1cGxvYWQgaW4gYW4gYXJyYXksIHNvIHdlIGNhbiBsYXRlciBhYm9ydCB0aGVtIGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgICAgIF90aGlzMy5fcGFyYWxsZWxVcGxvYWRzLnB1c2godXBsb2FkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciByZXE7XG4gICAgICAvLyBXYWl0IHVudGlsIGFsbCBwYXJ0aWFsIHVwbG9hZHMgYXJlIGZpbmlzaGVkIGFuZCB3ZSBjYW4gc2VuZCB0aGUgUE9TVCByZXF1ZXN0IGZvclxuICAgICAgLy8gY3JlYXRpbmcgdGhlIGZpbmFsIHVwbG9hZC5cbiAgICAgIFByb21pc2UuYWxsKHVwbG9hZHMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXEgPSBfdGhpczMuX29wZW5SZXF1ZXN0KCdQT1NUJywgX3RoaXMzLm9wdGlvbnMuZW5kcG9pbnQpO1xuICAgICAgICByZXEuc2V0SGVhZGVyKCdVcGxvYWQtQ29uY2F0JywgXCJmaW5hbDtcIi5jb25jYXQoX3RoaXMzLl9wYXJhbGxlbFVwbG9hZFVybHMuam9pbignICcpKSk7XG5cbiAgICAgICAgLy8gQWRkIG1ldGFkYXRhIGlmIHZhbHVlcyBoYXZlIGJlZW4gYWRkZWRcbiAgICAgICAgdmFyIG1ldGFkYXRhID0gZW5jb2RlTWV0YWRhdGEoX3RoaXMzLm9wdGlvbnMubWV0YWRhdGEpO1xuICAgICAgICBpZiAobWV0YWRhdGEgIT09ICcnKSB7XG4gICAgICAgICAgcmVxLnNldEhlYWRlcignVXBsb2FkLU1ldGFkYXRhJywgbWV0YWRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpczMuX3NlbmRSZXF1ZXN0KHJlcSwgbnVsbCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgaWYgKCFpblN0YXR1c0NhdGVnb3J5KHJlcy5nZXRTdGF0dXMoKSwgMjAwKSkge1xuICAgICAgICAgIF90aGlzMy5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogdW5leHBlY3RlZCByZXNwb25zZSB3aGlsZSBjcmVhdGluZyB1cGxvYWQnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzLmdldEhlYWRlcignTG9jYXRpb24nKTtcbiAgICAgICAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICAgICAgICBfdGhpczMuX2VtaXRIdHRwRXJyb3IocmVxLCByZXMsICd0dXM6IGludmFsaWQgb3IgbWlzc2luZyBMb2NhdGlvbiBoZWFkZXInKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMzLnVybCA9IHJlc29sdmVVcmwoX3RoaXMzLm9wdGlvbnMuZW5kcG9pbnQsIGxvY2F0aW9uKTtcbiAgICAgICAgKDAsIF9sb2dnZXIubG9nKShcIkNyZWF0ZWQgdXBsb2FkIGF0IFwiLmNvbmNhdChfdGhpczMudXJsKSk7XG4gICAgICAgIF90aGlzMy5fZW1pdFN1Y2Nlc3MocmVzKTtcbiAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBfdGhpczMuX2VtaXRFcnJvcihlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhdGUgdGhlIHVwbG9hZGluZyBwcm9jZWR1cmUgZm9yIGEgbm9uLXBhcmFsbGVsIHVwbG9hZC4gSGVyZSB0aGUgZW50aXJlIGZpbGUgaXNcbiAgICAgKiB1cGxvYWRlZCBpbiBhIHNlcXVlbnRpYWwgbWF0dGVyLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX3N0YXJ0U2luZ2xlVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zdGFydFNpbmdsZVVwbG9hZCgpIHtcbiAgICAgIC8vIFJlc2V0IHRoZSBhYm9ydGVkIGZsYWcgd2hlbiB0aGUgdXBsb2FkIGlzIHN0YXJ0ZWQgb3IgZWxzZSB0aGVcbiAgICAgIC8vIF9wZXJmb3JtVXBsb2FkIHdpbGwgc3RvcCBiZWZvcmUgc2VuZGluZyBhIHJlcXVlc3QgaWYgdGhlIHVwbG9hZCBoYXMgYmVlblxuICAgICAgLy8gYWJvcnRlZCBwcmV2aW91c2x5LlxuICAgICAgdGhpcy5fYWJvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAvLyBUaGUgdXBsb2FkIGhhZCBiZWVuIHN0YXJ0ZWQgcHJldmlvdXNseSBhbmQgd2Ugc2hvdWxkIHJldXNlIHRoaXMgVVJMLlxuICAgICAgaWYgKHRoaXMudXJsICE9IG51bGwpIHtcbiAgICAgICAgKDAsIF9sb2dnZXIubG9nKShcIlJlc3VtaW5nIHVwbG9hZCBmcm9tIHByZXZpb3VzIFVSTDogXCIuY29uY2F0KHRoaXMudXJsKSk7XG4gICAgICAgIHRoaXMuX3Jlc3VtZVVwbG9hZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEEgVVJMIGhhcyBtYW51YWxseSBiZWVuIHNwZWNpZmllZCwgc28gd2UgdHJ5IHRvIHJlc3VtZVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGxvYWRVcmwgIT0gbnVsbCkge1xuICAgICAgICAoMCwgX2xvZ2dlci5sb2cpKFwiUmVzdW1pbmcgdXBsb2FkIGZyb20gcHJvdmlkZWQgVVJMOiBcIi5jb25jYXQodGhpcy5vcHRpb25zLnVwbG9hZFVybCkpO1xuICAgICAgICB0aGlzLnVybCA9IHRoaXMub3B0aW9ucy51cGxvYWRVcmw7XG4gICAgICAgIHRoaXMuX3Jlc3VtZVVwbG9hZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEFuIHVwbG9hZCBoYXMgbm90IHN0YXJ0ZWQgZm9yIHRoZSBmaWxlIHlldCwgc28gd2Ugc3RhcnQgYSBuZXcgb25lXG4gICAgICAoMCwgX2xvZ2dlci5sb2cpKCdDcmVhdGluZyBhIG5ldyB1cGxvYWQnKTtcbiAgICAgIHRoaXMuX2NyZWF0ZVVwbG9hZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFib3J0IGFueSBydW5uaW5nIHJlcXVlc3QgYW5kIHN0b3AgdGhlIGN1cnJlbnQgdXBsb2FkLiBBZnRlciBhYm9ydCBpcyBjYWxsZWQsIG5vIGV2ZW50XG4gICAgICogaGFuZGxlciB3aWxsIGJlIGludm9rZWQgYW55bW9yZS4gWW91IGNhbiB1c2UgdGhlIGBzdGFydGAgbWV0aG9kIHRvIHJlc3VtZSB0aGUgdXBsb2FkXG4gICAgICogYWdhaW4uXG4gICAgICogSWYgYHNob3VsZFRlcm1pbmF0ZWAgaXMgdHJ1ZSwgdGhlIGB0ZXJtaW5hdGVgIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGVcbiAgICAgKiBjdXJyZW50IHVwbG9hZCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFRlcm1pbmF0ZSBUcnVlIGlmIHRoZSB1cGxvYWQgc2hvdWxkIGJlIGRlbGV0ZWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFRoZSBQcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQvcmVqZWN0ZWQgd2hlbiB0aGUgcmVxdWVzdHMgZmluaXNoLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImFib3J0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KHNob3VsZFRlcm1pbmF0ZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG4gICAgICAvLyBTdG9wIGFueSBwYXJhbGxlbCBwYXJ0aWFsIHVwbG9hZHMsIHRoYXQgaGF2ZSBiZWVuIHN0YXJ0ZWQgaW4gX3N0YXJ0UGFyYWxsZWxVcGxvYWRzLlxuICAgICAgaWYgKHRoaXMuX3BhcmFsbGVsVXBsb2FkcyAhPSBudWxsKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9wYXJhbGxlbFVwbG9hZHMpLFxuICAgICAgICAgIF9zdGVwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgdXBsb2FkID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICB1cGxvYWQuYWJvcnQoc2hvdWxkVGVybWluYXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTdG9wIGFueSBjdXJyZW50IHJ1bm5pbmcgcmVxdWVzdC5cbiAgICAgIGlmICh0aGlzLl9yZXEgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcmVxLmFib3J0KCk7XG4gICAgICAgIC8vIE5vdGU6IFdlIGRvIG5vdCBjbG9zZSB0aGUgZmlsZSBzb3VyY2UgaGVyZSwgc28gdGhlIHVzZXIgY2FuIHJlc3VtZSBpbiB0aGUgZnV0dXJlLlxuICAgICAgfVxuICAgICAgdGhpcy5fYWJvcnRlZCA9IHRydWU7XG5cbiAgICAgIC8vIFN0b3AgYW55IHRpbWVvdXQgdXNlZCBmb3IgaW5pdGlhdGluZyBhIHJldHJ5LlxuICAgICAgaWYgKHRoaXMuX3JldHJ5VGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yZXRyeVRpbWVvdXQpO1xuICAgICAgICB0aGlzLl9yZXRyeVRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCFzaG91bGRUZXJtaW5hdGUgfHwgdGhpcy51cmwgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gQmFzZVVwbG9hZC50ZXJtaW5hdGUodGhpcy51cmwsIHRoaXMub3B0aW9ucylcbiAgICAgIC8vIFJlbW92ZSBlbnRyeSBmcm9tIHRoZSBVUkwgc3RvcmFnZSBzaW5jZSB0aGUgdXBsb2FkIFVSTCBpcyBubyBsb25nZXIgdmFsaWQuXG4gICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczQuX3JlbW92ZUZyb21VcmxTdG9yYWdlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2VtaXRIdHRwRXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VtaXRIdHRwRXJyb3IocmVxLCByZXMsIG1lc3NhZ2UsIGNhdXNpbmdFcnIpIHtcbiAgICAgIHRoaXMuX2VtaXRFcnJvcihuZXcgX2Vycm9yLmRlZmF1bHQobWVzc2FnZSwgY2F1c2luZ0VyciwgcmVxLCByZXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2VtaXRFcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZW1pdEVycm9yKGVycikge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG4gICAgICAvLyBEbyBub3QgZW1pdCBlcnJvcnMsIGUuZy4gZnJvbSBhYm9ydGVkIEhUVFAgcmVxdWVzdHMsIGlmIHRoZSB1cGxvYWQgaGFzIGJlZW4gc3RvcHBlZC5cbiAgICAgIGlmICh0aGlzLl9hYm9ydGVkKSByZXR1cm47XG5cbiAgICAgIC8vIENoZWNrIGlmIHdlIHNob3VsZCByZXRyeSwgd2hlbiBlbmFibGVkLCBiZWZvcmUgc2VuZGluZyB0aGUgZXJyb3IgdG8gdGhlIHVzZXIuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJldHJ5RGVsYXlzICE9IG51bGwpIHtcbiAgICAgICAgLy8gV2Ugd2lsbCByZXNldCB0aGUgYXR0ZW1wdCBjb3VudGVyIGlmXG4gICAgICAgIC8vIC0gd2Ugd2VyZSBhbHJlYWR5IGFibGUgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyIChvZmZzZXQgIT0gbnVsbCkgYW5kXG4gICAgICAgIC8vIC0gd2Ugd2VyZSBhYmxlIHRvIHVwbG9hZCBhIHNtYWxsIGNodW5rIG9mIGRhdGEgdG8gdGhlIHNlcnZlclxuICAgICAgICB2YXIgc2hvdWxkUmVzZXREZWxheXMgPSB0aGlzLl9vZmZzZXQgIT0gbnVsbCAmJiB0aGlzLl9vZmZzZXQgPiB0aGlzLl9vZmZzZXRCZWZvcmVSZXRyeTtcbiAgICAgICAgaWYgKHNob3VsZFJlc2V0RGVsYXlzKSB7XG4gICAgICAgICAgdGhpcy5fcmV0cnlBdHRlbXB0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkUmV0cnkoZXJyLCB0aGlzLl9yZXRyeUF0dGVtcHQsIHRoaXMub3B0aW9ucykpIHtcbiAgICAgICAgICB2YXIgZGVsYXkgPSB0aGlzLm9wdGlvbnMucmV0cnlEZWxheXNbdGhpcy5fcmV0cnlBdHRlbXB0KytdO1xuICAgICAgICAgIHRoaXMuX29mZnNldEJlZm9yZVJldHJ5ID0gdGhpcy5fb2Zmc2V0O1xuICAgICAgICAgIHRoaXMuX3JldHJ5VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXM1LnN0YXJ0KCk7XG4gICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMub25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLm9wdGlvbnMub25FcnJvcihlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyBub3RpZmljYXRpb24gaWYgdGhlIHVwbG9hZCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgY29tcGxldGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RSZXNwb25zZSBMYXN0IEhUVFAgcmVzcG9uc2UuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2VtaXRTdWNjZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbWl0U3VjY2VzcyhsYXN0UmVzcG9uc2UpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlRmluZ2VycHJpbnRPblN1Y2Nlc3MpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHN0b3JlZCBmaW5nZXJwcmludCBhbmQgY29ycmVzcG9uZGluZyBlbmRwb2ludC4gVGhpcyBjYXVzZXNcbiAgICAgICAgLy8gbmV3IHVwbG9hZHMgb2YgdGhlIHNhbWUgZmlsZSB0byBiZSB0cmVhdGVkIGFzIGEgZGlmZmVyZW50IGZpbGUuXG4gICAgICAgIHRoaXMuX3JlbW92ZUZyb21VcmxTdG9yYWdlKCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5vblN1Y2Nlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9uU3VjY2Vzcyh7XG4gICAgICAgICAgbGFzdFJlc3BvbnNlOiBsYXN0UmVzcG9uc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIG5vdGlmaWNhdGlvbiB3aGVuIGRhdGEgaGFzIGJlZW4gc2VudCB0byB0aGUgc2VydmVyLiBUaGlzXG4gICAgICogZGF0YSBtYXkgbm90IGhhdmUgYmVlbiBhY2NlcHRlZCBieSB0aGUgc2VydmVyIHlldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlc1NlbnQgIE51bWJlciBvZiBieXRlcyBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVzVG90YWwgVG90YWwgbnVtYmVyIG9mIGJ5dGVzIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfZW1pdFByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbWl0UHJvZ3Jlc3MoYnl0ZXNTZW50LCBieXRlc1RvdGFsKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5vblByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vblByb2dyZXNzKGJ5dGVzU2VudCwgYnl0ZXNUb3RhbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIG5vdGlmaWNhdGlvbiB3aGVuIGEgY2h1bmsgb2YgZGF0YSBoYXMgYmVlbiBzZW50IHRvIHRoZSBzZXJ2ZXJcbiAgICAgKiBhbmQgYWNjZXB0ZWQgYnkgdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2h1bmtTaXplICBTaXplIG9mIHRoZSBjaHVuayB0aGF0IHdhcyBhY2NlcHRlZCBieSB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlc0FjY2VwdGVkIFRvdGFsIG51bWJlciBvZiBieXRlcyB0aGF0IGhhdmUgYmVlblxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHRlZCBieSB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlc1RvdGFsIFRvdGFsIG51bWJlciBvZiBieXRlcyB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2VtaXRDaHVua0NvbXBsZXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbWl0Q2h1bmtDb21wbGV0ZShjaHVua1NpemUsIGJ5dGVzQWNjZXB0ZWQsIGJ5dGVzVG90YWwpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm9uQ2h1bmtDb21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLm9wdGlvbnMub25DaHVua0NvbXBsZXRlKGNodW5rU2l6ZSwgYnl0ZXNBY2NlcHRlZCwgYnl0ZXNUb3RhbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHVwbG9hZCB1c2luZyB0aGUgY3JlYXRpb24gZXh0ZW5zaW9uIGJ5IHNlbmRpbmcgYSBQT1NUXG4gICAgICogcmVxdWVzdCB0byB0aGUgZW5kcG9pbnQuIEFmdGVyIHN1Y2Nlc3NmdWwgY3JlYXRpb24gdGhlIGZpbGUgd2lsbCBiZVxuICAgICAqIHVwbG9hZGVkXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfY3JlYXRlVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVVcGxvYWQoKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmVuZHBvaW50KSB7XG4gICAgICAgIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoJ3R1czogdW5hYmxlIHRvIGNyZWF0ZSB1cGxvYWQgYmVjYXVzZSBubyBlbmRwb2ludCBpcyBwcm92aWRlZCcpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHJlcSA9IHRoaXMuX29wZW5SZXF1ZXN0KCdQT1NUJywgdGhpcy5vcHRpb25zLmVuZHBvaW50KTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkTGVuZ3RoRGVmZXJyZWQpIHtcbiAgICAgICAgcmVxLnNldEhlYWRlcignVXBsb2FkLURlZmVyLUxlbmd0aCcsICcxJyk7XG4gICAgICAgIHRoaXMuX2RlZmVycmVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcS5zZXRIZWFkZXIoJ1VwbG9hZC1MZW5ndGgnLCBcIlwiLmNvbmNhdCh0aGlzLl9zaXplKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBtZXRhZGF0YSBpZiB2YWx1ZXMgaGF2ZSBiZWVuIGFkZGVkXG4gICAgICB2YXIgbWV0YWRhdGEgPSBlbmNvZGVNZXRhZGF0YSh0aGlzLm9wdGlvbnMubWV0YWRhdGEpO1xuICAgICAgaWYgKG1ldGFkYXRhICE9PSAnJykge1xuICAgICAgICByZXEuc2V0SGVhZGVyKCdVcGxvYWQtTWV0YWRhdGEnLCBtZXRhZGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvbWlzZTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkRGF0YUR1cmluZ0NyZWF0aW9uICYmICF0aGlzLm9wdGlvbnMudXBsb2FkTGVuZ3RoRGVmZXJyZWQpIHtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgICAgICAgcHJvbWlzZSA9IHRoaXMuX2FkZENodW5rVG9SZXF1ZXN0KHJlcSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByb3RvY29sID09PSBQUk9UT0NPTF9JRVRGX0RSQUZUXzAzIHx8IHRoaXMub3B0aW9ucy5wcm90b2NvbCA9PT0gUFJPVE9DT0xfSUVURl9EUkFGVF8wNSkge1xuICAgICAgICAgIHJlcS5zZXRIZWFkZXIoJ1VwbG9hZC1Db21wbGV0ZScsICc/MCcpO1xuICAgICAgICB9XG4gICAgICAgIHByb21pc2UgPSB0aGlzLl9zZW5kUmVxdWVzdChyZXEsIG51bGwpO1xuICAgICAgfVxuICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgaWYgKCFpblN0YXR1c0NhdGVnb3J5KHJlcy5nZXRTdGF0dXMoKSwgMjAwKSkge1xuICAgICAgICAgIF90aGlzNi5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogdW5leHBlY3RlZCByZXNwb25zZSB3aGlsZSBjcmVhdGluZyB1cGxvYWQnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzLmdldEhlYWRlcignTG9jYXRpb24nKTtcbiAgICAgICAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICAgICAgICBfdGhpczYuX2VtaXRIdHRwRXJyb3IocmVxLCByZXMsICd0dXM6IGludmFsaWQgb3IgbWlzc2luZyBMb2NhdGlvbiBoZWFkZXInKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM2LnVybCA9IHJlc29sdmVVcmwoX3RoaXM2Lm9wdGlvbnMuZW5kcG9pbnQsIGxvY2F0aW9uKTtcbiAgICAgICAgKDAsIF9sb2dnZXIubG9nKShcIkNyZWF0ZWQgdXBsb2FkIGF0IFwiLmNvbmNhdChfdGhpczYudXJsKSk7XG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXM2Lm9wdGlvbnMub25VcGxvYWRVcmxBdmFpbGFibGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBfdGhpczYub3B0aW9ucy5vblVwbG9hZFVybEF2YWlsYWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczYuX3NpemUgPT09IDApIHtcbiAgICAgICAgICAvLyBOb3RoaW5nIHRvIHVwbG9hZCBhbmQgZmlsZSB3YXMgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWRcbiAgICAgICAgICBfdGhpczYuX2VtaXRTdWNjZXNzKHJlcyk7XG4gICAgICAgICAgX3RoaXM2Ll9zb3VyY2UuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM2Ll9zYXZlVXBsb2FkSW5VcmxTdG9yYWdlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzNi5vcHRpb25zLnVwbG9hZERhdGFEdXJpbmdDcmVhdGlvbikge1xuICAgICAgICAgICAgX3RoaXM2Ll9oYW5kbGVVcGxvYWRSZXNwb25zZShyZXEsIHJlcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzNi5fb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIF90aGlzNi5fcGVyZm9ybVVwbG9hZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgX3RoaXM2Ll9lbWl0SHR0cEVycm9yKHJlcSwgbnVsbCwgJ3R1czogZmFpbGVkIHRvIGNyZWF0ZSB1cGxvYWQnLCBlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBUcnkgdG8gcmVzdW1lIGFuIGV4aXN0aW5nIHVwbG9hZC4gRmlyc3QgYSBIRUFEIHJlcXVlc3Qgd2lsbCBiZSBzZW50XG4gICAgICogdG8gcmV0cmlldmUgdGhlIG9mZnNldC4gSWYgdGhlIHJlcXVlc3QgZmFpbHMgYSBuZXcgdXBsb2FkIHdpbGwgYmVcbiAgICAgKiBjcmVhdGVkLiBJbiB0aGUgY2FzZSBvZiBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2UgdGhlIGZpbGUgd2lsbCBiZSB1cGxvYWRlZC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9yZXN1bWVVcGxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc3VtZVVwbG9hZCgpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuICAgICAgdmFyIHJlcSA9IHRoaXMuX29wZW5SZXF1ZXN0KCdIRUFEJywgdGhpcy51cmwpO1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLl9zZW5kUmVxdWVzdChyZXEsIG51bGwpO1xuICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgdmFyIHN0YXR1cyA9IHJlcy5nZXRTdGF0dXMoKTtcbiAgICAgICAgaWYgKCFpblN0YXR1c0NhdGVnb3J5KHN0YXR1cywgMjAwKSkge1xuICAgICAgICAgIC8vIElmIHRoZSB1cGxvYWQgaXMgbG9ja2VkIChpbmRpY2F0ZWQgYnkgdGhlIDQyMyBMb2NrZWQgc3RhdHVzIGNvZGUpLCB3ZVxuICAgICAgICAgIC8vIGVtaXQgYW4gZXJyb3IgaW5zdGVhZCBvZiBkaXJlY3RseSBzdGFydGluZyBhIG5ldyB1cGxvYWQuIFRoaXMgd2F5IHRoZVxuICAgICAgICAgIC8vIHJldHJ5IGxvZ2ljIGNhbiBjYXRjaCB0aGUgZXJyb3IgYW5kIHdpbGwgcmV0cnkgdGhlIHVwbG9hZC4gQW4gdXBsb2FkXG4gICAgICAgICAgLy8gaXMgdXN1YWxseSBsb2NrZWQgZm9yIGEgc2hvcnQgcGVyaW9kIG9mIHRpbWUgYW5kIHdpbGwgYmUgYXZhaWxhYmxlXG4gICAgICAgICAgLy8gYWZ0ZXJ3YXJkcy5cbiAgICAgICAgICBpZiAoc3RhdHVzID09PSA0MjMpIHtcbiAgICAgICAgICAgIF90aGlzNy5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogdXBsb2FkIGlzIGN1cnJlbnRseSBsb2NrZWQ7IHJldHJ5IGxhdGVyJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpblN0YXR1c0NhdGVnb3J5KHN0YXR1cywgNDAwKSkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHN0b3JlZCBmaW5nZXJwcmludCBhbmQgY29ycmVzcG9uZGluZyBlbmRwb2ludCxcbiAgICAgICAgICAgIC8vIG9uIGNsaWVudCBlcnJvcnMgc2luY2UgdGhlIGZpbGUgY2FuIG5vdCBiZSBmb3VuZFxuICAgICAgICAgICAgX3RoaXM3Ll9yZW1vdmVGcm9tVXJsU3RvcmFnZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIV90aGlzNy5vcHRpb25zLmVuZHBvaW50KSB7XG4gICAgICAgICAgICAvLyBEb24ndCBhdHRlbXB0IHRvIGNyZWF0ZSBhIG5ldyB1cGxvYWQgaWYgbm8gZW5kcG9pbnQgaXMgcHJvdmlkZWQuXG4gICAgICAgICAgICBfdGhpczcuX2VtaXRIdHRwRXJyb3IocmVxLCByZXMsICd0dXM6IHVuYWJsZSB0byByZXN1bWUgdXBsb2FkIChuZXcgdXBsb2FkIGNhbm5vdCBiZSBjcmVhdGVkIHdpdGhvdXQgYW4gZW5kcG9pbnQpJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVHJ5IHRvIGNyZWF0ZSBhIG5ldyB1cGxvYWRcbiAgICAgICAgICBfdGhpczcudXJsID0gbnVsbDtcbiAgICAgICAgICBfdGhpczcuX2NyZWF0ZVVwbG9hZCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2Zmc2V0ID0gTnVtYmVyLnBhcnNlSW50KHJlcy5nZXRIZWFkZXIoJ1VwbG9hZC1PZmZzZXQnKSwgMTApO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG9mZnNldCkpIHtcbiAgICAgICAgICBfdGhpczcuX2VtaXRIdHRwRXJyb3IocmVxLCByZXMsICd0dXM6IGludmFsaWQgb3IgbWlzc2luZyBvZmZzZXQgdmFsdWUnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlZmVyTGVuZ3RoID0gcGFyc2VJbnQoeGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiVXBsb2FkLURlZmVyLUxlbmd0aFwiKSwgMTApO1xuICAgICAgICBfdGhpczcuX2RlZmVycmVkID0gZGVmZXJMZW5ndGggPT09IDE7XG4gICAgICAgIHZhciBsZW5ndGggPSBOdW1iZXIucGFyc2VJbnQocmVzLmdldEhlYWRlcignVXBsb2FkLUxlbmd0aCcpLCAxMCk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4obGVuZ3RoKSAmJiAhX3RoaXM3Ll9kZWZlcnJlZCAmJiAhX3RoaXM3Lm9wdGlvbnMudXBsb2FkTGVuZ3RoRGVmZXJyZWQgJiYgX3RoaXM3Lm9wdGlvbnMucHJvdG9jb2wgPT09IFBST1RPQ09MX1RVU19WMSkge1xuICAgICAgICAgIF90aGlzNy5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogaW52YWxpZCBvciBtaXNzaW5nIGxlbmd0aCB2YWx1ZScpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIF90aGlzNy5vcHRpb25zLm9uVXBsb2FkVXJsQXZhaWxhYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXM3Lm9wdGlvbnMub25VcGxvYWRVcmxBdmFpbGFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczcuX3NhdmVVcGxvYWRJblVybFN0b3JhZ2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBVcGxvYWQgaGFzIGFscmVhZHkgYmVlbiBjb21wbGV0ZWQgYW5kIHdlIGRvIG5vdCBuZWVkIHRvIHNlbmQgYWRkaXRpb25hbFxuICAgICAgICAgIC8vIGRhdGEgdG8gdGhlIHNlcnZlclxuICAgICAgICAgIGlmIChvZmZzZXQgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgX3RoaXM3Ll9lbWl0UHJvZ3Jlc3MobGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgICAgX3RoaXM3Ll9lbWl0U3VjY2VzcyhyZXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczcuX29mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICBfdGhpczcuX3BlcmZvcm1VcGxvYWQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgX3RoaXM3Ll9lbWl0SHR0cEVycm9yKHJlcSwgbnVsbCwgJ3R1czogZmFpbGVkIHRvIHJlc3VtZSB1cGxvYWQnLCBlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnQgdXBsb2FkaW5nIHRoZSBmaWxlIHVzaW5nIFBBVENIIHJlcXVlc3RzLiBUaGUgZmlsZSB3aWxsIGJlIGRpdmlkZWRcbiAgICAgKiBpbnRvIGNodW5rcyBhcyBzcGVjaWZpZWQgaW4gdGhlIGNodW5rU2l6ZSBvcHRpb24uIER1cmluZyB0aGUgdXBsb2FkXG4gICAgICogdGhlIG9uUHJvZ3Jlc3MgZXZlbnQgaGFuZGxlciBtYXkgYmUgaW52b2tlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9wZXJmb3JtVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wZXJmb3JtVXBsb2FkKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG4gICAgICAvLyBJZiB0aGUgdXBsb2FkIGhhcyBiZWVuIGFib3J0ZWQsIHdlIHdpbGwgbm90IHNlbmQgdGhlIG5leHQgUEFUQ0ggcmVxdWVzdC5cbiAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGlmIHRoZSBhYm9ydCBtZXRob2Qgd2FzIGNhbGxlZCBkdXJpbmcgYSBjYWxsYmFjaywgc3VjaFxuICAgICAgLy8gYXMgb25DaHVua0NvbXBsZXRlIG9yIG9uUHJvZ3Jlc3MuXG4gICAgICBpZiAodGhpcy5fYWJvcnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcmVxO1xuXG4gICAgICAvLyBTb21lIGJyb3dzZXIgYW5kIHNlcnZlcnMgbWF5IG5vdCBzdXBwb3J0IHRoZSBQQVRDSCBtZXRob2QuIEZvciB0aG9zZVxuICAgICAgLy8gY2FzZXMsIHlvdSBjYW4gdGVsbCB0dXMtanMtY2xpZW50IHRvIHVzZSBhIFBPU1QgcmVxdWVzdCB3aXRoIHRoZVxuICAgICAgLy8gWC1IVFRQLU1ldGhvZC1PdmVycmlkZSBoZWFkZXIgZm9yIHNpbXVsYXRpbmcgYSBQQVRDSCByZXF1ZXN0LlxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVycmlkZVBhdGNoTWV0aG9kKSB7XG4gICAgICAgIHJlcSA9IHRoaXMuX29wZW5SZXF1ZXN0KCdQT1NUJywgdGhpcy51cmwpO1xuICAgICAgICByZXEuc2V0SGVhZGVyKCdYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJywgJ1BBVENIJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXEgPSB0aGlzLl9vcGVuUmVxdWVzdCgnUEFUQ0gnLCB0aGlzLnVybCk7XG4gICAgICB9XG4gICAgICByZXEuc2V0SGVhZGVyKCdVcGxvYWQtT2Zmc2V0JywgXCJcIi5jb25jYXQodGhpcy5fb2Zmc2V0KSk7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX2FkZENodW5rVG9SZXF1ZXN0KHJlcSk7XG4gICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBpZiAoIWluU3RhdHVzQ2F0ZWdvcnkocmVzLmdldFN0YXR1cygpLCAyMDApKSB7XG4gICAgICAgICAgX3RoaXM4Ll9lbWl0SHR0cEVycm9yKHJlcSwgcmVzLCAndHVzOiB1bmV4cGVjdGVkIHJlc3BvbnNlIHdoaWxlIHVwbG9hZGluZyBjaHVuaycpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczguX2hhbmRsZVVwbG9hZFJlc3BvbnNlKHJlcSwgcmVzKTtcbiAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAvLyBEb24ndCBlbWl0IGFuIGVycm9yIGlmIHRoZSB1cGxvYWQgd2FzIGFib3J0ZWQgbWFudWFsbHlcbiAgICAgICAgaWYgKF90aGlzOC5fYWJvcnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczguX2VtaXRIdHRwRXJyb3IocmVxLCBudWxsLCBcInR1czogZmFpbGVkIHRvIHVwbG9hZCBjaHVuayBhdCBvZmZzZXQgXCIuY29uY2F0KF90aGlzOC5fb2Zmc2V0KSwgZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIF9hZGRDaHVua3RvUmVxdWVzdCByZWFkcyBhIGNodW5rIGZyb20gdGhlIHNvdXJjZSBhbmQgc2VuZHMgaXQgdXNpbmcgdGhlXG4gICAgICogc3VwcGxpZWQgcmVxdWVzdCBvYmplY3QuIEl0IHdpbGwgbm90IGhhbmRsZSB0aGUgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfYWRkQ2h1bmtUb1JlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZENodW5rVG9SZXF1ZXN0KHJlcSkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG4gICAgICB2YXIgc3RhcnQgPSB0aGlzLl9vZmZzZXQ7XG4gICAgICB2YXIgZW5kID0gdGhpcy5fb2Zmc2V0ICsgdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgICAgIHJlcS5zZXRQcm9ncmVzc0hhbmRsZXIoZnVuY3Rpb24gKGJ5dGVzU2VudCkge1xuICAgICAgICBfdGhpczkuX2VtaXRQcm9ncmVzcyhzdGFydCArIGJ5dGVzU2VudCwgX3RoaXM5Ll9zaXplKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcm90b2NvbCA9PT0gUFJPVE9DT0xfVFVTX1YxKSB7XG4gICAgICAgIHJlcS5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5wcm90b2NvbCA9PT0gUFJPVE9DT0xfSUVURl9EUkFGVF8wNSkge1xuICAgICAgICByZXEuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vcGFydGlhbC11cGxvYWQnKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHNwZWNpZmllZCBjaHVua1NpemUgbWF5IGJlIEluZmluaXR5IG9yIHRoZSBjYWxjbHVhdGVkIGVuZCBwb3NpdGlvblxuICAgICAgLy8gbWF5IGV4Y2VlZCB0aGUgZmlsZSdzIHNpemUuIEluIGJvdGggY2FzZXMsIHdlIGxpbWl0IHRoZSBlbmQgcG9zaXRpb24gdG9cbiAgICAgIC8vIHRoZSBpbnB1dCdzIHRvdGFsIHNpemUgZm9yIHNpbXBsZXIgY2FsY3VsYXRpb25zIGFuZCBjb3JyZWN0bmVzcy5cbiAgICAgIGlmICgoZW5kID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgfHwgZW5kID4gdGhpcy5fc2l6ZSkgJiYgIXRoaXMub3B0aW9ucy51cGxvYWRMZW5ndGhEZWZlcnJlZCkge1xuICAgICAgICBlbmQgPSB0aGlzLl9zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZS5zbGljZShzdGFydCwgZW5kKS50aGVuKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMi52YWx1ZSxcbiAgICAgICAgICBkb25lID0gX3JlZjIuZG9uZTtcbiAgICAgICAgdmFyIHZhbHVlU2l6ZSA9IHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDAgJiYgdmFsdWUuc2l6ZSA/IHZhbHVlLnNpemUgOiAwO1xuXG4gICAgICAgIC8vIElmIHRoZSB1cGxvYWQgbGVuZ3RoIGlzIGRlZmVycmVkLCB0aGUgdXBsb2FkIHNpemUgd2FzIG5vdCBzcGVjaWZpZWQgZHVyaW5nXG4gICAgICAgIC8vIHVwbG9hZCBjcmVhdGlvbi4gU28sIGlmIHRoZSBmaWxlIHJlYWRlciBpcyBkb25lIHJlYWRpbmcsIHdlIGtub3cgdGhlIHRvdGFsXG4gICAgICAgIC8vIHVwbG9hZCBzaXplIGFuZCBjYW4gdGVsbCB0aGUgdHVzIHNlcnZlci5cbiAgICAgICAgaWYgKF90aGlzOS5fZGVmZXJyZWQgJiYgKCFfdGhpczkub3B0aW9ucy51cGxvYWRMZW5ndGhEZWZlcnJlZCB8fCBkb25lKSkge1xuICAgICAgICAgIF90aGlzOS5fc2l6ZSA9IF90aGlzOS5fb2Zmc2V0ICsgdmFsdWVTaXplO1xuICAgICAgICAgIHJlcS5zZXRIZWFkZXIoXCJVcGxvYWQtTGVuZ3RoXCIsIFwiXCIuY29uY2F0KF90aGlzOS5fc2l6ZSkpO1xuICAgICAgICAgIF90aGlzOS5fZGVmZXJyZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBzcGVjaWZpZWQgdXBsb2FkU2l6ZSBtaWdodCBub3QgbWF0Y2ggdGhlIGFjdHVhbCBhbW91bnQgb2YgZGF0YSB0aGF0IGEgc291cmNlXG4gICAgICAgIC8vIHByb3ZpZGVzLiBJbiB0aGVzZSBjYXNlcywgd2UgY2Fubm90IHN1Y2Nlc3NmdWxseSBjb21wbGV0ZSB0aGUgdXBsb2FkLCBzbyB3ZVxuICAgICAgICAvLyByYXRoZXIgZXJyb3Igb3V0IGFuZCBsZXQgdGhlIHVzZXIga25vdy4gSWYgbm90LCB0dXMtanMtY2xpZW50IHdpbGwgYmUgc3R1Y2tcbiAgICAgICAgLy8gaW4gYSBsb29wIG9mIHJlcGVhdGluZyBlbXB0eSBQQVRDSCByZXF1ZXN0cy5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vY29tbXVuaXR5LnRyYW5zbG9hZGl0LmNvbS90L2hvdy10by1hYm9ydC1oYW5naW5nLWNvbXBhbmlvbi11cGxvYWRzLzE2NDg4LzEzXG4gICAgICAgIHZhciBuZXdTaXplID0gX3RoaXM5Ll9vZmZzZXQgKyB2YWx1ZVNpemU7XG4gICAgICAgIGlmICghX3RoaXM5Lm9wdGlvbnMudXBsb2FkTGVuZ3RoRGVmZXJyZWQgJiYgZG9uZSAmJiBuZXdTaXplICE9PSBfdGhpczkuX3NpemUpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwidXBsb2FkIHdhcyBjb25maWd1cmVkIHdpdGggYSBzaXplIG9mIFwiLmNvbmNhdChfdGhpczkuX3NpemUsIFwiIGJ5dGVzLCBidXQgdGhlIHNvdXJjZSBpcyBkb25lIGFmdGVyIFwiKS5jb25jYXQobmV3U2l6ZSwgXCIgYnl0ZXNcIikpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM5Ll9zZW5kUmVxdWVzdChyZXEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpczkub3B0aW9ucy5wcm90b2NvbCA9PT0gUFJPVE9DT0xfSUVURl9EUkFGVF8wMyB8fCBfdGhpczkub3B0aW9ucy5wcm90b2NvbCA9PT0gUFJPVE9DT0xfSUVURl9EUkFGVF8wNSkge1xuICAgICAgICAgIHJlcS5zZXRIZWFkZXIoJ1VwbG9hZC1Db21wbGV0ZScsIGRvbmUgPyAnPzEnIDogJz8wJyk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM5Ll9lbWl0UHJvZ3Jlc3MoX3RoaXM5Ll9vZmZzZXQsIF90aGlzOS5fc2l6ZSk7XG4gICAgICAgIHJldHVybiBfdGhpczkuX3NlbmRSZXF1ZXN0KHJlcSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogX2hhbmRsZVVwbG9hZFJlc3BvbnNlIGlzIHVzZWQgYnkgcmVxdWVzdHMgdGhhdCBoYXZlbiBiZWVuIHNlbnQgdXNpbmcgX2FkZENodW5rVG9SZXF1ZXN0XG4gICAgICogYW5kIGFscmVhZHkgaGF2ZSByZWNlaXZlZCBhIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZVVwbG9hZFJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVVcGxvYWRSZXNwb25zZShyZXEsIHJlcykge1xuICAgICAgdmFyIG9mZnNldCA9IE51bWJlci5wYXJzZUludChyZXMuZ2V0SGVhZGVyKCdVcGxvYWQtT2Zmc2V0JyksIDEwKTtcbiAgICAgIGlmIChOdW1iZXIuaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgICB0aGlzLl9lbWl0SHR0cEVycm9yKHJlcSwgcmVzLCAndHVzOiBpbnZhbGlkIG9yIG1pc3Npbmcgb2Zmc2V0IHZhbHVlJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2VtaXRQcm9ncmVzcyhvZmZzZXQsIHRoaXMuX3NpemUpO1xuICAgICAgdGhpcy5fZW1pdENodW5rQ29tcGxldGUob2Zmc2V0IC0gdGhpcy5fb2Zmc2V0LCBvZmZzZXQsIHRoaXMuX3NpemUpO1xuICAgICAgdGhpcy5fb2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgaWYgKG9mZnNldCA9PT0gdGhpcy5fc2l6ZSkge1xuICAgICAgICAvLyBZYXksIGZpbmFsbHkgZG9uZSA6KVxuICAgICAgICB0aGlzLl9lbWl0U3VjY2VzcyhyZXMpO1xuICAgICAgICB0aGlzLl9zb3VyY2UuY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fcGVyZm9ybVVwbG9hZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBIVFRQIHJlcXVlc3Qgb2JqZWN0IHdpdGggdGhlIGdpdmVuIG1ldGhvZCBhbmQgVVJMLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX29wZW5SZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vcGVuUmVxdWVzdChtZXRob2QsIHVybCkge1xuICAgICAgdmFyIHJlcSA9IG9wZW5SZXF1ZXN0KG1ldGhvZCwgdXJsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5fcmVxID0gcmVxO1xuICAgICAgcmV0dXJuIHJlcTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGVudHJ5IGluIHRoZSBVUkwgc3RvcmFnZSwgaWYgaXQgaGFzIGJlZW4gc2F2ZWQgYmVmb3JlLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbW92ZUZyb21VcmxTdG9yYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmVGcm9tVXJsU3RvcmFnZSgpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcbiAgICAgIGlmICghdGhpcy5fdXJsU3RvcmFnZUtleSkgcmV0dXJuO1xuICAgICAgdGhpcy5fdXJsU3RvcmFnZS5yZW1vdmVVcGxvYWQodGhpcy5fdXJsU3RvcmFnZUtleSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIF90aGlzMTAuX2VtaXRFcnJvcihlcnIpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl91cmxTdG9yYWdlS2V5ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIHVwbG9hZCBVUkwgdG8gdGhlIFVSTCBzdG9yYWdlLCBpZiBwb3NzaWJsZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIl9zYXZlVXBsb2FkSW5VcmxTdG9yYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zYXZlVXBsb2FkSW5VcmxTdG9yYWdlKCkge1xuICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuICAgICAgLy8gV2UgZG8gbm90IHN0b3JlIHRoZSB1cGxvYWQgVVJMXG4gICAgICAvLyAtIGlmIGl0IHdhcyBkaXNhYmxlZCBpbiB0aGUgb3B0aW9uLCBvclxuICAgICAgLy8gLSBpZiBubyBmaW5nZXJwcmludCB3YXMgY2FsY3VsYXRlZCBmb3IgdGhlIGlucHV0IChpLmUuIGEgc3RyZWFtKSwgb3JcbiAgICAgIC8vIC0gaWYgdGhlIFVSTCBpcyBhbHJlYWR5IHN0b3JlZCAoaS5lLiBrZXkgaXMgc2V0IGFscmVhZCkuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zdG9yZUZpbmdlcnByaW50Rm9yUmVzdW1pbmcgfHwgIXRoaXMuX2ZpbmdlcnByaW50IHx8IHRoaXMuX3VybFN0b3JhZ2VLZXkgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHN0b3JlZFVwbG9hZCA9IHtcbiAgICAgICAgc2l6ZTogdGhpcy5fc2l6ZSxcbiAgICAgICAgbWV0YWRhdGE6IHRoaXMub3B0aW9ucy5tZXRhZGF0YSxcbiAgICAgICAgY3JlYXRpb25UaW1lOiBuZXcgRGF0ZSgpLnRvU3RyaW5nKClcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5fcGFyYWxsZWxVcGxvYWRzKSB7XG4gICAgICAgIC8vIFNhdmUgbXVsdGlwbGUgVVJMcyBpZiB0aGUgcGFyYWxsZWxVcGxvYWRzIG9wdGlvbiBpcyB1c2VkIC4uLlxuICAgICAgICBzdG9yZWRVcGxvYWQucGFyYWxsZWxVcGxvYWRVcmxzID0gdGhpcy5fcGFyYWxsZWxVcGxvYWRVcmxzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gLi4uIG90aGVyd2lzZSB3ZSBqdXN0IHNhdmUgdGhlIG9uZSBhdmFpbGFibGUgVVJMLlxuICAgICAgICBzdG9yZWRVcGxvYWQudXBsb2FkVXJsID0gdGhpcy51cmw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fdXJsU3RvcmFnZS5hZGRVcGxvYWQodGhpcy5fZmluZ2VycHJpbnQsIHN0b3JlZFVwbG9hZCkudGhlbihmdW5jdGlvbiAodXJsU3RvcmFnZUtleSkge1xuICAgICAgICBfdGhpczExLl91cmxTdG9yYWdlS2V5ID0gdXJsU3RvcmFnZUtleTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgYSByZXF1ZXN0IHdpdGggdGhlIHByb3ZpZGVkIGJvZHkuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJfc2VuZFJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbmRSZXF1ZXN0KHJlcSkge1xuICAgICAgdmFyIGJvZHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG4gICAgICByZXR1cm4gc2VuZFJlcXVlc3QocmVxLCBib2R5LCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcInRlcm1pbmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0ZXJtaW5hdGUodXJsKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgcmVxID0gb3BlblJlcXVlc3QoJ0RFTEVURScsIHVybCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gc2VuZFJlcXVlc3QocmVxLCBudWxsLCBvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgLy8gQSAyMDQgcmVzcG9uc2UgaW5kaWNhdGVzIGEgc3VjY2Vzc2Z1bGwgcmVxdWVzdFxuICAgICAgICBpZiAocmVzLmdldFN0YXR1cygpID09PSAyMDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IF9lcnJvci5kZWZhdWx0KCd0dXM6IHVuZXhwZWN0ZWQgcmVzcG9uc2Ugd2hpbGUgdGVybWluYXRpbmcgdXBsb2FkJywgbnVsbCwgcmVxLCByZXMpO1xuICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghKGVyciBpbnN0YW5jZW9mIF9lcnJvci5kZWZhdWx0KSkge1xuICAgICAgICAgIGVyciA9IG5ldyBfZXJyb3IuZGVmYXVsdCgndHVzOiBmYWlsZWQgdG8gdGVybWluYXRlIHVwbG9hZCcsIGVyciwgcmVxLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNob3VsZFJldHJ5KGVyciwgMCwgb3B0aW9ucykpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnN0ZWFkIG9mIGtlZXBpbmcgdHJhY2sgb2YgdGhlIHJldHJ5IGF0dGVtcHRzLCB3ZSByZW1vdmUgdGhlIGZpcnN0IGVsZW1lbnQgZnJvbSB0aGUgZGVsYXlzXG4gICAgICAgIC8vIGFycmF5LiBJZiB0aGUgYXJyYXkgaXMgZW1wdHksIGFsbCByZXRyeSBhdHRlbXB0cyBhcmUgdXNlZCB1cCBhbmQgd2Ugd2lsbCBidWJibGUgdXAgdGhlIGVycm9yLlxuICAgICAgICAvLyBXZSByZWN1cnNpdmVseSBjYWxsIHRoZSB0ZXJtaW5hdGUgZnVuY3Rpb24gd2lsbCByZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSByZXRyeURlbGF5cyBhcnJheS5cbiAgICAgICAgdmFyIGRlbGF5ID0gb3B0aW9ucy5yZXRyeURlbGF5c1swXTtcbiAgICAgICAgdmFyIHJlbWFpbmluZ0RlbGF5cyA9IG9wdGlvbnMucmV0cnlEZWxheXMuc2xpY2UoMSk7XG4gICAgICAgIHZhciBuZXdPcHRpb25zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zKSwge30sIHtcbiAgICAgICAgICByZXRyeURlbGF5czogcmVtYWluaW5nRGVsYXlzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBCYXNlVXBsb2FkLnRlcm1pbmF0ZSh1cmwsIG5ld09wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xufSgpO1xuZnVuY3Rpb24gZW5jb2RlTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG1ldGFkYXRhKS5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLFxuICAgICAga2V5ID0gX3JlZjRbMF0sXG4gICAgICB2YWx1ZSA9IF9yZWY0WzFdO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXksIFwiIFwiKS5jb25jYXQoX2pzQmFzZS5CYXNlNjQuZW5jb2RlKFN0cmluZyh2YWx1ZSkpKTtcbiAgfSkuam9pbignLCcpO1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgZ2l2ZW4gc3RhdHVzIGlzIGluIHRoZSByYW5nZSBvZiB0aGUgZXhwZWN0ZWQgY2F0ZWdvcnkuXG4gKiBGb3IgZXhhbXBsZSwgb25seSBhIHN0YXR1cyBiZXR3ZWVuIDIwMCBhbmQgMjk5IHdpbGwgc2F0aXNmeSB0aGUgY2F0ZWdvcnkgMjAwLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpblN0YXR1c0NhdGVnb3J5KHN0YXR1cywgY2F0ZWdvcnkpIHtcbiAgcmV0dXJuIHN0YXR1cyA+PSBjYXRlZ29yeSAmJiBzdGF0dXMgPCBjYXRlZ29yeSArIDEwMDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgSFRUUCByZXF1ZXN0IHdpdGggdGhlIHNwZWNpZmllZCBtZXRob2QgYW5kIFVSTC5cbiAqIFRoZSBuZWNlc3NhcnkgaGVhZGVycyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBldmVyeSByZXF1ZXN0XG4gKiB3aWxsIGJlIGFkZGVkLCBpbmNsdWRpbmcgdGhlIHJlcXVlc3QgSUQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG9wZW5SZXF1ZXN0KG1ldGhvZCwgdXJsLCBvcHRpb25zKSB7XG4gIHZhciByZXEgPSBvcHRpb25zLmh0dHBTdGFjay5jcmVhdGVSZXF1ZXN0KG1ldGhvZCwgdXJsKTtcbiAgaWYgKG9wdGlvbnMucHJvdG9jb2wgPT09IFBST1RPQ09MX0lFVEZfRFJBRlRfMDMpIHtcbiAgICByZXEuc2V0SGVhZGVyKCdVcGxvYWQtRHJhZnQtSW50ZXJvcC1WZXJzaW9uJywgJzUnKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLnByb3RvY29sID09PSBQUk9UT0NPTF9JRVRGX0RSQUZUXzA1KSB7XG4gICAgcmVxLnNldEhlYWRlcignVXBsb2FkLURyYWZ0LUludGVyb3AtVmVyc2lvbicsICc2Jyk7XG4gIH0gZWxzZSB7XG4gICAgcmVxLnNldEhlYWRlcignVHVzLVJlc3VtYWJsZScsICcxLjAuMCcpO1xuICB9XG4gIHZhciBoZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuICBmb3IgKHZhciBfaTIgPSAwLCBfT2JqZWN0JGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhoZWFkZXJzKTsgX2kyIDwgX09iamVjdCRlbnRyaWVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgX09iamVjdCRlbnRyaWVzJF9pID0gX3NsaWNlZFRvQXJyYXkoX09iamVjdCRlbnRyaWVzW19pMl0sIDIpLFxuICAgICAgbmFtZSA9IF9PYmplY3QkZW50cmllcyRfaVswXSxcbiAgICAgIHZhbHVlID0gX09iamVjdCRlbnRyaWVzJF9pWzFdO1xuICAgIHJlcS5zZXRIZWFkZXIobmFtZSwgdmFsdWUpO1xuICB9XG4gIGlmIChvcHRpb25zLmFkZFJlcXVlc3RJZCkge1xuICAgIHZhciByZXF1ZXN0SWQgPSAoMCwgX3V1aWQuZGVmYXVsdCkoKTtcbiAgICByZXEuc2V0SGVhZGVyKCdYLVJlcXVlc3QtSUQnLCByZXF1ZXN0SWQpO1xuICB9XG4gIHJldHVybiByZXE7XG59XG5cbi8qKlxuICogU2VuZCBhIHJlcXVlc3Qgd2l0aCB0aGUgcHJvdmlkZWQgYm9keSB3aGlsZSBpbnZva2luZyB0aGUgb25CZWZvcmVSZXF1ZXN0XG4gKiBhbmQgb25BZnRlclJlc3BvbnNlIGNhbGxiYWNrcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2VuZFJlcXVlc3QoX3gsIF94MiwgX3gzKSB7XG4gIHJldHVybiBfc2VuZFJlcXVlc3QyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBicm93c2VyIHJ1bm5pbmcgdGhpcyBjb2RlIGhhcyBpbnRlcm5ldCBhY2Nlc3MuXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlIGluIHRoZSBub2RlLmpzIGVudmlyb25tZW50XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9zZW5kUmVxdWVzdDIoKSB7XG4gIF9zZW5kUmVxdWVzdDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVxLCBib2R5LCBvcHRpb25zKSB7XG4gICAgdmFyIHJlcztcbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBpZiAoISh0eXBlb2Ygb3B0aW9ucy5vbkJlZm9yZVJlcXVlc3QgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5vbkJlZm9yZVJlcXVlc3QocmVxKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1O1xuICAgICAgICAgIHJldHVybiByZXEuc2VuZChib2R5KTtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgaWYgKCEodHlwZW9mIG9wdGlvbnMub25BZnRlclJlc3BvbnNlID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnMub25BZnRlclJlc3BvbnNlKHJlcSwgcmVzKTtcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgcmVzKTtcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZSk7XG4gIH0pKTtcbiAgcmV0dXJuIF9zZW5kUmVxdWVzdDIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIGlzT25saW5lKCkge1xuICB2YXIgb25saW5lID0gdHJ1ZTtcbiAgLy8gTm90ZTogV2UgZG9uJ3QgcmVmZXJlbmNlIGB3aW5kb3dgIGhlcmUgYmVjYXVzZSB0aGUgbmF2aWdhdG9yIG9iamVjdCBhbHNvIGV4aXN0c1xuICAvLyBpbiBhIFdlYiBXb3JrZXIncyBjb250ZXh0LlxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLm9uTGluZSA9PT0gZmFsc2UpIHtcbiAgICBvbmxpbmUgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gb25saW5lO1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCBpdCBpcyBvayB0byByZXRyeSBhIHJlcXVlc3QuXG4gKiBAcGFyYW0ge0Vycm9yfERldGFpbGVkRXJyb3J9IGVyciB0aGUgZXJyb3IgcmV0dXJuZWQgZnJvbSB0aGUgbGFzdCByZXF1ZXN0XG4gKiBAcGFyYW0ge251bWJlcn0gcmV0cnlBdHRlbXB0IHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIHJlcXVlc3QgaGFzIGFscmVhZHkgYmVlbiByZXRyaWVkXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyB0dXMgVXBsb2FkIG9wdGlvbnNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2hvdWxkUmV0cnkoZXJyLCByZXRyeUF0dGVtcHQsIG9wdGlvbnMpIHtcbiAgLy8gV2Ugb25seSBhdHRlbXB0IGEgcmV0cnkgaWZcbiAgLy8gLSByZXRyeURlbGF5cyBvcHRpb24gaXMgc2V0XG4gIC8vIC0gd2UgZGlkbid0IGV4Y2VlZCB0aGUgbWF4aXVtIG51bWJlciBvZiByZXRyaWVzLCB5ZXQsIGFuZFxuICAvLyAtIHRoaXMgZXJyb3Igd2FzIGNhdXNlZCBieSBhIHJlcXVlc3Qgb3IgaXQncyByZXNwb25zZSBhbmRcbiAgLy8gLSB0aGUgZXJyb3IgaXMgc2VydmVyIGVycm9yIChpLmUuIG5vdCBhIHN0YXR1cyA0eHggZXhjZXB0IGEgNDA5IG9yIDQyMykgb3JcbiAgLy8gYSBvblNob3VsZFJldHJ5IGlzIHNwZWNpZmllZCBhbmQgcmV0dXJucyB0cnVlXG4gIC8vIC0gdGhlIGJyb3dzZXIgZG9lcyBub3QgaW5kaWNhdGUgdGhhdCB3ZSBhcmUgb2ZmbGluZVxuICBpZiAob3B0aW9ucy5yZXRyeURlbGF5cyA9PSBudWxsIHx8IHJldHJ5QXR0ZW1wdCA+PSBvcHRpb25zLnJldHJ5RGVsYXlzLmxlbmd0aCB8fCBlcnIub3JpZ2luYWxSZXF1ZXN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMub25TaG91bGRSZXRyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvcHRpb25zLm9uU2hvdWxkUmV0cnkoZXJyLCByZXRyeUF0dGVtcHQsIG9wdGlvbnMpO1xuICB9XG4gIHJldHVybiBkZWZhdWx0T25TaG91bGRSZXRyeShlcnIpO1xufVxuXG4vKipcbiAqIGRldGVybWluZXMgaWYgdGhlIHJlcXVlc3Qgc2hvdWxkIGJlIHJldHJpZWQuIFdpbGwgb25seSByZXRyeSBpZiBub3QgYSBzdGF0dXMgNHh4IGV4Y2VwdCBhIDQwOSBvciA0MjNcbiAqIEBwYXJhbSB7RGV0YWlsZWRFcnJvcn0gZXJyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZGVmYXVsdE9uU2hvdWxkUmV0cnkoZXJyKSB7XG4gIHZhciBzdGF0dXMgPSBlcnIub3JpZ2luYWxSZXNwb25zZSA/IGVyci5vcmlnaW5hbFJlc3BvbnNlLmdldFN0YXR1cygpIDogMDtcbiAgcmV0dXJuICghaW5TdGF0dXNDYXRlZ29yeShzdGF0dXMsIDQwMCkgfHwgc3RhdHVzID09PSA0MDkgfHwgc3RhdHVzID09PSA0MjMpICYmIGlzT25saW5lKCk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBhIHJlbGF0aXZlIGxpbmsgZ2l2ZW4gdGhlIG9yaWdpbiBhcyBzb3VyY2UuIEZvciBleGFtcGxlLFxuICogaWYgYSBIVFRQIHJlcXVlc3QgdG8gaHR0cDovL2V4YW1wbGUuY29tL2ZpbGVzLyByZXR1cm5zIGEgTG9jYXRpb25cbiAqIGhlYWRlciB3aXRoIHRoZSB2YWx1ZSAvdXBsb2FkL2FiYywgdGhlIHJlc29sdmVkIFVSTCB3aWxsIGJlOlxuICogaHR0cDovL2V4YW1wbGUuY29tL3VwbG9hZC9hYmNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVVybChvcmlnaW4sIGxpbmspIHtcbiAgcmV0dXJuIG5ldyBfdXJsUGFyc2UuZGVmYXVsdChsaW5rLCBvcmlnaW4pLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBmb3IgdGhlIHBhcnRzIGlmIGFuIHVwbG9hZFxuICogaXMgc3BsaXQgaW50byBtdWx0aXBsZSBwYXJhbGxlbCByZXF1ZXN0cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdG90YWxTaXplIFRoZSBieXRlIHNpemUgb2YgdGhlIHVwbG9hZCwgd2hpY2ggd2lsbCBiZSBzcGxpdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJ0Q291bnQgVGhlIG51bWJlciBpbiBob3cgbWFueSBwYXJ0cyB0aGUgdXBsb2FkIHdpbGwgYmUgc3BsaXQuXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzcGxpdFNpemVJbnRvUGFydHModG90YWxTaXplLCBwYXJ0Q291bnQpIHtcbiAgdmFyIHBhcnRTaXplID0gTWF0aC5mbG9vcih0b3RhbFNpemUgLyBwYXJ0Q291bnQpO1xuICB2YXIgcGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0Q291bnQ7IGkrKykge1xuICAgIHBhcnRzLnB1c2goe1xuICAgICAgc3RhcnQ6IHBhcnRTaXplICogaSxcbiAgICAgIGVuZDogcGFydFNpemUgKiAoaSArIDEpXG4gICAgfSk7XG4gIH1cbiAgcGFydHNbcGFydENvdW50IC0gMV0uZW5kID0gdG90YWxTaXplO1xuICByZXR1cm4gcGFydHM7XG59XG5CYXNlVXBsb2FkLmRlZmF1bHRPcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSBCYXNlVXBsb2FkOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXVpZDtcbi8qKlxuICogR2VuZXJhdGUgYSBVVUlEIHY0IGJhc2VkIG9uIHJhbmRvbSBudW1iZXJzLiBXZSBpbnRlbnRpb2FubGx5IHVzZSB0aGUgbGVzc1xuICogc2VjdXJlIE1hdGgucmFuZG9tIGZ1bmN0aW9uIGhlcmUgc2luY2UgdGhlIG1vcmUgc2VjdXJlIGNyeXB0by5nZXRSYW5kb21OdW1iZXJzXG4gKiBpcyBub3QgYXZhaWxhYmxlIG9uIGFsbCBwbGF0Zm9ybXMuXG4gKiBUaGlzIGlzIG5vdCBhIHByb2JsZW0gZm9yIHVzIHNpbmNlIHdlIHVzZSB0aGUgVVVJRCBvbmx5IGZvciBnZW5lcmF0aW5nIGFcbiAqIHJlcXVlc3QgSUQsIHNvIHdlIGNhbiBjb3JyZWxhdGUgc2VydmVyIGxvZ3MgdG8gY2xpZW50IGVycm9ycy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHRha2VuIGZyb20gZm9sbG93aW5nIHNpdGU6XG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvY3JlYXRlLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGUgVVVJRFxuICovXG5mdW5jdGlvbiB1dWlkKCkge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICB2YXIgdiA9IGMgPT09ICd4JyA/IHIgOiByICYgMHgzIHwgMHg4O1xuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsJyk7XG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xudmFyIHBhcnNlUHJvdG9jb2wgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wnKTtcbnZhciBwbGF0Zm9ybSA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgd2l0aFhTUkZUb2tlbiA9IGNvbmZpZy53aXRoWFNSRlRva2VuO1xuICAgIHZhciBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSAmJiB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzLmlzRnVuY3Rpb24od2l0aFhTUkZUb2tlbikgJiYgKHdpdGhYU1JGVG9rZW4gPSB3aXRoWFNSRlRva2VuKGNvbmZpZykpO1xuICAgICAgaWYgKHdpdGhYU1JGVG9rZW4gfHwgKHdpdGhYU1JGVG9rZW4gIT09IGZhbHNlICYmIGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpKSB7XG4gICAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgICB2YXIgeHNyZlZhbHVlID0gY29uZmlnLnhzcmZIZWFkZXJOYW1lICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTtcbiAgICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCBjYW5jZWwudHlwZSA/IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZywgcmVxdWVzdCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmFsc2UsIDAgKHplcm8gbnVtYmVyKSwgYW5kICcnIChlbXB0eSBzdHJpbmcpIGFyZSB2YWxpZCBKU09OIHZhbHVlc1xuICAgIGlmICghcmVxdWVzdERhdGEgJiYgcmVxdWVzdERhdGEgIT09IGZhbHNlICYmIHJlcXVlc3REYXRhICE9PSAwICYmIHJlcXVlc3REYXRhICE9PSAnJykge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2woZnVsbFBhdGgpO1xuXG4gICAgaWYgKHByb3RvY29sICYmIHBsYXRmb3JtLnByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sICsgJzonLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xudmFyIGZvcm1EYXRhVG9KU09OID0gcmVxdWlyZSgnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OJyk7XG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5heGlvcy5WRVJTSU9OID0gcmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247XG5heGlvcy50b0Zvcm1EYXRhID0gcmVxdWlyZSgnLi9oZWxwZXJzL3RvRm9ybURhdGEnKTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9saWIvY29yZS9BeGlvc0Vycm9yJyk7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSBmdW5jdGlvbih0aGluZykge1xuICByZXR1cm4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4vYnVpbGRGdWxsUGF0aCcpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsO1xuXG4gIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICB2YXIgcGFyYW1zU2VyaWFsaXplciA9IGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyO1xuXG4gIGlmIChwYXJhbXNTZXJpYWxpemVyICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICB9LCB0cnVlKTtcbiAgfVxuXG4gIHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikgJiYgKGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge3NlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplcn0pO1xuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG52YXIgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG52YXIgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChmdW5jdGlvbihjb2RlKSB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSBmdW5jdGlvbihlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpIHtcbiAgdmFyIGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBudWxsLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgbm9ybWFsaXplSGVhZGVyTmFtZShjb25maWcuaGVhZGVycywgJ0FjY2VwdCcpO1xuICBub3JtYWxpemVIZWFkZXJOYW1lKGNvbmZpZy5oZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzRW1wdHlPYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCB0YXJnZXQpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoWFNSRlRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYmVmb3JlUmVkaXJlY3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuL0F4aW9zRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzIEhUVFAgc3RhdHVzIGNvZGVcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIHN0YXR1cywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4vdHJhbnNpdGlvbmFsJyk7XG52YXIgdG9Gb3JtRGF0YSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YScpO1xudmFyIHRvVVJMRW5jb2RlZEZvcm0gPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0nKTtcbnZhciBwbGF0Zm9ybSA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtJyk7XG52YXIgZm9ybURhdGFUb0pTT04gPSByZXF1aXJlKCcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddIHx8ICcnO1xuICAgIHZhciBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICB2YXIgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgdmFyIGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB2YXIgaXNGaWxlTGlzdDtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgdmFyIF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIHZhciB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgSlNPTlJlcXVlc3RlZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIHRoaXMsIG51bGwsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICBlbnY6IHtcbiAgICBGb3JtRGF0YTogcGxhdGZvcm0uY2xhc3Nlcy5Gb3JtRGF0YSxcbiAgICBCbG9iOiBwbGF0Zm9ybS5jbGFzc2VzLkJsb2JcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2Zvcm0tZGF0YScpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjguMVwiXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvRm9ybURhdGEgPSByZXF1aXJlKCcuL3RvRm9ybURhdGEnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICB2YXIgY2hhck1hcCA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgIFwiJ1wiOiAnJTI3JyxcbiAgICAnKCc6ICclMjgnLFxuICAgICcpJzogJyUyOScsXG4gICAgJ34nOiAnJTdFJyxcbiAgICAnJTIwJzogJysnLFxuICAgICclMDAnOiAnXFx4MDAnXG4gIH07XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bISdcXChcXCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxudmFyIHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICB2YXIgX2VuY29kZSA9IGVuY29kZXIgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlbmNvZGVyLmNhbGwodGhpcywgdmFsdWUsIGVuY29kZSk7XG4gIH0gOiBlbmNvZGU7XG5cbiAgcmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbiBlYWNoKHBhaXIpIHtcbiAgICByZXR1cm4gX2VuY29kZShwYWlyWzBdKSArICc9JyArIF9lbmNvZGUocGFpclsxXSk7XG4gIH0sICcnKS5qb2luKCcmJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEF4aW9zVVJMU2VhcmNoUGFyYW1zID0gcmVxdWlyZSgnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICB9XG5cbiAgdmFyIF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICB2YXIgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5mdW5jdGlvbiBwYXJzZVByb3BQYXRoKG5hbWUpIHtcbiAgLy8gZm9vW3hdW3ldW3pdXG4gIC8vIGZvby54LnkuelxuICAvLyBmb28teC15LXpcbiAgLy8gZm9vIHggeSB6XG4gIHJldHVybiB1dGlscy5tYXRjaEFsbCgvXFx3K3xcXFsoXFx3KildL2csIG5hbWUpLm1hcChmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICB2YXIgb2JqID0ge307XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgdmFyIGk7XG4gIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIHZhciBuYW1lID0gcGF0aFtpbmRleCsrXTtcbiAgICB2YXIgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICB2YXIgaXNMYXN0ID0gaW5kZXggPj0gcGF0aC5sZW5ndGg7XG4gICAgbmFtZSA9ICFuYW1lICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzLmhhc093blByb3BlcnR5KHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIHZhciBvYmogPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gICAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc2xpY2UoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnNsaWNlKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICB2YXIgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciBlbnZGb3JtRGF0YSA9IHJlcXVpcmUoJy4uL2Vudi9jbGFzc2VzL0Zvcm1EYXRhJyk7XG5cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cykge1xuICBpZiAoIXBhdGgpIHJldHVybiBrZXk7XG4gIHJldHVybiBwYXRoLmNvbmNhdChrZXkpLm1hcChmdW5jdGlvbiBlYWNoKHRva2VuLCBpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdG9rZW4gPSByZW1vdmVCcmFja2V0cyh0b2tlbik7XG4gICAgcmV0dXJuICFkb3RzICYmIGkgPyAnWycgKyB0b2tlbiArICddJyA6IHRva2VuO1xuICB9KS5qb2luKGRvdHMgPyAnLicgOiAnJyk7XG59XG5cbmZ1bmN0aW9uIGlzRmxhdEFycmF5KGFycikge1xuICByZXR1cm4gdXRpbHMuaXNBcnJheShhcnIpICYmICFhcnIuc29tZShpc1Zpc2l0YWJsZSk7XG59XG5cbnZhciBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnQodGhpbmcpIHtcbiAgcmV0dXJuIHRoaW5nICYmIHV0aWxzLmlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl07XG59XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChlbnZGb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICB2YXIgbWV0YVRva2VucyA9IG9wdGlvbnMubWV0YVRva2VucztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIHZhciB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICB2YXIgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgdmFyIGluZGV4ZXMgPSBvcHRpb25zLmluZGV4ZXM7XG4gIHZhciBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgdmFyIHVzZUJsb2IgPSBfQmxvYiAmJiBpc1NwZWNDb21wbGlhbnQoZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIHZhciBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpICYmIChhcnIgPSB1dGlscy50b0FycmF5KHZhbHVlKSlcbiAgICAgICAgKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gcmVtb3ZlQnJhY2tldHMoa2V5KTtcblxuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiBlYWNoKGVsLCBpbmRleCkge1xuICAgICAgICAgICF1dGlscy5pc1VuZGVmaW5lZChlbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzdGFjayA9IFtdO1xuXG4gIHZhciBleHBvc2VkSGVscGVycyA9IE9iamVjdC5hc3NpZ24ocHJlZGljYXRlcywge1xuICAgIGRlZmF1bHRWaXNpdG9yOiBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWU6IGNvbnZlcnRWYWx1ZSxcbiAgICBpc1Zpc2l0YWJsZTogaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSAhdXRpbHMuaXNVbmRlZmluZWQoZWwpICYmIHZpc2l0b3IuY2FsbChcbiAgICAgICAgZm9ybURhdGEsIGVsLCB1dGlscy5pc1N0cmluZyhrZXkpID8ga2V5LnRyaW0oKSA6IGtleSwgcGF0aCwgZXhwb3NlZEhlbHBlcnNcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgYnVpbGQoZWwsIHBhdGggPyBwYXRoLmNvbmNhdChrZXkpIDogW2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIHRvRm9ybURhdGEgPSByZXF1aXJlKCcuL3RvRm9ybURhdGEnKTtcbnZhciBwbGF0Zm9ybSA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtLycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscy5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXhpb3NVUkxTZWFyY2hQYXJhbXMgPSByZXF1aXJlKCcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQnJvd3NlcjogdHJ1ZSxcbiAgY2xhc3Nlczoge1xuICAgIFVSTFNlYXJjaFBhcmFtczogcmVxdWlyZSgnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcycpLFxuICAgIEZvcm1EYXRhOiByZXF1aXJlKCcuL2NsYXNzZXMvRm9ybURhdGEnKSxcbiAgICBCbG9iOiBCbG9iXG4gIH0sXG4gIHByb3RvY29sczogWydodHRwJywgJ2h0dHBzJywgJ2ZpbGUnLCAnYmxvYicsICd1cmwnLCAnZGF0YSddXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm9kZS8nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudmFyIGtpbmRPZiA9IChmdW5jdGlvbihjYWNoZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odGhpbmcpIHtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xuICB9O1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmZ1bmN0aW9uIGtpbmRPZlRlc3QodHlwZSkge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gaXNLaW5kT2YodGhpbmcpIHtcbiAgICByZXR1cm4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIGVtcHR5IE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBlbXB0eSBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VtcHR5T2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICYmIE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAwICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodGhpbmcpIHtcbiAgdmFyIHBhdHRlcm4gPSAnW29iamVjdCBGb3JtRGF0YV0nO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHxcbiAgICB0b1N0cmluZy5jYWxsKHRoaW5nKSA9PT0gcGF0dGVybiB8fFxuICAgIChpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSBwYXR0ZXJuKVxuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgdmFyIHByb2R1Y3Q7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgKHByb2R1Y3QgPSBuYXZpZ2F0b3IucHJvZHVjdCkgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICBwcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgIHByb2R1Y3QgPT09ICdOUycpXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKi9cblxuZnVuY3Rpb24gaW5oZXJpdHMoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcEZpbHRlcl1cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gdG9GbGF0T2JqZWN0KHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSB7XG4gIHZhciBwcm9wcztcbiAgdmFyIGk7XG4gIHZhciBwcm9wO1xuICB2YXIgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKlxuICogZGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgdmFyIGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KHRoaW5nKSB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgdmFyIGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICB2YXIgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG52YXIgaXNUeXBlZEFycmF5ID0gKGZ1bmN0aW9uKFR5cGVkQXJyYXkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbmZ1bmN0aW9uIGZvckVhY2hFbnRyeShvYmosIGZuKSB7XG4gIHZhciBnZW5lcmF0b3IgPSBvYmogJiYgb2JqW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgdmFyIGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICB2YXIgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICB2YXIgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hBbGwocmVnRXhwLCBzdHIpIHtcbiAgdmFyIG1hdGNoZXM7XG4gIHZhciBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxudmFyIGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxudmFyIGhhc093blByb3BlcnR5ID0gKGZ1bmN0aW9uIHJlc29sdmVyKF9oYXNPd25Qcm9wZXJ0eSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqLCBwcm9wKSB7XG4gICAgcmV0dXJuIF9oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG4gIH07XG59KShPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc0VtcHR5T2JqZWN0OiBpc0VtcHR5T2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTSxcbiAgaW5oZXJpdHM6IGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3Q6IHRvRmxhdE9iamVjdCxcbiAga2luZE9mOiBraW5kT2YsXG4gIGtpbmRPZlRlc3Q6IGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoOiBlbmRzV2l0aCxcbiAgdG9BcnJheTogdG9BcnJheSxcbiAgaXNUeXBlZEFycmF5OiBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3Q6IGlzRmlsZUxpc3QsXG4gIGZvckVhY2hFbnRyeTogZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbDogbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm06IGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5OiBoYXNPd25Qcm9wZXJ0eVxufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbnZhciBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0geyBfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICE9IG51bGwgJiZcbiAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKClcbiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZU9mLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB2YXIgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKCdzdHJpbmcnKSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoXG4gICAgKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICApXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbkJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbkJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IGJ1Zi53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgdmFyIGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0IChvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgfVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc3RyaW5nXG4gICAgKVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArXG4gICAgICAgICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyA/IHNlbGYuRm9ybURhdGEgOiB3aW5kb3cuRm9ybURhdGE7XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiLy9cbi8vIFRISVMgRklMRSBJUyBBVVRPTUFUSUNBTExZIEdFTkVSQVRFRCEgRE8gTk9UIEVESVQgQlkgSEFORCFcbi8vXG47XG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpXG4gICAgICAgIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kXG4gICAgICAgICAgICA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgICAgICAgICAvLyBjZi4gaHR0cHM6Ly9naXRodWIuY29tL2RhbmtvZ2FpL2pzLWJhc2U2NC9pc3N1ZXMvMTE5XG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIHZlcnNpb24gZm9yIG5vQ29uZmxpY3QoKVxuICAgICAgICAgICAgICAgIHZhciBfQmFzZTY0ID0gZ2xvYmFsLkJhc2U2NDtcbiAgICAgICAgICAgICAgICB2YXIgZ0Jhc2U2NCA9IGZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICBnQmFzZTY0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5CYXNlNjQgPSBfQmFzZTY0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ0Jhc2U2NDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuTWV0ZW9yKSB7IC8vIE1ldGVvci5qc1xuICAgICAgICAgICAgICAgICAgICBCYXNlNjQgPSBnQmFzZTY0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnbG9iYWwuQmFzZTY0ID0gZ0Jhc2U2NDtcbiAgICAgICAgICAgIH0pKCk7XG59KCh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmXG4gICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvd1xuICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsXG4gICAgICAgICAgICA6IHRoaXMpLCBmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8qKlxuICAgICAqICBiYXNlNjQudHNcbiAgICAgKlxuICAgICAqICBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtQ2xhdXNlIExpY2Vuc2UuXG4gICAgICogICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICAgICAqXG4gICAgICogIFJlZmVyZW5jZXM6XG4gICAgICogICAgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjRcbiAgICAgKlxuICAgICAqIEBhdXRob3IgRGFuIEtvZ2FpIChodHRwczovL2dpdGh1Yi5jb20vZGFua29nYWkpXG4gICAgICovXG4gICAgdmFyIHZlcnNpb24gPSAnMy43LjcnO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBsb3dlcmNhc2UgYHZlcnNpb25gLlxuICAgICAqL1xuICAgIHZhciBWRVJTSU9OID0gdmVyc2lvbjtcbiAgICB2YXIgX2hhc0J1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbic7XG4gICAgdmFyIF9URCA9IHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBUZXh0RGVjb2RlcigpIDogdW5kZWZpbmVkO1xuICAgIHZhciBfVEUgPSB0eXBlb2YgVGV4dEVuY29kZXIgPT09ICdmdW5jdGlvbicgPyBuZXcgVGV4dEVuY29kZXIoKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgYjY0Y2ggPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuICAgIHZhciBiNjRjaHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChiNjRjaCk7XG4gICAgdmFyIGI2NHRhYiA9IChmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgdGFiID0ge307XG4gICAgICAgIGEuZm9yRWFjaChmdW5jdGlvbiAoYywgaSkgeyByZXR1cm4gdGFiW2NdID0gaTsgfSk7XG4gICAgICAgIHJldHVybiB0YWI7XG4gICAgfSkoYjY0Y2hzKTtcbiAgICB2YXIgYjY0cmUgPSAvXig/OltBLVphLXpcXGQrXFwvXXs0fSkqPyg/OltBLVphLXpcXGQrXFwvXXsyfSg/Oj09KT98W0EtWmEtelxcZCtcXC9dezN9PT8pPyQvO1xuICAgIHZhciBfZnJvbUNDID0gU3RyaW5nLmZyb21DaGFyQ29kZS5iaW5kKFN0cmluZyk7XG4gICAgdmFyIF9VOEFmcm9tID0gdHlwZW9mIFVpbnQ4QXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IFVpbnQ4QXJyYXkuZnJvbS5iaW5kKFVpbnQ4QXJyYXkpXG4gICAgICAgIDogZnVuY3Rpb24gKGl0KSB7IHJldHVybiBuZXcgVWludDhBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpdCwgMCkpOyB9O1xuICAgIHZhciBfbWtVcmlTYWZlID0gZnVuY3Rpb24gKHNyYykgeyByZXR1cm4gc3JjXG4gICAgICAgIC5yZXBsYWNlKC89L2csICcnKS5yZXBsYWNlKC9bK1xcL10vZywgZnVuY3Rpb24gKG0wKSB7IHJldHVybiBtMCA9PSAnKycgPyAnLScgOiAnXyc7IH0pOyB9O1xuICAgIHZhciBfdGlkeUI2NCA9IGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXS9nLCAnJyk7IH07XG4gICAgLyoqXG4gICAgICogcG9seWZpbGwgdmVyc2lvbiBvZiBgYnRvYWBcbiAgICAgKi9cbiAgICB2YXIgYnRvYVBvbHlmaWxsID0gZnVuY3Rpb24gKGJpbikge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncG9seWZpbGxlZCcpO1xuICAgICAgICB2YXIgdTMyLCBjMCwgYzEsIGMyLCBhc2MgPSAnJztcbiAgICAgICAgdmFyIHBhZCA9IGJpbi5sZW5ndGggJSAzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbi5sZW5ndGg7KSB7XG4gICAgICAgICAgICBpZiAoKGMwID0gYmluLmNoYXJDb2RlQXQoaSsrKSkgPiAyNTUgfHxcbiAgICAgICAgICAgICAgICAoYzEgPSBiaW4uY2hhckNvZGVBdChpKyspKSA+IDI1NSB8fFxuICAgICAgICAgICAgICAgIChjMiA9IGJpbi5jaGFyQ29kZUF0KGkrKykpID4gMjU1KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY2hhcmFjdGVyIGZvdW5kJyk7XG4gICAgICAgICAgICB1MzIgPSAoYzAgPDwgMTYpIHwgKGMxIDw8IDgpIHwgYzI7XG4gICAgICAgICAgICBhc2MgKz0gYjY0Y2hzW3UzMiA+PiAxOCAmIDYzXVxuICAgICAgICAgICAgICAgICsgYjY0Y2hzW3UzMiA+PiAxMiAmIDYzXVxuICAgICAgICAgICAgICAgICsgYjY0Y2hzW3UzMiA+PiA2ICYgNjNdXG4gICAgICAgICAgICAgICAgKyBiNjRjaHNbdTMyICYgNjNdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWQgPyBhc2Muc2xpY2UoMCwgcGFkIC0gMykgKyBcIj09PVwiLnN1YnN0cmluZyhwYWQpIDogYXNjO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogZG9lcyB3aGF0IGB3aW5kb3cuYnRvYWAgb2Ygd2ViIGJyb3dzZXJzIGRvLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBiaW4gYmluYXJ5IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NC1lbmNvZGVkIHN0cmluZ1xuICAgICAqL1xuICAgIHZhciBfYnRvYSA9IHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24gKGJpbikgeyByZXR1cm4gYnRvYShiaW4pOyB9XG4gICAgICAgIDogX2hhc0J1ZmZlciA/IGZ1bmN0aW9uIChiaW4pIHsgcmV0dXJuIEJ1ZmZlci5mcm9tKGJpbiwgJ2JpbmFyeScpLnRvU3RyaW5nKCdiYXNlNjQnKTsgfVxuICAgICAgICAgICAgOiBidG9hUG9seWZpbGw7XG4gICAgdmFyIF9mcm9tVWludDhBcnJheSA9IF9oYXNCdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiAodThhKSB7IHJldHVybiBCdWZmZXIuZnJvbSh1OGEpLnRvU3RyaW5nKCdiYXNlNjQnKTsgfVxuICAgICAgICA6IGZ1bmN0aW9uICh1OGEpIHtcbiAgICAgICAgICAgIC8vIGNmLiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjcxMDAwMS9ob3ctdG8tY29udmVydC11aW50OC1hcnJheS10by1iYXNlNjQtZW5jb2RlZC1zdHJpbmcvMTI3MTMzMjYjMTI3MTMzMjZcbiAgICAgICAgICAgIHZhciBtYXhhcmdzID0gMHgxMDAwO1xuICAgICAgICAgICAgdmFyIHN0cnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdThhLmxlbmd0aDsgaSA8IGw7IGkgKz0gbWF4YXJncykge1xuICAgICAgICAgICAgICAgIHN0cnMucHVzaChfZnJvbUNDLmFwcGx5KG51bGwsIHU4YS5zdWJhcnJheShpLCBpICsgbWF4YXJncykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfYnRvYShzdHJzLmpvaW4oJycpKTtcbiAgICAgICAgfTtcbiAgICAvKipcbiAgICAgKiBjb252ZXJ0cyBhIFVpbnQ4QXJyYXkgdG8gYSBCYXNlNjQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VybHNhZmVdIFVSTC1hbmQtZmlsZW5hbWUtc2FmZSBhIGxhIFJGQzQ2NDggwqc1XG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IHN0cmluZ1xuICAgICAqL1xuICAgIHZhciBmcm9tVWludDhBcnJheSA9IGZ1bmN0aW9uICh1OGEsIHVybHNhZmUpIHtcbiAgICAgICAgaWYgKHVybHNhZmUgPT09IHZvaWQgMCkgeyB1cmxzYWZlID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHVybHNhZmUgPyBfbWtVcmlTYWZlKF9mcm9tVWludDhBcnJheSh1OGEpKSA6IF9mcm9tVWludDhBcnJheSh1OGEpO1xuICAgIH07XG4gICAgLy8gVGhpcyB0cmljayBpcyBmb3VuZCBicm9rZW4gaHR0cHM6Ly9naXRodWIuY29tL2RhbmtvZ2FpL2pzLWJhc2U2NC9pc3N1ZXMvMTMwXG4gICAgLy8gY29uc3QgdXRvYiA9IChzcmM6IHN0cmluZykgPT4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHNyYykpO1xuICAgIC8vIHJldmVydGluZyBnb29kIG9sZCBmYXRpb25lZCByZWdleHBcbiAgICB2YXIgY2JfdXRvYiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHZhciBjYyA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIHJldHVybiBjYyA8IDB4ODAgPyBjXG4gICAgICAgICAgICAgICAgOiBjYyA8IDB4ODAwID8gKF9mcm9tQ0MoMHhjMCB8IChjYyA+Pj4gNikpXG4gICAgICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKGNjICYgMHgzZikpKVxuICAgICAgICAgICAgICAgICAgICA6IChfZnJvbUNDKDB4ZTAgfCAoKGNjID4+PiAxMikgJiAweDBmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKChjYyA+Pj4gNikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKGNjICYgMHgzZikpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjYyA9IDB4MTAwMDBcbiAgICAgICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMCkgLSAweEQ4MDApICogMHg0MDBcbiAgICAgICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMSkgLSAweERDMDApO1xuICAgICAgICAgICAgcmV0dXJuIChfZnJvbUNDKDB4ZjAgfCAoKGNjID4+PiAxOCkgJiAweDA3KSlcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8ICgoY2MgPj4+IDEyKSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKChjYyA+Pj4gNikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8IChjYyAmIDB4M2YpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZV91dG9iID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRkZdfFteXFx4MDAtXFx4N0ZdL2c7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2hvdWxkIGhhdmUgYmVlbiBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjIFVURi04IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFVURi0xNiBzdHJpbmdcbiAgICAgKi9cbiAgICB2YXIgdXRvYiA9IGZ1bmN0aW9uICh1KSB7IHJldHVybiB1LnJlcGxhY2UocmVfdXRvYiwgY2JfdXRvYik7IH07XG4gICAgLy9cbiAgICB2YXIgX2VuY29kZSA9IF9oYXNCdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiAocykgeyByZXR1cm4gQnVmZmVyLmZyb20ocywgJ3V0ZjgnKS50b1N0cmluZygnYmFzZTY0Jyk7IH1cbiAgICAgICAgOiBfVEVcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHMpIHsgcmV0dXJuIF9mcm9tVWludDhBcnJheShfVEUuZW5jb2RlKHMpKTsgfVxuICAgICAgICAgICAgOiBmdW5jdGlvbiAocykgeyByZXR1cm4gX2J0b2EodXRvYihzKSk7IH07XG4gICAgLyoqXG4gICAgICogY29udmVydHMgYSBVVEYtOC1lbmNvZGVkIHN0cmluZyB0byBhIEJhc2U2NCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbdXJsc2FmZV0gaWYgYHRydWVgIG1ha2UgdGhlIHJlc3VsdCBVUkwtc2FmZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBzdHJpbmdcbiAgICAgKi9cbiAgICB2YXIgZW5jb2RlID0gZnVuY3Rpb24gKHNyYywgdXJsc2FmZSkge1xuICAgICAgICBpZiAodXJsc2FmZSA9PT0gdm9pZCAwKSB7IHVybHNhZmUgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gdXJsc2FmZVxuICAgICAgICAgICAgPyBfbWtVcmlTYWZlKF9lbmNvZGUoc3JjKSlcbiAgICAgICAgICAgIDogX2VuY29kZShzcmMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogY29udmVydHMgYSBVVEYtOC1lbmNvZGVkIHN0cmluZyB0byBVUkwtc2FmZSBCYXNlNjQgUkZDNDY0OCDCpzUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IHN0cmluZ1xuICAgICAqL1xuICAgIHZhciBlbmNvZGVVUkkgPSBmdW5jdGlvbiAoc3JjKSB7IHJldHVybiBlbmNvZGUoc3JjLCB0cnVlKTsgfTtcbiAgICAvLyBUaGlzIHRyaWNrIGlzIGZvdW5kIGJyb2tlbiBodHRwczovL2dpdGh1Yi5jb20vZGFua29nYWkvanMtYmFzZTY0L2lzc3Vlcy8xMzBcbiAgICAvLyBjb25zdCBidG91ID0gKHNyYzogc3RyaW5nKSA9PiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHNyYykpO1xuICAgIC8vIHJldmVydGluZyBnb29kIG9sZCBmYXRpb25lZCByZWdleHBcbiAgICB2YXIgcmVfYnRvdSA9IC9bXFx4QzAtXFx4REZdW1xceDgwLVxceEJGXXxbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfXxbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfS9nO1xuICAgIHZhciBjYl9idG91ID0gZnVuY3Rpb24gKGNjY2MpIHtcbiAgICAgICAgc3dpdGNoIChjY2NjLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHZhciBjcCA9ICgoMHgwNyAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTgpXG4gICAgICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCAxMilcbiAgICAgICAgICAgICAgICAgICAgfCAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMykpLCBvZmZzZXQgPSBjcCAtIDB4MTAwMDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChfZnJvbUNDKChvZmZzZXQgPj4+IDEwKSArIDB4RDgwMClcbiAgICAgICAgICAgICAgICAgICAgKyBfZnJvbUNDKChvZmZzZXQgJiAweDNGRikgKyAweERDMDApKTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2Zyb21DQygoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgfCAoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2Zyb21DQygoKDB4MWYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2hvdWxkIGhhdmUgYmVlbiBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjIFVURi0xNiBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBVVEYtOCBzdHJpbmdcbiAgICAgKi9cbiAgICB2YXIgYnRvdSA9IGZ1bmN0aW9uIChiKSB7IHJldHVybiBiLnJlcGxhY2UocmVfYnRvdSwgY2JfYnRvdSk7IH07XG4gICAgLyoqXG4gICAgICogcG9seWZpbGwgdmVyc2lvbiBvZiBgYXRvYmBcbiAgICAgKi9cbiAgICB2YXIgYXRvYlBvbHlmaWxsID0gZnVuY3Rpb24gKGFzYykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncG9seWZpbGxlZCcpO1xuICAgICAgICBhc2MgPSBhc2MucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgICAgIGlmICghYjY0cmUudGVzdChhc2MpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWFsZm9ybWVkIGJhc2U2NC4nKTtcbiAgICAgICAgYXNjICs9ICc9PScuc2xpY2UoMiAtIChhc2MubGVuZ3RoICYgMykpO1xuICAgICAgICB2YXIgdTI0LCBiaW4gPSAnJywgcjEsIHIyO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFzYy5sZW5ndGg7KSB7XG4gICAgICAgICAgICB1MjQgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSA8PCAxOFxuICAgICAgICAgICAgICAgIHwgYjY0dGFiW2FzYy5jaGFyQXQoaSsrKV0gPDwgMTJcbiAgICAgICAgICAgICAgICB8IChyMSA9IGI2NHRhYlthc2MuY2hhckF0KGkrKyldKSA8PCA2XG4gICAgICAgICAgICAgICAgfCAocjIgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSk7XG4gICAgICAgICAgICBiaW4gKz0gcjEgPT09IDY0ID8gX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUpXG4gICAgICAgICAgICAgICAgOiByMiA9PT0gNjQgPyBfZnJvbUNDKHUyNCA+PiAxNiAmIDI1NSwgdTI0ID4+IDggJiAyNTUpXG4gICAgICAgICAgICAgICAgICAgIDogX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUsIHUyNCA+PiA4ICYgMjU1LCB1MjQgJiAyNTUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiaW47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBkb2VzIHdoYXQgYHdpbmRvdy5hdG9iYCBvZiB3ZWIgYnJvd3NlcnMgZG8uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFzYyBCYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBiaW5hcnkgc3RyaW5nXG4gICAgICovXG4gICAgdmFyIF9hdG9iID0gdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicgPyBmdW5jdGlvbiAoYXNjKSB7IHJldHVybiBhdG9iKF90aWR5QjY0KGFzYykpOyB9XG4gICAgICAgIDogX2hhc0J1ZmZlciA/IGZ1bmN0aW9uIChhc2MpIHsgcmV0dXJuIEJ1ZmZlci5mcm9tKGFzYywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKTsgfVxuICAgICAgICAgICAgOiBhdG9iUG9seWZpbGw7XG4gICAgLy9cbiAgICB2YXIgX3RvVWludDhBcnJheSA9IF9oYXNCdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiAoYSkgeyByZXR1cm4gX1U4QWZyb20oQnVmZmVyLmZyb20oYSwgJ2Jhc2U2NCcpKTsgfVxuICAgICAgICA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBfVThBZnJvbShfYXRvYihhKS5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmNoYXJDb2RlQXQoMCk7IH0pKTsgfTtcbiAgICAvKipcbiAgICAgKiBjb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSBVaW50OEFycmF5LlxuICAgICAqL1xuICAgIHZhciB0b1VpbnQ4QXJyYXkgPSBmdW5jdGlvbiAoYSkgeyByZXR1cm4gX3RvVWludDhBcnJheShfdW5VUkkoYSkpOyB9O1xuICAgIC8vXG4gICAgdmFyIF9kZWNvZGUgPSBfaGFzQnVmZmVyXG4gICAgICAgID8gZnVuY3Rpb24gKGEpIHsgcmV0dXJuIEJ1ZmZlci5mcm9tKGEsICdiYXNlNjQnKS50b1N0cmluZygndXRmOCcpOyB9XG4gICAgICAgIDogX1REXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChhKSB7IHJldHVybiBfVEQuZGVjb2RlKF90b1VpbnQ4QXJyYXkoYSkpOyB9XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBidG91KF9hdG9iKGEpKTsgfTtcbiAgICB2YXIgX3VuVVJJID0gZnVuY3Rpb24gKGEpIHsgcmV0dXJuIF90aWR5QjY0KGEucmVwbGFjZSgvWy1fXS9nLCBmdW5jdGlvbiAobTApIHsgcmV0dXJuIG0wID09ICctJyA/ICcrJyA6ICcvJzsgfSkpOyB9O1xuICAgIC8qKlxuICAgICAqIGNvbnZlcnRzIGEgQmFzZTY0IHN0cmluZyB0byBhIFVURi04IHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3JjIEJhc2U2NCBzdHJpbmcuICBCb3RoIG5vcm1hbCBhbmQgVVJMLXNhZmUgYXJlIHN1cHBvcnRlZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFVURi04IHN0cmluZ1xuICAgICAqL1xuICAgIHZhciBkZWNvZGUgPSBmdW5jdGlvbiAoc3JjKSB7IHJldHVybiBfZGVjb2RlKF91blVSSShzcmMpKTsgfTtcbiAgICAvKipcbiAgICAgKiBjaGVjayBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgQmFzZTY0IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgYSB2YWx1ZSB0byBjaGVja1xuICAgICAgKi9cbiAgICB2YXIgaXNWYWxpZCA9IGZ1bmN0aW9uIChzcmMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzcmMgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgcyA9IHNyYy5yZXBsYWNlKC9cXHMrL2csICcnKS5yZXBsYWNlKC89ezAsMn0kLywgJycpO1xuICAgICAgICByZXR1cm4gIS9bXlxcczAtOWEtekEtWlxcKy9dLy50ZXN0KHMpIHx8ICEvW15cXHMwLTlhLXpBLVpcXC1fXS8udGVzdChzKTtcbiAgICB9O1xuICAgIC8vXG4gICAgdmFyIF9ub0VudW0gPSBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHYsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBleHRlbmQgU3RyaW5nLnByb3RvdHlwZSB3aXRoIHJlbGV2YW50IG1ldGhvZHNcbiAgICAgKi9cbiAgICB2YXIgZXh0ZW5kU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2FkZCA9IGZ1bmN0aW9uIChuYW1lLCBib2R5KSB7IHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgbmFtZSwgX25vRW51bShib2R5KSk7IH07XG4gICAgICAgIF9hZGQoJ2Zyb21CYXNlNjQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGUodGhpcyk7IH0pO1xuICAgICAgICBfYWRkKCd0b0Jhc2U2NCcsIGZ1bmN0aW9uICh1cmxzYWZlKSB7IHJldHVybiBlbmNvZGUodGhpcywgdXJsc2FmZSk7IH0pO1xuICAgICAgICBfYWRkKCd0b0Jhc2U2NFVSSScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZSh0aGlzLCB0cnVlKTsgfSk7XG4gICAgICAgIF9hZGQoJ3RvQmFzZTY0VVJMJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlKHRoaXMsIHRydWUpOyB9KTtcbiAgICAgICAgX2FkZCgndG9VaW50OEFycmF5JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdG9VaW50OEFycmF5KHRoaXMpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGV4dGVuZCBVaW50OEFycmF5LnByb3RvdHlwZSB3aXRoIHJlbGV2YW50IG1ldGhvZHNcbiAgICAgKi9cbiAgICB2YXIgZXh0ZW5kVWludDhBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hZGQgPSBmdW5jdGlvbiAobmFtZSwgYm9keSkgeyByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KFVpbnQ4QXJyYXkucHJvdG90eXBlLCBuYW1lLCBfbm9FbnVtKGJvZHkpKTsgfTtcbiAgICAgICAgX2FkZCgndG9CYXNlNjQnLCBmdW5jdGlvbiAodXJsc2FmZSkgeyByZXR1cm4gZnJvbVVpbnQ4QXJyYXkodGhpcywgdXJsc2FmZSk7IH0pO1xuICAgICAgICBfYWRkKCd0b0Jhc2U2NFVSSScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21VaW50OEFycmF5KHRoaXMsIHRydWUpOyB9KTtcbiAgICAgICAgX2FkZCgndG9CYXNlNjRVUkwnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm9tVWludDhBcnJheSh0aGlzLCB0cnVlKTsgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBleHRlbmQgQnVpbHRpbiBwcm90b3R5cGVzIHdpdGggcmVsZXZhbnQgbWV0aG9kc1xuICAgICAqL1xuICAgIHZhciBleHRlbmRCdWlsdGlucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXh0ZW5kU3RyaW5nKCk7XG4gICAgICAgIGV4dGVuZFVpbnQ4QXJyYXkoKTtcbiAgICB9O1xuICAgIHZhciBnQmFzZTY0ID0ge1xuICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICBWRVJTSU9OOiBWRVJTSU9OLFxuICAgICAgICBhdG9iOiBfYXRvYixcbiAgICAgICAgYXRvYlBvbHlmaWxsOiBhdG9iUG9seWZpbGwsXG4gICAgICAgIGJ0b2E6IF9idG9hLFxuICAgICAgICBidG9hUG9seWZpbGw6IGJ0b2FQb2x5ZmlsbCxcbiAgICAgICAgZnJvbUJhc2U2NDogZGVjb2RlLFxuICAgICAgICB0b0Jhc2U2NDogZW5jb2RlLFxuICAgICAgICBlbmNvZGU6IGVuY29kZSxcbiAgICAgICAgZW5jb2RlVVJJOiBlbmNvZGVVUkksXG4gICAgICAgIGVuY29kZVVSTDogZW5jb2RlVVJJLFxuICAgICAgICB1dG9iOiB1dG9iLFxuICAgICAgICBidG91OiBidG91LFxuICAgICAgICBkZWNvZGU6IGRlY29kZSxcbiAgICAgICAgaXNWYWxpZDogaXNWYWxpZCxcbiAgICAgICAgZnJvbVVpbnQ4QXJyYXk6IGZyb21VaW50OEFycmF5LFxuICAgICAgICB0b1VpbnQ4QXJyYXk6IHRvVWludDhBcnJheSxcbiAgICAgICAgZXh0ZW5kU3RyaW5nOiBleHRlbmRTdHJpbmcsXG4gICAgICAgIGV4dGVuZFVpbnQ4QXJyYXk6IGV4dGVuZFVpbnQ4QXJyYXksXG4gICAgICAgIGV4dGVuZEJ1aWx0aW5zOiBleHRlbmRCdWlsdGluc1xuICAgIH07XG4gICAgLy9cbiAgICAvLyBleHBvcnQgQmFzZTY0IHRvIHRoZSBuYW1lc3BhY2VcbiAgICAvL1xuICAgIC8vIEVTNSBpcyB5ZXQgdG8gaGF2ZSBPYmplY3QuYXNzaWduKCkgdGhhdCBtYXkgbWFrZSB0cmFuc3BpbGVycyB1bmhhcHB5LlxuICAgIC8vIGdCYXNlNjQuQmFzZTY0ID0gT2JqZWN0LmFzc2lnbih7fSwgZ0Jhc2U2NCk7XG4gICAgZ0Jhc2U2NC5CYXNlNjQgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhnQmFzZTY0KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IHJldHVybiBnQmFzZTY0LkJhc2U2NFtrXSA9IGdCYXNlNjRba107IH0pO1xuICAgIHJldHVybiBnQmFzZTY0O1xufSkpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCB1bmRlZjtcblxuLyoqXG4gKiBEZWNvZGUgYSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0LnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5jb2RlIGEgZ2l2ZW4gaW5wdXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBlbmNvZGVkLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8jJl0rKT0/KFteJl0qKS9nXG4gICAgLCByZXN1bHQgPSB7fVxuICAgICwgcGFydDtcblxuICB3aGlsZSAocGFydCA9IHBhcnNlci5leGVjKHF1ZXJ5KSkge1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydFsxXSlcbiAgICAgICwgdmFsdWUgPSBkZWNvZGUocGFydFsyXSk7XG5cbiAgICAvL1xuICAgIC8vIFByZXZlbnQgb3ZlcnJpZGluZyBvZiBleGlzdGluZyBwcm9wZXJ0aWVzLiBUaGlzIGVuc3VyZXMgdGhhdCBidWlsZC1pblxuICAgIC8vIG1ldGhvZHMgbGlrZSBgdG9TdHJpbmdgIG9yIF9fcHJvdG9fXyBhcmUgbm90IG92ZXJyaWRlbiBieSBtYWxpY2lvdXNcbiAgICAvLyBxdWVyeXN0cmluZ3MuXG4gICAgLy9cbiAgICAvLyBJbiB0aGUgY2FzZSBpZiBmYWlsZWQgZGVjb2RpbmcsIHdlIHdhbnQgdG8gb21pdCB0aGUga2V5L3ZhbHVlIHBhaXJzXG4gICAgLy8gZnJvbSB0aGUgcmVzdWx0LlxuICAgIC8vXG4gICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCBrZXkgaW4gcmVzdWx0KSBjb250aW51ZTtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBxdWVyeSBzdHJpbmcgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkLlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBPcHRpb25hbCBwcmVmaXguXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmdpZnkob2JqLCBwcmVmaXgpIHtcbiAgcHJlZml4ID0gcHJlZml4IHx8ICcnO1xuXG4gIHZhciBwYWlycyA9IFtdXG4gICAgLCB2YWx1ZVxuICAgICwga2V5O1xuXG4gIC8vXG4gIC8vIE9wdGlvbmFsbHkgcHJlZml4IHdpdGggYSAnPycgaWYgbmVlZGVkXG4gIC8vXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByZWZpeCkgcHJlZml4ID0gJz8nO1xuXG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgIC8vXG4gICAgICAvLyBFZGdlIGNhc2VzIHdoZXJlIHdlIGFjdHVhbGx5IHdhbnQgdG8gZW5jb2RlIHRoZSB2YWx1ZSB0byBhbiBlbXB0eVxuICAgICAgLy8gc3RyaW5nIGluc3RlYWQgb2YgdGhlIHN0cmluZ2lmaWVkIHZhbHVlLlxuICAgICAgLy9cbiAgICAgIGlmICghdmFsdWUgJiYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZiB8fCBpc05hTih2YWx1ZSkpKSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGtleSA9IGVuY29kZShrZXkpO1xuICAgICAgdmFsdWUgPSBlbmNvZGUodmFsdWUpO1xuXG4gICAgICAvL1xuICAgICAgLy8gSWYgd2UgZmFpbGVkIHRvIGVuY29kZSB0aGUgc3RyaW5ncywgd2Ugc2hvdWxkIGJhaWwgb3V0IGFzIHdlIGRvbid0XG4gICAgICAvLyB3YW50IHRvIGFkZCBpbnZhbGlkIHN0cmluZ3MgdG8gdGhlIHF1ZXJ5LlxuICAgICAgLy9cbiAgICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcGFpcnMucHVzaChrZXkgKyc9JysgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYWlycy5sZW5ndGggPyBwcmVmaXggKyBwYWlycy5qb2luKCcmJykgOiAnJztcbn1cblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmV4cG9ydHMuc3RyaW5naWZ5ID0gcXVlcnlzdHJpbmdpZnk7XG5leHBvcnRzLnBhcnNlID0gcXVlcnlzdHJpbmc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzYykgeyBvYmpba2V5XSA9IGRlc2MudmFsdWU7IH07XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGRlZmluZVByb3BlcnR5KGdlbmVyYXRvciwgXCJfaW52b2tlXCIsIHsgdmFsdWU6IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgfSk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lUHJvcGVydHkoR3AsIFwiY29uc3RydWN0b3JcIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgZGVmaW5lUHJvcGVydHkoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgXCJjb25zdHJ1Y3RvclwiLFxuICAgIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uLCBjb25maWd1cmFibGU6IHRydWUgfVxuICApO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaW52b2tlXCIsIHsgdmFsdWU6IGVucXVldWUgfSk7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciBHZW5lcmF0b3JSZXN1bWUgYmVoYXZpb3Igc3BlY2lmaWVkIHNpbmNlIEVTMjAxNTpcbiAgICAgICAgLy8gRVMyMDE1IHNwZWMsIHN0ZXAgMzogaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgLy8gTGF0ZXN0IHNwZWMsIHN0ZXAgMjogaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2ROYW1lID0gY29udGV4dC5tZXRob2Q7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZE5hbWVdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QsIG9yIGEgbWlzc2luZyAubmV4dCBtZXRob2QsIGFsd2F5cyB0ZXJtaW5hdGUgdGhlXG4gICAgICAvLyB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgaWYgKG1ldGhvZE5hbWUgPT09IFwidGhyb3dcIiAmJiBkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWV0aG9kTmFtZSAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAnXCIgKyBtZXRob2ROYW1lICsgXCInIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIG9iamVjdCA9IE9iamVjdCh2YWwpO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUgIT0gbnVsbCkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHR5cGVvZiBpdGVyYWJsZSArIFwiIGlzIG5vdCBpdGVyYWJsZVwiKTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlJ3JlIHJlcXVpcmVkIHRvIGFkZCBhIHBvcnQgbnVtYmVyLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkZWZhdWx0LXBvcnRcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gcG9ydCBQb3J0IG51bWJlciB3ZSBuZWVkIHRvIGNoZWNrXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgd2UgbmVlZCB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IElzIGl0IGEgZGVmYXVsdCBwb3J0IGZvciB0aGUgZ2l2ZW4gcHJvdG9jb2xcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVpcmVkKHBvcnQsIHByb3RvY29sKSB7XG4gIHByb3RvY29sID0gcHJvdG9jb2wuc3BsaXQoJzonKVswXTtcbiAgcG9ydCA9ICtwb3J0O1xuXG4gIGlmICghcG9ydCkgcmV0dXJuIGZhbHNlO1xuXG4gIHN3aXRjaCAocHJvdG9jb2wpIHtcbiAgICBjYXNlICdodHRwJzpcbiAgICBjYXNlICd3cyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDgwO1xuXG4gICAgY2FzZSAnaHR0cHMnOlxuICAgIGNhc2UgJ3dzcyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDQ0MztcblxuICAgIGNhc2UgJ2Z0cCc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDIxO1xuXG4gICAgY2FzZSAnZ29waGVyJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNzA7XG5cbiAgICBjYXNlICdmaWxlJzpcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcG9ydCAhPT0gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlZCA9IHJlcXVpcmUoJ3JlcXVpcmVzLXBvcnQnKVxuICAsIHFzID0gcmVxdWlyZSgncXVlcnlzdHJpbmdpZnknKVxuICAsIGNvbnRyb2xPcldoaXRlc3BhY2UgPSAvXltcXHgwMC1cXHgyMFxcdTAwYTBcXHUxNjgwXFx1MjAwMC1cXHUyMDBhXFx1MjAyOFxcdTIwMjlcXHUyMDJmXFx1MjA1ZlxcdTMwMDBcXHVmZWZmXSsvXG4gICwgQ1JIVExGID0gL1tcXG5cXHJcXHRdL2dcbiAgLCBzbGFzaGVzID0gL15bQS1aYS16XVtBLVphLXowLTkrLS5dKjpcXC9cXC8vXG4gICwgcG9ydCA9IC86XFxkKyQvXG4gICwgcHJvdG9jb2xyZSA9IC9eKFthLXpdW2EtejAtOS4rLV0qOik/KFxcL1xcLyk/KFtcXFxcL10rKT8oW1xcU1xcc10qKS9pXG4gICwgd2luZG93c0RyaXZlTGV0dGVyID0gL15bYS16QS1aXTovO1xuXG4vKipcbiAqIFJlbW92ZSBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHdoaXRlc3BhY2UgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gc3RyIFN0cmluZyB0byB0cmltLlxuICogQHJldHVybnMge1N0cmluZ30gQSBuZXcgc3RyaW5nIHJlcHJlc2VudGluZyBgc3RyYCBzdHJpcHBlZCBvZiBjb250cm9sXG4gKiAgICAgY2hhcmFjdGVycyBhbmQgd2hpdGVzcGFjZSBmcm9tIGl0cyBiZWdpbm5pbmcuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRyaW1MZWZ0KHN0cikge1xuICByZXR1cm4gKHN0ciA/IHN0ciA6ICcnKS50b1N0cmluZygpLnJlcGxhY2UoY29udHJvbE9yV2hpdGVzcGFjZSwgJycpO1xufVxuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgcGFyc2UgcnVsZXMgZm9yIHRoZSBVUkwgcGFyc2VyLCBpdCBpbmZvcm1zIHRoZSBwYXJzZXJcbiAqIGFib3V0OlxuICpcbiAqIDAuIFRoZSBjaGFyIGl0IE5lZWRzIHRvIHBhcnNlLCBpZiBpdCdzIGEgc3RyaW5nIGl0IHNob3VsZCBiZSBkb25lIHVzaW5nXG4gKiAgICBpbmRleE9mLCBSZWdFeHAgdXNpbmcgZXhlYyBhbmQgTmFOIG1lYW5zIHNldCBhcyBjdXJyZW50IHZhbHVlLlxuICogMS4gVGhlIHByb3BlcnR5IHdlIHNob3VsZCBzZXQgd2hlbiBwYXJzaW5nIHRoaXMgdmFsdWUuXG4gKiAyLiBJbmRpY2F0aW9uIGlmIGl0J3MgYmFja3dhcmRzIG9yIGZvcndhcmQgcGFyc2luZywgd2hlbiBzZXQgYXMgbnVtYmVyIGl0J3NcbiAqICAgIHRoZSB2YWx1ZSBvZiBleHRyYSBjaGFycyB0aGF0IHNob3VsZCBiZSBzcGxpdCBvZmYuXG4gKiAzLiBJbmhlcml0IGZyb20gbG9jYXRpb24gaWYgbm9uIGV4aXN0aW5nIGluIHRoZSBwYXJzZXIuXG4gKiA0LiBgdG9Mb3dlckNhc2VgIHRoZSByZXN1bHRpbmcgdmFsdWUuXG4gKi9cbnZhciBydWxlcyA9IFtcbiAgWycjJywgJ2hhc2gnXSwgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnPycsICdxdWVyeSddLCAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBmdW5jdGlvbiBzYW5pdGl6ZShhZGRyZXNzLCB1cmwpIHsgICAgIC8vIFNhbml0aXplIHdoYXQgaXMgbGVmdCBvZiB0aGUgYWRkcmVzc1xuICAgIHJldHVybiBpc1NwZWNpYWwodXJsLnByb3RvY29sKSA/IGFkZHJlc3MucmVwbGFjZSgvXFxcXC9nLCAnLycpIDogYWRkcmVzcztcbiAgfSxcbiAgWycvJywgJ3BhdGhuYW1lJ10sICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnQCcsICdhdXRoJywgMV0sICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBmcm9udC5cbiAgW05hTiwgJ2hvc3QnLCB1bmRlZmluZWQsIDEsIDFdLCAgICAgICAvLyBTZXQgbGVmdCBvdmVyIHZhbHVlLlxuICBbLzooXFxkKikkLywgJ3BvcnQnLCB1bmRlZmluZWQsIDFdLCAgICAvLyBSZWdFeHAgdGhlIGJhY2suXG4gIFtOYU4sICdob3N0bmFtZScsIHVuZGVmaW5lZCwgMSwgMV0gICAgLy8gU2V0IGxlZnQgb3Zlci5cbl07XG5cbi8qKlxuICogVGhlc2UgcHJvcGVydGllcyBzaG91bGQgbm90IGJlIGNvcGllZCBvciBpbmhlcml0ZWQgZnJvbS4gVGhpcyBpcyBvbmx5IG5lZWRlZFxuICogZm9yIGFsbCBub24gYmxvYiBVUkwncyBhcyBhIGJsb2IgVVJMIGRvZXMgbm90IGluY2x1ZGUgYSBoYXNoLCBvbmx5IHRoZVxuICogb3JpZ2luLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgaWdub3JlID0geyBoYXNoOiAxLCBxdWVyeTogMSB9O1xuXG4vKipcbiAqIFRoZSBsb2NhdGlvbiBvYmplY3QgZGlmZmVycyB3aGVuIHlvdXIgY29kZSBpcyBsb2FkZWQgdGhyb3VnaCBhIG5vcm1hbCBwYWdlLFxuICogV29ya2VyIG9yIHRocm91Z2ggYSB3b3JrZXIgdXNpbmcgYSBibG9iLiBBbmQgd2l0aCB0aGUgYmxvYmJsZSBiZWdpbnMgdGhlXG4gKiB0cm91YmxlIGFzIHRoZSBsb2NhdGlvbiBvYmplY3Qgd2lsbCBjb250YWluIHRoZSBVUkwgb2YgdGhlIGJsb2IsIG5vdCB0aGVcbiAqIGxvY2F0aW9uIG9mIHRoZSBwYWdlIHdoZXJlIG91ciBjb2RlIGlzIGxvYWRlZCBpbi4gVGhlIGFjdHVhbCBvcmlnaW4gaXNcbiAqIGVuY29kZWQgaW4gdGhlIGBwYXRobmFtZWAgc28gd2UgY2FuIHRoYW5rZnVsbHkgZ2VuZXJhdGUgYSBnb29kIFwiZGVmYXVsdFwiXG4gKiBsb2NhdGlvbiBmcm9tIGl0IHNvIHdlIGNhbiBnZW5lcmF0ZSBwcm9wZXIgcmVsYXRpdmUgVVJMJ3MgYWdhaW4uXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBsb2MgT3B0aW9uYWwgZGVmYXVsdCBsb2NhdGlvbiBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBsb2xjYXRpb24gb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2xjYXRpb24obG9jKSB7XG4gIHZhciBnbG9iYWxWYXI7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSB3aW5kb3c7XG4gIGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSBnbG9iYWw7XG4gIGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gc2VsZjtcbiAgZWxzZSBnbG9iYWxWYXIgPSB7fTtcblxuICB2YXIgbG9jYXRpb24gPSBnbG9iYWxWYXIubG9jYXRpb24gfHwge307XG4gIGxvYyA9IGxvYyB8fCBsb2NhdGlvbjtcblxuICB2YXIgZmluYWxkZXN0aW5hdGlvbiA9IHt9XG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY1xuICAgICwga2V5O1xuXG4gIGlmICgnYmxvYjonID09PSBsb2MucHJvdG9jb2wpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVybCh1bmVzY2FwZShsb2MucGF0aG5hbWUpLCB7fSk7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGUpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVybChsb2MsIHt9KTtcbiAgICBmb3IgKGtleSBpbiBpZ25vcmUpIGRlbGV0ZSBmaW5hbGRlc3RpbmF0aW9uW2tleV07XG4gIH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGUpIHtcbiAgICBmb3IgKGtleSBpbiBsb2MpIHtcbiAgICAgIGlmIChrZXkgaW4gaWdub3JlKSBjb250aW51ZTtcbiAgICAgIGZpbmFsZGVzdGluYXRpb25ba2V5XSA9IGxvY1trZXldO1xuICAgIH1cblxuICAgIGlmIChmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID0gc2xhc2hlcy50ZXN0KGxvYy5ocmVmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmluYWxkZXN0aW5hdGlvbjtcbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgcHJvdG9jb2wgc2NoZW1lIGlzIHNwZWNpYWwuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFRoZSBwcm90b2NvbCBzY2hlbWUgb2YgdGhlIFVSTFxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBwcm90b2NvbCBzY2hlbWUgaXMgc3BlY2lhbCwgZWxzZSBgZmFsc2VgXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc1NwZWNpYWwoc2NoZW1lKSB7XG4gIHJldHVybiAoXG4gICAgc2NoZW1lID09PSAnZmlsZTonIHx8XG4gICAgc2NoZW1lID09PSAnZnRwOicgfHxcbiAgICBzY2hlbWUgPT09ICdodHRwOicgfHxcbiAgICBzY2hlbWUgPT09ICdodHRwczonIHx8XG4gICAgc2NoZW1lID09PSAnd3M6JyB8fFxuICAgIHNjaGVtZSA9PT0gJ3dzczonXG4gICk7XG59XG5cbi8qKlxuICogQHR5cGVkZWYgUHJvdG9jb2xFeHRyYWN0XG4gKiBAdHlwZSBPYmplY3RcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwcm90b2NvbCBQcm90b2NvbCBtYXRjaGVkIGluIHRoZSBVUkwsIGluIGxvd2VyY2FzZS5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gc2xhc2hlcyBgdHJ1ZWAgaWYgcHJvdG9jb2wgaXMgZm9sbG93ZWQgYnkgXCIvL1wiLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcmVzdCBSZXN0IG9mIHRoZSBVUkwgdGhhdCBpcyBub3QgcGFydCBvZiB0aGUgcHJvdG9jb2wuXG4gKi9cblxuLyoqXG4gKiBFeHRyYWN0IHByb3RvY29sIGluZm9ybWF0aW9uIGZyb20gYSBVUkwgd2l0aC93aXRob3V0IGRvdWJsZSBzbGFzaCAoXCIvL1wiKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBleHRyYWN0IGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gbG9jYXRpb25cbiAqIEByZXR1cm4ge1Byb3RvY29sRXh0cmFjdH0gRXh0cmFjdGVkIGluZm9ybWF0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFByb3RvY29sKGFkZHJlc3MsIGxvY2F0aW9uKSB7XG4gIGFkZHJlc3MgPSB0cmltTGVmdChhZGRyZXNzKTtcbiAgYWRkcmVzcyA9IGFkZHJlc3MucmVwbGFjZShDUkhUTEYsICcnKTtcbiAgbG9jYXRpb24gPSBsb2NhdGlvbiB8fCB7fTtcblxuICB2YXIgbWF0Y2ggPSBwcm90b2NvbHJlLmV4ZWMoYWRkcmVzcyk7XG4gIHZhciBwcm90b2NvbCA9IG1hdGNoWzFdID8gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKSA6ICcnO1xuICB2YXIgZm9yd2FyZFNsYXNoZXMgPSAhIW1hdGNoWzJdO1xuICB2YXIgb3RoZXJTbGFzaGVzID0gISFtYXRjaFszXTtcbiAgdmFyIHNsYXNoZXNDb3VudCA9IDA7XG4gIHZhciByZXN0O1xuXG4gIGlmIChmb3J3YXJkU2xhc2hlcykge1xuICAgIGlmIChvdGhlclNsYXNoZXMpIHtcbiAgICAgIHJlc3QgPSBtYXRjaFsyXSArIG1hdGNoWzNdICsgbWF0Y2hbNF07XG4gICAgICBzbGFzaGVzQ291bnQgPSBtYXRjaFsyXS5sZW5ndGggKyBtYXRjaFszXS5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3QgPSBtYXRjaFsyXSArIG1hdGNoWzRdO1xuICAgICAgc2xhc2hlc0NvdW50ID0gbWF0Y2hbMl0ubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAob3RoZXJTbGFzaGVzKSB7XG4gICAgICByZXN0ID0gbWF0Y2hbM10gKyBtYXRjaFs0XTtcbiAgICAgIHNsYXNoZXNDb3VudCA9IG1hdGNoWzNdLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdCA9IG1hdGNoWzRdXG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3RvY29sID09PSAnZmlsZTonKSB7XG4gICAgaWYgKHNsYXNoZXNDb3VudCA+PSAyKSB7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZSgyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHByb3RvY29sKSkge1xuICAgIHJlc3QgPSBtYXRjaFs0XTtcbiAgfSBlbHNlIGlmIChwcm90b2NvbCkge1xuICAgIGlmIChmb3J3YXJkU2xhc2hlcykge1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoMik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHNsYXNoZXNDb3VudCA+PSAyICYmIGlzU3BlY2lhbChsb2NhdGlvbi5wcm90b2NvbCkpIHtcbiAgICByZXN0ID0gbWF0Y2hbNF07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHByb3RvY29sOiBwcm90b2NvbCxcbiAgICBzbGFzaGVzOiBmb3J3YXJkU2xhc2hlcyB8fCBpc1NwZWNpYWwocHJvdG9jb2wpLFxuICAgIHNsYXNoZXNDb3VudDogc2xhc2hlc0NvdW50LFxuICAgIHJlc3Q6IHJlc3RcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGEgcmVsYXRpdmUgVVJMIHBhdGhuYW1lIGFnYWluc3QgYSBiYXNlIFVSTCBwYXRobmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVsYXRpdmUgUGF0aG5hbWUgb2YgdGhlIHJlbGF0aXZlIFVSTC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlIFBhdGhuYW1lIG9mIHRoZSBiYXNlIFVSTC5cbiAqIEByZXR1cm4ge1N0cmluZ30gUmVzb2x2ZWQgcGF0aG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlKHJlbGF0aXZlLCBiYXNlKSB7XG4gIGlmIChyZWxhdGl2ZSA9PT0gJycpIHJldHVybiBiYXNlO1xuXG4gIHZhciBwYXRoID0gKGJhc2UgfHwgJy8nKS5zcGxpdCgnLycpLnNsaWNlKDAsIC0xKS5jb25jYXQocmVsYXRpdmUuc3BsaXQoJy8nKSlcbiAgICAsIGkgPSBwYXRoLmxlbmd0aFxuICAgICwgbGFzdCA9IHBhdGhbaSAtIDFdXG4gICAgLCB1bnNoaWZ0ID0gZmFsc2VcbiAgICAsIHVwID0gMDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKHBhdGhbaV0gPT09ICcuJykge1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChwYXRoW2ldID09PSAnLi4nKSB7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgaWYgKGkgPT09IDApIHVuc2hpZnQgPSB0cnVlO1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICh1bnNoaWZ0KSBwYXRoLnVuc2hpZnQoJycpO1xuICBpZiAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHBhdGgucHVzaCgnJyk7XG5cbiAgcmV0dXJuIHBhdGguam9pbignLycpO1xufVxuXG4vKipcbiAqIFRoZSBhY3R1YWwgVVJMIGluc3RhbmNlLiBJbnN0ZWFkIG9mIHJldHVybmluZyBhbiBvYmplY3Qgd2UndmUgb3B0ZWQtaW4gdG9cbiAqIGNyZWF0ZSBhbiBhY3R1YWwgY29uc3RydWN0b3IgYXMgaXQncyBtdWNoIG1vcmUgbWVtb3J5IGVmZmljaWVudCBhbmRcbiAqIGZhc3RlciBhbmQgaXQgcGxlYXNlcyBteSBPQ0QuXG4gKlxuICogSXQgaXMgd29ydGggbm90aW5nIHRoYXQgd2Ugc2hvdWxkIG5vdCB1c2UgYFVSTGAgYXMgY2xhc3MgbmFtZSB0byBwcmV2ZW50XG4gKiBjbGFzaGVzIHdpdGggdGhlIGdsb2JhbCBVUkwgaW5zdGFuY2UgdGhhdCBnb3QgaW50cm9kdWNlZCBpbiBicm93c2Vycy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIFVSTCB3ZSB3YW50IHRvIHBhcnNlLlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBbbG9jYXRpb25dIExvY2F0aW9uIGRlZmF1bHRzIGZvciByZWxhdGl2ZSBwYXRocy5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gW3BhcnNlcl0gUGFyc2VyIGZvciB0aGUgcXVlcnkgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gVXJsKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpIHtcbiAgYWRkcmVzcyA9IHRyaW1MZWZ0KGFkZHJlc3MpO1xuICBhZGRyZXNzID0gYWRkcmVzcy5yZXBsYWNlKENSSFRMRiwgJycpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVcmwpKSB7XG4gICAgcmV0dXJuIG5ldyBVcmwoYWRkcmVzcywgbG9jYXRpb24sIHBhcnNlcik7XG4gIH1cblxuICB2YXIgcmVsYXRpdmUsIGV4dHJhY3RlZCwgcGFyc2UsIGluc3RydWN0aW9uLCBpbmRleCwga2V5XG4gICAgLCBpbnN0cnVjdGlvbnMgPSBydWxlcy5zbGljZSgpXG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY2F0aW9uXG4gICAgLCB1cmwgPSB0aGlzXG4gICAgLCBpID0gMDtcblxuICAvL1xuICAvLyBUaGUgZm9sbG93aW5nIGlmIHN0YXRlbWVudHMgYWxsb3dzIHRoaXMgbW9kdWxlIHR3byBoYXZlIGNvbXBhdGliaWxpdHkgd2l0aFxuICAvLyAyIGRpZmZlcmVudCBBUEk6XG4gIC8vXG4gIC8vIDEuIE5vZGUuanMncyBgdXJsLnBhcnNlYCBhcGkgd2hpY2ggYWNjZXB0cyBhIFVSTCwgYm9vbGVhbiBhcyBhcmd1bWVudHNcbiAgLy8gICAgd2hlcmUgdGhlIGJvb2xlYW4gaW5kaWNhdGVzIHRoYXQgdGhlIHF1ZXJ5IHN0cmluZyBzaG91bGQgYWxzbyBiZSBwYXJzZWQuXG4gIC8vXG4gIC8vIDIuIFRoZSBgVVJMYCBpbnRlcmZhY2Ugb2YgdGhlIGJyb3dzZXIgd2hpY2ggYWNjZXB0cyBhIFVSTCwgb2JqZWN0IGFzXG4gIC8vICAgIGFyZ3VtZW50cy4gVGhlIHN1cHBsaWVkIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgZGVmYXVsdCB2YWx1ZXMgLyBmYWxsLWJhY2tcbiAgLy8gICAgZm9yIHJlbGF0aXZlIHBhdGhzLlxuICAvL1xuICBpZiAoJ29iamVjdCcgIT09IHR5cGUgJiYgJ3N0cmluZycgIT09IHR5cGUpIHtcbiAgICBwYXJzZXIgPSBsb2NhdGlvbjtcbiAgICBsb2NhdGlvbiA9IG51bGw7XG4gIH1cblxuICBpZiAocGFyc2VyICYmICdmdW5jdGlvbicgIT09IHR5cGVvZiBwYXJzZXIpIHBhcnNlciA9IHFzLnBhcnNlO1xuXG4gIGxvY2F0aW9uID0gbG9sY2F0aW9uKGxvY2F0aW9uKTtcblxuICAvL1xuICAvLyBFeHRyYWN0IHByb3RvY29sIGluZm9ybWF0aW9uIGJlZm9yZSBydW5uaW5nIHRoZSBpbnN0cnVjdGlvbnMuXG4gIC8vXG4gIGV4dHJhY3RlZCA9IGV4dHJhY3RQcm90b2NvbChhZGRyZXNzIHx8ICcnLCBsb2NhdGlvbik7XG4gIHJlbGF0aXZlID0gIWV4dHJhY3RlZC5wcm90b2NvbCAmJiAhZXh0cmFjdGVkLnNsYXNoZXM7XG4gIHVybC5zbGFzaGVzID0gZXh0cmFjdGVkLnNsYXNoZXMgfHwgcmVsYXRpdmUgJiYgbG9jYXRpb24uc2xhc2hlcztcbiAgdXJsLnByb3RvY29sID0gZXh0cmFjdGVkLnByb3RvY29sIHx8IGxvY2F0aW9uLnByb3RvY29sIHx8ICcnO1xuICBhZGRyZXNzID0gZXh0cmFjdGVkLnJlc3Q7XG5cbiAgLy9cbiAgLy8gV2hlbiB0aGUgYXV0aG9yaXR5IGNvbXBvbmVudCBpcyBhYnNlbnQgdGhlIFVSTCBzdGFydHMgd2l0aCBhIHBhdGhcbiAgLy8gY29tcG9uZW50LlxuICAvL1xuICBpZiAoXG4gICAgZXh0cmFjdGVkLnByb3RvY29sID09PSAnZmlsZTonICYmIChcbiAgICAgIGV4dHJhY3RlZC5zbGFzaGVzQ291bnQgIT09IDIgfHwgd2luZG93c0RyaXZlTGV0dGVyLnRlc3QoYWRkcmVzcykpIHx8XG4gICAgKCFleHRyYWN0ZWQuc2xhc2hlcyAmJlxuICAgICAgKGV4dHJhY3RlZC5wcm90b2NvbCB8fFxuICAgICAgICBleHRyYWN0ZWQuc2xhc2hlc0NvdW50IDwgMiB8fFxuICAgICAgICAhaXNTcGVjaWFsKHVybC5wcm90b2NvbCkpKVxuICApIHtcbiAgICBpbnN0cnVjdGlvbnNbM10gPSBbLyguKikvLCAncGF0aG5hbWUnXTtcbiAgfVxuXG4gIGZvciAoOyBpIDwgaW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNbaV07XG5cbiAgICBpZiAodHlwZW9mIGluc3RydWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhZGRyZXNzID0gaW5zdHJ1Y3Rpb24oYWRkcmVzcywgdXJsKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHBhcnNlID0gaW5zdHJ1Y3Rpb25bMF07XG4gICAga2V5ID0gaW5zdHJ1Y3Rpb25bMV07XG5cbiAgICBpZiAocGFyc2UgIT09IHBhcnNlKSB7XG4gICAgICB1cmxba2V5XSA9IGFkZHJlc3M7XG4gICAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHBhcnNlKSB7XG4gICAgICBpbmRleCA9IHBhcnNlID09PSAnQCdcbiAgICAgICAgPyBhZGRyZXNzLmxhc3RJbmRleE9mKHBhcnNlKVxuICAgICAgICA6IGFkZHJlc3MuaW5kZXhPZihwYXJzZSk7XG5cbiAgICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgaWYgKCdudW1iZXInID09PSB0eXBlb2YgaW5zdHJ1Y3Rpb25bMl0pIHtcbiAgICAgICAgICB1cmxba2V5XSA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKGluZGV4ICsgaW5zdHJ1Y3Rpb25bMl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybFtrZXldID0gYWRkcmVzcy5zbGljZShpbmRleCk7XG4gICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgoaW5kZXggPSBwYXJzZS5leGVjKGFkZHJlc3MpKSkge1xuICAgICAgdXJsW2tleV0gPSBpbmRleFsxXTtcbiAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4LmluZGV4KTtcbiAgICB9XG5cbiAgICB1cmxba2V5XSA9IHVybFtrZXldIHx8IChcbiAgICAgIHJlbGF0aXZlICYmIGluc3RydWN0aW9uWzNdID8gbG9jYXRpb25ba2V5XSB8fCAnJyA6ICcnXG4gICAgKTtcblxuICAgIC8vXG4gICAgLy8gSG9zdG5hbWUsIGhvc3QgYW5kIHByb3RvY29sIHNob3VsZCBiZSBsb3dlcmNhc2VkIHNvIHRoZXkgY2FuIGJlIHVzZWQgdG9cbiAgICAvLyBjcmVhdGUgYSBwcm9wZXIgYG9yaWdpbmAuXG4gICAgLy9cbiAgICBpZiAoaW5zdHJ1Y3Rpb25bNF0pIHVybFtrZXldID0gdXJsW2tleV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8vXG4gIC8vIEFsc28gcGFyc2UgdGhlIHN1cHBsaWVkIHF1ZXJ5IHN0cmluZyBpbiB0byBhbiBvYmplY3QuIElmIHdlJ3JlIHN1cHBsaWVkXG4gIC8vIHdpdGggYSBjdXN0b20gcGFyc2VyIGFzIGZ1bmN0aW9uIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgYnVpbGQtaW5cbiAgLy8gcGFyc2VyLlxuICAvL1xuICBpZiAocGFyc2VyKSB1cmwucXVlcnkgPSBwYXJzZXIodXJsLnF1ZXJ5KTtcblxuICAvL1xuICAvLyBJZiB0aGUgVVJMIGlzIHJlbGF0aXZlLCByZXNvbHZlIHRoZSBwYXRobmFtZSBhZ2FpbnN0IHRoZSBiYXNlIFVSTC5cbiAgLy9cbiAgaWYgKFxuICAgICAgcmVsYXRpdmVcbiAgICAmJiBsb2NhdGlvbi5zbGFzaGVzXG4gICAgJiYgdXJsLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nXG4gICAgJiYgKHVybC5wYXRobmFtZSAhPT0gJycgfHwgbG9jYXRpb24ucGF0aG5hbWUgIT09ICcnKVxuICApIHtcbiAgICB1cmwucGF0aG5hbWUgPSByZXNvbHZlKHVybC5wYXRobmFtZSwgbG9jYXRpb24ucGF0aG5hbWUpO1xuICB9XG5cbiAgLy9cbiAgLy8gRGVmYXVsdCB0byBhIC8gZm9yIHBhdGhuYW1lIGlmIG5vbmUgZXhpc3RzLiBUaGlzIG5vcm1hbGl6ZXMgdGhlIFVSTFxuICAvLyB0byBhbHdheXMgaGF2ZSBhIC9cbiAgLy9cbiAgaWYgKHVybC5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJyAmJiBpc1NwZWNpYWwodXJsLnByb3RvY29sKSkge1xuICAgIHVybC5wYXRobmFtZSA9ICcvJyArIHVybC5wYXRobmFtZTtcbiAgfVxuXG4gIC8vXG4gIC8vIFdlIHNob3VsZCBub3QgYWRkIHBvcnQgbnVtYmVycyBpZiB0aGV5IGFyZSBhbHJlYWR5IHRoZSBkZWZhdWx0IHBvcnQgbnVtYmVyXG4gIC8vIGZvciBhIGdpdmVuIHByb3RvY29sLiBBcyB0aGUgaG9zdCBhbHNvIGNvbnRhaW5zIHRoZSBwb3J0IG51bWJlciB3ZSdyZSBnb2luZ1xuICAvLyBvdmVycmlkZSBpdCB3aXRoIHRoZSBob3N0bmFtZSB3aGljaCBjb250YWlucyBubyBwb3J0IG51bWJlci5cbiAgLy9cbiAgaWYgKCFyZXF1aXJlZCh1cmwucG9ydCwgdXJsLnByb3RvY29sKSkge1xuICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgIHVybC5wb3J0ID0gJyc7XG4gIH1cblxuICAvL1xuICAvLyBQYXJzZSBkb3duIHRoZSBgYXV0aGAgZm9yIHRoZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQuXG4gIC8vXG4gIHVybC51c2VybmFtZSA9IHVybC5wYXNzd29yZCA9ICcnO1xuXG4gIGlmICh1cmwuYXV0aCkge1xuICAgIGluZGV4ID0gdXJsLmF1dGguaW5kZXhPZignOicpO1xuXG4gICAgaWYgKH5pbmRleCkge1xuICAgICAgdXJsLnVzZXJuYW1lID0gdXJsLmF1dGguc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgdXJsLnVzZXJuYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudCh1cmwudXNlcm5hbWUpKTtcblxuICAgICAgdXJsLnBhc3N3b3JkID0gdXJsLmF1dGguc2xpY2UoaW5kZXggKyAxKTtcbiAgICAgIHVybC5wYXNzd29yZCA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLnBhc3N3b3JkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdXJsLnVzZXJuYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudCh1cmwuYXV0aCkpO1xuICAgIH1cblxuICAgIHVybC5hdXRoID0gdXJsLnBhc3N3b3JkID8gdXJsLnVzZXJuYW1lICsnOicrIHVybC5wYXNzd29yZCA6IHVybC51c2VybmFtZTtcbiAgfVxuXG4gIHVybC5vcmlnaW4gPSB1cmwucHJvdG9jb2wgIT09ICdmaWxlOicgJiYgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgJiYgdXJsLmhvc3RcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICAvL1xuICAvLyBUaGUgaHJlZiBpcyBqdXN0IHRoZSBjb21waWxlZCByZXN1bHQuXG4gIC8vXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGNoYW5naW5nIHByb3BlcnRpZXMgaW4gdGhlIFVSTCBpbnN0YW5jZSB0b1xuICogaW5zdXJlIHRoYXQgdGhleSBhbGwgcHJvcGFnYXRlIGNvcnJlY3RseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFydCAgICAgICAgICBQcm9wZXJ0eSB3ZSBuZWVkIHRvIGFkanVzdC5cbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlICAgICAgICAgIFRoZSBuZXdseSBhc3NpZ25lZCB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gZm4gIFdoZW4gc2V0dGluZyB0aGUgcXVlcnksIGl0IHdpbGwgYmUgdGhlIGZ1bmN0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIHRvIHBhcnNlIHRoZSBxdWVyeS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gc2V0dGluZyB0aGUgcHJvdG9jb2wsIGRvdWJsZSBzbGFzaCB3aWxsIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHVybCBpZiBpdCBpcyB0cnVlLlxuICogQHJldHVybnMge1VSTH0gVVJMIGluc3RhbmNlIGZvciBjaGFpbmluZy5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gc2V0KHBhcnQsIHZhbHVlLCBmbikge1xuICB2YXIgdXJsID0gdGhpcztcblxuICBzd2l0Y2ggKHBhcnQpIHtcbiAgICBjYXNlICdxdWVyeSc6XG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSAoZm4gfHwgcXMucGFyc2UpKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BvcnQnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICghcmVxdWlyZWQodmFsdWUsIHVybC5wcm90b2NvbCkpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gICAgICAgIHVybFtwYXJ0XSA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZSArJzonKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdob3N0bmFtZSc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKHVybC5wb3J0KSB2YWx1ZSArPSAnOicrIHVybC5wb3J0O1xuICAgICAgdXJsLmhvc3QgPSB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdCc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKHBvcnQudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgICAgICB1cmwucG9ydCA9IHZhbHVlLnBvcCgpO1xuICAgICAgICB1cmwuaG9zdG5hbWUgPSB2YWx1ZS5qb2luKCc6Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwuaG9zdG5hbWUgPSB2YWx1ZTtcbiAgICAgICAgdXJsLnBvcnQgPSAnJztcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwcm90b2NvbCc6XG4gICAgICB1cmwucHJvdG9jb2wgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdXJsLnNsYXNoZXMgPSAhZm47XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BhdGhuYW1lJzpcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2hhciA9IHBhcnQgPT09ICdwYXRobmFtZScgPyAnLycgOiAnIyc7XG4gICAgICAgIHVybFtwYXJ0XSA9IHZhbHVlLmNoYXJBdCgwKSAhPT0gY2hhciA/IGNoYXIgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3VzZXJuYW1lJzpcbiAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICB1cmxbcGFydF0gPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdhdXRoJzpcbiAgICAgIHZhciBpbmRleCA9IHZhbHVlLmluZGV4T2YoJzonKTtcblxuICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICB1cmwudXNlcm5hbWUgPSB2YWx1ZS5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIHVybC51c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLnVzZXJuYW1lKSk7XG5cbiAgICAgICAgdXJsLnBhc3N3b3JkID0gdmFsdWUuc2xpY2UoaW5kZXggKyAxKTtcbiAgICAgICAgdXJsLnBhc3N3b3JkID0gZW5jb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudCh1cmwucGFzc3dvcmQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybC51c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zID0gcnVsZXNbaV07XG5cbiAgICBpZiAoaW5zWzRdKSB1cmxbaW5zWzFdXSA9IHVybFtpbnNbMV1dLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICB1cmwuYXV0aCA9IHVybC5wYXNzd29yZCA/IHVybC51c2VybmFtZSArJzonKyB1cmwucGFzc3dvcmQgOiB1cmwudXNlcm5hbWU7XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJiBpc1NwZWNpYWwodXJsLnByb3RvY29sKSAmJiB1cmwuaG9zdFxuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgYmFjayBpbiB0byBhIHZhbGlkIGFuZCBmdWxsIFVSTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5naWZ5IE9wdGlvbmFsIHF1ZXJ5IHN0cmluZ2lmeSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IENvbXBpbGVkIHZlcnNpb24gb2YgdGhlIFVSTC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoc3RyaW5naWZ5KSB7XG4gIGlmICghc3RyaW5naWZ5IHx8ICdmdW5jdGlvbicgIT09IHR5cGVvZiBzdHJpbmdpZnkpIHN0cmluZ2lmeSA9IHFzLnN0cmluZ2lmeTtcblxuICB2YXIgcXVlcnlcbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIGhvc3QgPSB1cmwuaG9zdFxuICAgICwgcHJvdG9jb2wgPSB1cmwucHJvdG9jb2w7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLmNoYXJBdChwcm90b2NvbC5sZW5ndGggLSAxKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgdmFyIHJlc3VsdCA9XG4gICAgcHJvdG9jb2wgK1xuICAgICgodXJsLnByb3RvY29sICYmIHVybC5zbGFzaGVzKSB8fCBpc1NwZWNpYWwodXJsLnByb3RvY29sKSA/ICcvLycgOiAnJyk7XG5cbiAgaWYgKHVybC51c2VybmFtZSkge1xuICAgIHJlc3VsdCArPSB1cmwudXNlcm5hbWU7XG4gICAgaWYgKHVybC5wYXNzd29yZCkgcmVzdWx0ICs9ICc6JysgdXJsLnBhc3N3b3JkO1xuICAgIHJlc3VsdCArPSAnQCc7XG4gIH0gZWxzZSBpZiAodXJsLnBhc3N3b3JkKSB7XG4gICAgcmVzdWx0ICs9ICc6JysgdXJsLnBhc3N3b3JkO1xuICAgIHJlc3VsdCArPSAnQCc7XG4gIH0gZWxzZSBpZiAoXG4gICAgdXJsLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgJiZcbiAgICAhaG9zdCAmJlxuICAgIHVybC5wYXRobmFtZSAhPT0gJy8nXG4gICkge1xuICAgIC8vXG4gICAgLy8gQWRkIGJhY2sgdGhlIGVtcHR5IHVzZXJpbmZvLCBvdGhlcndpc2UgdGhlIG9yaWdpbmFsIGludmFsaWQgVVJMXG4gICAgLy8gbWlnaHQgYmUgdHJhbnNmb3JtZWQgaW50byBhIHZhbGlkIG9uZSB3aXRoIGB1cmwucGF0aG5hbWVgIGFzIGhvc3QuXG4gICAgLy9cbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9XG5cbiAgLy9cbiAgLy8gVHJhaWxpbmcgY29sb24gaXMgcmVtb3ZlZCBmcm9tIGB1cmwuaG9zdGAgd2hlbiBpdCBpcyBwYXJzZWQuIElmIGl0IHN0aWxsXG4gIC8vIGVuZHMgd2l0aCBhIGNvbG9uLCB0aGVuIGFkZCBiYWNrIHRoZSB0cmFpbGluZyBjb2xvbiB0aGF0IHdhcyByZW1vdmVkLiBUaGlzXG4gIC8vIHByZXZlbnRzIGFuIGludmFsaWQgVVJMIGZyb20gYmVpbmcgdHJhbnNmb3JtZWQgaW50byBhIHZhbGlkIG9uZS5cbiAgLy9cbiAgaWYgKGhvc3RbaG9zdC5sZW5ndGggLSAxXSA9PT0gJzonIHx8IChwb3J0LnRlc3QodXJsLmhvc3RuYW1lKSAmJiAhdXJsLnBvcnQpKSB7XG4gICAgaG9zdCArPSAnOic7XG4gIH1cblxuICByZXN1bHQgKz0gaG9zdCArIHVybC5wYXRobmFtZTtcblxuICBxdWVyeSA9ICdvYmplY3QnID09PSB0eXBlb2YgdXJsLnF1ZXJ5ID8gc3RyaW5naWZ5KHVybC5xdWVyeSkgOiB1cmwucXVlcnk7XG4gIGlmIChxdWVyeSkgcmVzdWx0ICs9ICc/JyAhPT0gcXVlcnkuY2hhckF0KDApID8gJz8nKyBxdWVyeSA6IHF1ZXJ5O1xuXG4gIGlmICh1cmwuaGFzaCkgcmVzdWx0ICs9IHVybC5oYXNoO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cblVybC5wcm90b3R5cGUgPSB7IHNldDogc2V0LCB0b1N0cmluZzogdG9TdHJpbmcgfTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgVVJMIHBhcnNlciBhbmQgc29tZSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdGhhdCBtaWdodCBiZSB1c2VmdWwgZm9yXG4vLyBvdGhlcnMgb3IgdGVzdGluZy5cbi8vXG5VcmwuZXh0cmFjdFByb3RvY29sID0gZXh0cmFjdFByb3RvY29sO1xuVXJsLmxvY2F0aW9uID0gbG9sY2F0aW9uO1xuVXJsLnRyaW1MZWZ0ID0gdHJpbUxlZnQ7XG5VcmwucXMgPSBxcztcblxubW9kdWxlLmV4cG9ydHMgPSBVcmw7XG4iLCIvLyBUaGUgcmVnZW5lcmF0b3IgcnVudGltZSBpcyBuZWVkZWQgc2luY2UgdGhlIHRlc3QgdXNlIGZ1bmN0aW9uc1xuLy8gd2l0aCB0aGUgYXN5bmMvYXdhaXQga2V5d29yZHMuIFNlZVxuLy8gaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1yZWdlbmVyYXRvclxucmVxdWlyZSgncmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lJylcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIC8vIENsZWFyIGxvY2FsU3RvcmFnZSBiZWZvcmUgZXZlcnkgdGVzdCB0byBwcmV2ZW50IHN0b3JlZCBVUkxzIHRvXG4gIC8vIGludGVyZmVyZSB3aXRoIG91ciBzZXR1cC5cbiAgbG9jYWxTdG9yYWdlLmNsZWFyKClcbn0pXG5cbnJlcXVpcmUoJy4vdGVzdC1jb21tb24nKVxucmVxdWlyZSgnLi90ZXN0LWJyb3dzZXItc3BlY2lmaWMnKVxucmVxdWlyZSgnLi90ZXN0LXBhcmFsbGVsLXVwbG9hZHMnKVxucmVxdWlyZSgnLi90ZXN0LXRlcm1pbmF0ZScpXG5yZXF1aXJlKCcuL3Rlc3QtZW5kLXRvLWVuZCcpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uIGFzc2VydFVybFN0b3JhZ2UodXJsU3RvcmFnZSkge1xuICAvLyBJbiB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0ZXN0LCB0aGUgc3RvcmFnZSBzaG91bGQgYmUgZW1wdHkuXG4gIGxldCByZXN1bHQgPSBhd2FpdCB1cmxTdG9yYWdlLmZpbmRBbGxVcGxvYWRzKClcbiAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbXSlcblxuICAvLyBBZGQgYSBmZXcgdXBsb2FkcyBpbnRvIHRoZSBzdG9yYWdlXG4gIGNvbnN0IGtleTEgPSBhd2FpdCB1cmxTdG9yYWdlLmFkZFVwbG9hZCgnZmluZ2VycHJpbnRBJywgeyBpZDogMSB9KVxuICBjb25zdCBrZXkyID0gYXdhaXQgdXJsU3RvcmFnZS5hZGRVcGxvYWQoJ2ZpbmdlcnByaW50QScsIHsgaWQ6IDIgfSlcbiAgY29uc3Qga2V5MyA9IGF3YWl0IHVybFN0b3JhZ2UuYWRkVXBsb2FkKCdmaW5nZXJwcmludEInLCB7IGlkOiAzIH0pXG5cbiAgZXhwZWN0KC9edHVzOjpmaW5nZXJwcmludEE6Oi8udGVzdChrZXkxKSkudG9CZSh0cnVlKVxuICBleHBlY3QoL150dXM6OmZpbmdlcnByaW50QTo6Ly50ZXN0KGtleTIpKS50b0JlKHRydWUpXG4gIGV4cGVjdCgvXnR1czo6ZmluZ2VycHJpbnRCOjovLnRlc3Qoa2V5MykpLnRvQmUodHJ1ZSlcblxuICAvLyBRdWVyeSB0aGUganVzdCBzdG9yZWQgdXBsb2FkcyBpbmRpdmlkdWFsbHlcbiAgcmVzdWx0ID0gYXdhaXQgdXJsU3RvcmFnZS5maW5kVXBsb2Fkc0J5RmluZ2VycHJpbnQoJ2ZpbmdlcnByaW50QScpXG4gIHNvcnQocmVzdWx0KVxuICBleHBlY3QocmVzdWx0KS50b0VxdWFsKFtcbiAgICB7IGlkOiAxLCB1cmxTdG9yYWdlS2V5OiBrZXkxIH0sXG4gICAgeyBpZDogMiwgdXJsU3RvcmFnZUtleToga2V5MiB9LFxuICBdKVxuXG4gIHJlc3VsdCA9IGF3YWl0IHVybFN0b3JhZ2UuZmluZFVwbG9hZHNCeUZpbmdlcnByaW50KCdmaW5nZXJwcmludEInKVxuICBzb3J0KHJlc3VsdClcbiAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbeyBpZDogMywgdXJsU3RvcmFnZUtleToga2V5MyB9XSlcblxuICAvLyBDaGVjayB0aGF0IHdlIGNhbiByZXRyaWV2ZSBhbGwgc3RvcmVkIHVwbG9hZHNcbiAgcmVzdWx0ID0gYXdhaXQgdXJsU3RvcmFnZS5maW5kQWxsVXBsb2FkcygpXG4gIHNvcnQocmVzdWx0KVxuICBleHBlY3QocmVzdWx0KS50b0VxdWFsKFtcbiAgICB7IGlkOiAxLCB1cmxTdG9yYWdlS2V5OiBrZXkxIH0sXG4gICAgeyBpZDogMiwgdXJsU3RvcmFnZUtleToga2V5MiB9LFxuICAgIHsgaWQ6IDMsIHVybFN0b3JhZ2VLZXk6IGtleTMgfSxcbiAgXSlcblxuICAvLyBDaGVjayB0aGF0IGl0IGNhbiByZW1vdmUgYW4gdXBsb2FkIGFuZCB3aWxsIG5vdCByZXR1cm4gaXQgYmFja1xuICBhd2FpdCB1cmxTdG9yYWdlLnJlbW92ZVVwbG9hZChrZXkyKVxuICBhd2FpdCB1cmxTdG9yYWdlLnJlbW92ZVVwbG9hZChrZXkzKVxuXG4gIHJlc3VsdCA9IGF3YWl0IHVybFN0b3JhZ2UuZmluZFVwbG9hZHNCeUZpbmdlcnByaW50KCdmaW5nZXJwcmludEEnKVxuICBleHBlY3QocmVzdWx0KS50b0VxdWFsKFt7IGlkOiAxLCB1cmxTdG9yYWdlS2V5OiBrZXkxIH1dKVxuXG4gIHJlc3VsdCA9IGF3YWl0IHVybFN0b3JhZ2UuZmluZFVwbG9hZHNCeUZpbmdlcnByaW50KCdmaW5nZXJwcmludEInKVxuICBleHBlY3QocmVzdWx0KS50b0VxdWFsKFtdKVxufVxuXG4vLyBTb3J0IHRoZSByZXN1bHRzIGZyb20gdGhlIFVSTCBzdG9yYWdlIHNpbmNlIHRoZSBvcmRlciBpbiBub3QgZGV0ZXJtaW5pc3RpYy5cbmZ1bmN0aW9uIHNvcnQocmVzdWx0KSB7XG4gIHJlc3VsdC5zb3J0KChhLCBiKSA9PiBhLmlkIC0gYi5pZClcbn1cbiIsImNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG5jb25zdCBpc05vZGUgPSAhaXNCcm93c2VyXG5cbi8qKlxuICogT2J0YWluIGEgcGxhdGZvcm0gc3BlY2lmaWMgYnVmZmVyIG9iamVjdCwgd2hpY2ggY2FuIGJlXG4gKiBoYW5kbGVkIGJ5IHR1cy1qcy1jbGllbnQuXG4gKi9cbmZ1bmN0aW9uIGdldEJsb2Ioc3RyKSB7XG4gIGlmIChpc05vZGUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyKVxuICB9XG4gIHJldHVybiBuZXcgQmxvYihzdHIuc3BsaXQoJycpKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHByb21pc2UgYW5kIG9idGFpbiB0aGUgcmVzb2x2ZS9yZWplY3QgZnVuY3Rpb25zXG4gKiBvdXRzaWRlIG9mIHRoZSBQcm9taXNlIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBmbGF0UHJvbWlzZSgpIHtcbiAgbGV0IHJlc29sdmVGblxuICBsZXQgcmVqZWN0Rm5cbiAgY29uc3QgcCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZXNvbHZlRm4gPSByZXNvbHZlXG4gICAgcmVqZWN0Rm4gPSByZWplY3RcbiAgfSlcblxuICByZXR1cm4gW3AsIHJlc29sdmVGbiwgcmVqZWN0Rm5dXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgc3B5LWFibGUgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgYSBQcm9taXNlXG4gKiBvbmNlIGl0IGlzIGNhbGxlZC5cbiAqL1xuZnVuY3Rpb24gd2FpdGFibGVGdW5jdGlvbihuYW1lID0gJ2Z1bmMnKSB7XG4gIGNvbnN0IFtwcm9taXNlLCByZXNvbHZlXSA9IGZsYXRQcm9taXNlKClcbiAgY29uc3QgZm4gPSBqYXNtaW5lLmNyZWF0ZVNweShuYW1lLCByZXNvbHZlKS5hbmQuY2FsbFRocm91Z2goKVxuXG4gIGZuLnRvQmVDYWxsZWQgPSBwcm9taXNlXG4gIHJldHVybiBmblxufVxuXG4vKipcbiAqIENyZWF0ZSBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciB0aGUgc3BlY2lmaWVkIGR1cmF0aW9uLlxuICovXG5mdW5jdGlvbiB3YWl0KGRlbGF5KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSwgJ3RpbWVkIG91dCcpKVxufVxuXG4vKipcbiAqIFRlc3RIdHRwU3RhY2sgaW1wbGVtZW50cyB0aGUgSFRUUCBzdGFjayBpbnRlcmZhY2UgZm9yIHR1cy1qcy1jbGllbnRcbiAqIGFuZCBjYW4gYmUgdXNlZCB0byBhc3NlcnQgb3V0Z29pbmcgcmVxdWVzdHMgYW5kIHJlc3BvbmQgd2l0aCBtb2NrIGRhdGEuXG4gKi9cbmNsYXNzIFRlc3RIdHRwU3RhY2sge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHMgPSBbXVxuICAgIHRoaXMuX3BlbmRpbmdXYWl0cyA9IFtdXG4gIH1cblxuICBjcmVhdGVSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gICAgcmV0dXJuIG5ldyBUZXN0UmVxdWVzdChtZXRob2QsIHVybCwgKHJlcSkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3BlbmRpbmdXYWl0cy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5fcGVuZGluZ1dhaXRzLnNoaWZ0KClcbiAgICAgICAgaGFuZGxlcihyZXEpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHMucHVzaChyZXEpXG4gICAgfSlcbiAgfVxuXG4gIG5leHRSZXF1ZXN0KCkge1xuICAgIGlmICh0aGlzLl9wZW5kaW5nUmVxdWVzdHMubGVuZ3RoID49IDEpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fcGVuZGluZ1JlcXVlc3RzLnNoaWZ0KCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLl9wZW5kaW5nV2FpdHMucHVzaChyZXNvbHZlKVxuICAgIH0pXG4gIH1cbn1cblxuY2xhc3MgVGVzdFJlcXVlc3Qge1xuICBjb25zdHJ1Y3RvcihtZXRob2QsIHVybCwgb25SZXF1ZXN0U2VuZCkge1xuICAgIHRoaXMubWV0aG9kID0gbWV0aG9kXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgICB0aGlzLnJlcXVlc3RIZWFkZXJzID0ge31cbiAgICB0aGlzLmJvZHkgPSBudWxsXG5cbiAgICB0aGlzLl9vblJlcXVlc3RTZW5kID0gb25SZXF1ZXN0U2VuZFxuICAgIHRoaXMuX29uUHJvZ3Jlc3MgPSAoKSA9PiB7fVxuICAgIDtbdGhpcy5fcmVxdWVzdFByb21pc2UsIHRoaXMuX3Jlc29sdmVSZXF1ZXN0LCB0aGlzLl9yZWplY3RSZXF1ZXN0XSA9IGZsYXRQcm9taXNlKClcbiAgfVxuXG4gIGdldE1ldGhvZCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRob2RcbiAgfVxuXG4gIGdldFVSTCgpIHtcbiAgICByZXR1cm4gdGhpcy51cmxcbiAgfVxuXG4gIHNldEhlYWRlcihoZWFkZXIsIHZhbHVlKSB7XG4gICAgdGhpcy5yZXF1ZXN0SGVhZGVyc1toZWFkZXJdID0gdmFsdWVcbiAgfVxuXG4gIGdldEhlYWRlcihoZWFkZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0SGVhZGVyc1toZWFkZXJdIHx8IG51bGxcbiAgfVxuXG4gIHNldFByb2dyZXNzSGFuZGxlcihwcm9ncmVzc0hhbmRsZXIpIHtcbiAgICB0aGlzLl9vblByb2dyZXNzID0gcHJvZ3Jlc3NIYW5kbGVyXG4gIH1cblxuICBzZW5kKGJvZHkgPSBudWxsKSB7XG4gICAgdGhpcy5ib2R5ID0gYm9keVxuXG4gICAgaWYgKGJvZHkpIHtcbiAgICAgIHRoaXMuX29uUHJvZ3Jlc3MoMClcbiAgICAgIHRoaXMuX29uUHJvZ3Jlc3MoYm9keS5sZW5ndGggfHwgYm9keS5zaXplIHx8IDApXG4gICAgfVxuXG4gICAgdGhpcy5fb25SZXF1ZXN0U2VuZCh0aGlzKVxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0UHJvbWlzZVxuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5fcmVqZWN0UmVxdWVzdChuZXcgRXJyb3IoJ3JlcXVlc3QgYWJvcnRlZCcpKVxuICB9XG5cbiAgZ2V0VW5kZXJseWluZ09iamVjdCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gIH1cblxuICByZXNwb25kV2l0aChyZXNEYXRhKSB7XG4gICAgcmVzRGF0YS5yZXNwb25zZUhlYWRlcnMgPSByZXNEYXRhLnJlc3BvbnNlSGVhZGVycyB8fCB7fVxuXG4gICAgY29uc3QgcmVzID0gbmV3IFRlc3RSZXNwb25zZShyZXNEYXRhKVxuICAgIHRoaXMuX3Jlc29sdmVSZXF1ZXN0KHJlcylcbiAgfVxuXG4gIHJlc3BvbnNlRXJyb3IoZXJyKSB7XG4gICAgdGhpcy5fcmVqZWN0UmVxdWVzdChlcnIpXG4gIH1cbn1cblxuY2xhc3MgVGVzdFJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IocmVzKSB7XG4gICAgdGhpcy5fcmVzcG9uc2UgPSByZXNcbiAgfVxuXG4gIGdldFN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzcG9uc2Uuc3RhdHVzXG4gIH1cblxuICBnZXRIZWFkZXIoaGVhZGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlLnJlc3BvbnNlSGVhZGVyc1toZWFkZXJdXG4gIH1cblxuICBnZXRCb2R5KCkge1xuICAgIHJldHVybiB0aGlzLl9yZXNwb25zZS5yZXNwb25zZVRleHRcbiAgfVxuXG4gIGdldFVuZGVybHlpbmdPYmplY3QoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBUZXN0SHR0cFN0YWNrLFxuICBUZXN0UmVzcG9uc2UsXG4gIHdhaXRhYmxlRnVuY3Rpb24sXG4gIHdhaXQsXG4gIGdldEJsb2IsXG59XG4iLCJjb25zdCBhc3NlcnRVcmxTdG9yYWdlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2Fzc2VydFVybFN0b3JhZ2UnKVxuY29uc3QgeyBUZXN0SHR0cFN0YWNrLCB3YWl0YWJsZUZ1bmN0aW9uLCB3YWl0IH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvdXRpbHMnKVxuY29uc3QgdHVzID0gcmVxdWlyZSgnLi4vLi4nKVxuXG5kZXNjcmliZSgndHVzJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKVxuICB9KVxuXG4gIGRlc2NyaWJlKCcjVXBsb2FkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmVzdW1lIGFuIHVwbG9hZCBmcm9tIGEgc3RvcmVkIHVybCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAndHVzOjpmaW5nZXJwcmludGVkOjoxMzM3JyxcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHVwbG9hZFVybDogJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9yZXN1bWluZycsXG4gICAgICAgIH0pLFxuICAgICAgKVxuXG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBmaWxlID0gbmV3IEJsb2IoJ2hlbGxvIHdvcmxkJy5zcGxpdCgnJykpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICBvblByb2dyZXNzKCkge30sXG4gICAgICAgIGZpbmdlcnByaW50KCkge30sXG4gICAgICB9XG4gICAgICBzcHlPbihvcHRpb25zLCAnZmluZ2VycHJpbnQnKS5hbmQucmVzb2x2ZVRvKCdmaW5nZXJwcmludGVkJylcbiAgICAgIHNweU9uKG9wdGlvbnMsICdvblByb2dyZXNzJylcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcblxuICAgICAgY29uc3QgcHJldmlvdXNVcGxvYWRzID0gYXdhaXQgdXBsb2FkLmZpbmRQcmV2aW91c1VwbG9hZHMoKVxuICAgICAgZXhwZWN0KHByZXZpb3VzVXBsb2FkcykudG9FcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICB1cGxvYWRVcmw6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMvcmVzdW1pbmcnLFxuICAgICAgICAgIHVybFN0b3JhZ2VLZXk6ICd0dXM6OmZpbmdlcnByaW50ZWQ6OjEzMzcnLFxuICAgICAgICB9LFxuICAgICAgXSlcbiAgICAgIHVwbG9hZC5yZXN1bWVGcm9tUHJldmlvdXNVcGxvYWQocHJldmlvdXNVcGxvYWRzWzBdKVxuXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBleHBlY3Qob3B0aW9ucy5maW5nZXJwcmludCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZmlsZSwgdXBsb2FkLm9wdGlvbnMpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9yZXN1bWluZycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogMTEsXG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAzLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvcmVzdW1pbmcnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU9mZnNldCddKS50b0JlKCczJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJylcbiAgICAgIGV4cGVjdChyZXEuYm9keS5zaXplKS50b0JlKDExIC0gMylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMTEsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICBleHBlY3QodXBsb2FkLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL3Jlc3VtaW5nJylcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uUHJvZ3Jlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDExLCAxMSlcbiAgICB9KVxuXG4gICAgZGVzY3JpYmUoJ3N0b3Jpbmcgb2YgdXBsb2FkIHVybHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICBmaW5nZXJwcmludCgpIHt9LFxuICAgICAgfVxuXG4gICAgICBhc3luYyBmdW5jdGlvbiBzdGFydFVwbG9hZCgpIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IG5ldyBCbG9iKCdoZWxsbyB3b3JsZCcuc3BsaXQoJycpKVxuICAgICAgICBzcHlPbihvcHRpb25zLCAnZmluZ2VycHJpbnQnKS5hbmQucmVzb2x2ZVRvKCdmaW5nZXJwcmludGVkJylcbiAgICAgICAgb3B0aW9ucy5vblN1Y2Nlc3MgPSB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKVxuXG4gICAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgICAgZXhwZWN0KG9wdGlvbnMuZmluZ2VycHJpbnQpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuXG4gICAgICAgIGNvbnN0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMnKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG5cbiAgICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAgIExvY2F0aW9uOiAnL3VwbG9hZHMvYmxhcmdoJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIFdhaXQgYSBzaG9ydCBkZWxheSB0byBhbGxvdyB0aGUgUHJvbWlzZXMgdG8gc2V0dGxlXG4gICAgICAgIGF3YWl0IHdhaXQoMTApXG4gICAgICB9XG5cbiAgICAgIGFzeW5jIGZ1bmN0aW9uIGZpbmlzaFVwbG9hZCgpIHtcbiAgICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIHN0b3JlIGFuZCByZXRhaW4gd2l0aCBkZWZhdWx0IG9wdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlRmluZ2VycHJpbnRPblN1Y2Nlc3MgPSBmYWxzZVxuICAgICAgICBhd2FpdCBzdGFydFVwbG9hZCgpXG5cbiAgICAgICAgY29uc3Qga2V5ID0gbG9jYWxTdG9yYWdlLmtleSgwKVxuICAgICAgICBleHBlY3Qoa2V5LmluZGV4T2YoJ3R1czo6ZmluZ2VycHJpbnRlZDo6JykpLnRvQmUoMClcblxuICAgICAgICBjb25zdCBzdG9yZWRVcGxvYWQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpXG4gICAgICAgIGV4cGVjdChzdG9yZWRVcGxvYWQudXBsb2FkVXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJylcbiAgICAgICAgZXhwZWN0KHN0b3JlZFVwbG9hZC5zaXplKS50b0JlKDExKVxuXG4gICAgICAgIGF3YWl0IGZpbmlzaFVwbG9hZCgpXG5cbiAgICAgICAgZXhwZWN0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpLnRvQmUoSlNPTi5zdHJpbmdpZnkoc3RvcmVkVXBsb2FkKSlcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgc3RvcmUgYW5kIHJlbW92ZSB3aXRoIG9wdGlvbiByZW1vdmVGaW5nZXJwcmludE9uU3VjY2VzcyBzZXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlRmluZ2VycHJpbnRPblN1Y2Nlc3MgPSB0cnVlXG4gICAgICAgIGF3YWl0IHN0YXJ0VXBsb2FkKClcblxuICAgICAgICBjb25zdCBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KDApXG4gICAgICAgIGV4cGVjdChrZXkuaW5kZXhPZigndHVzOjpmaW5nZXJwcmludGVkOjonKSkudG9CZSgwKVxuXG4gICAgICAgIGNvbnN0IHN0b3JlZFVwbG9hZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSlcbiAgICAgICAgZXhwZWN0KHN0b3JlZFVwbG9hZC51cGxvYWRVcmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgICBleHBlY3Qoc3RvcmVkVXBsb2FkLnNpemUpLnRvQmUoMTEpXG5cbiAgICAgICAgYXdhaXQgZmluaXNoVXBsb2FkKClcbiAgICAgICAgZXhwZWN0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpLnRvQmUobnVsbClcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgc3RvcmUgVVJMcyBwYXNzZWQgaW4gdXNpbmcgdGhlIHVwbG9hZFVybCBvcHRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBuZXcgQmxvYignaGVsbG8gd29ybGQnLnNwbGl0KCcnKSlcbiAgICAgICAgY29uc3Qgb3B0aW9uczIgPSB7XG4gICAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgICAgdXBsb2FkVXJsOiAnaHR0cDovL3R1cy5pby91cGxvYWRzL3N0b3JlZFVybCcsXG4gICAgICAgICAgZmluZ2VycHJpbnQoKSB7fSxcbiAgICAgICAgICBvblN1Y2Nlc3M6IHdhaXRhYmxlRnVuY3Rpb24oJ29uU3VjY2VzcycpLFxuICAgICAgICAgIHJlbW92ZUZpbmdlcnByaW50T25TdWNjZXNzOiB0cnVlLFxuICAgICAgICB9XG4gICAgICAgIHNweU9uKG9wdGlvbnMyLCAnZmluZ2VycHJpbnQnKS5hbmQucmVzb2x2ZVRvKCdmaW5nZXJwcmludGVkJylcblxuICAgICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zMilcbiAgICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgICBleHBlY3Qob3B0aW9uczIuZmluZ2VycHJpbnQpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuXG4gICAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL3N0b3JlZFVybCcpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdIRUFEJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG5cbiAgICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogMTEsXG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDMsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBXYWl0IGEgc2hvcnQgZGVsYXkgdG8gYWxsb3cgdGhlIFByb21pc2VzIHRvIHNldHRsZVxuICAgICAgICBhd2FpdCB3YWl0KDEwKVxuXG4gICAgICAgIGNvbnN0IGtleSA9IGxvY2FsU3RvcmFnZS5rZXkoMClcbiAgICAgICAgZXhwZWN0KGtleS5pbmRleE9mKCd0dXM6OmZpbmdlcnByaW50ZWQ6OicpKS50b0JlKDApXG5cbiAgICAgICAgY29uc3Qgc3RvcmVkVXBsb2FkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKVxuICAgICAgICBleHBlY3Qoc3RvcmVkVXBsb2FkLnVwbG9hZFVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL3N0b3JlZFVybCcpXG4gICAgICAgIGV4cGVjdChzdG9yZWRVcGxvYWQuc2l6ZSkudG9CZSgxMSlcblxuICAgICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL3N0b3JlZFVybCcpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG4gICAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzMnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICAgIGV4cGVjdChyZXEuYm9keS5zaXplKS50b0JlKDExIC0gMylcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIGF3YWl0IG9wdGlvbnMyLm9uU3VjY2Vzcy50b0JlQ2FsbGVkXG5cbiAgICAgICAgLy8gRW50cnkgaW4gbG9jYWxTdG9yYWdlIHNob3VsZCBiZSByZW1vdmVkIGFmdGVyIHN1Y2Nlc3NmdWwgdXBsb2FkXG4gICAgICAgIGV4cGVjdChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKS50b0JlKG51bGwpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGRlbGV0ZSB1cGxvYWQgdXJscyBvbiBhIDRYWCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBuZXcgQmxvYignaGVsbG8gd29ybGQnLnNwbGl0KCcnKSlcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vdXBsb2FkcycsXG4gICAgICAgIGZpbmdlcnByaW50KCkge30sXG4gICAgICB9XG4gICAgICBzcHlPbihvcHRpb25zLCAnZmluZ2VycHJpbnQnKS5hbmQucmVzb2x2ZVRvKCdmaW5nZXJwcmludGVkJylcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcblxuICAgICAgdXBsb2FkLnJlc3VtZUZyb21QcmV2aW91c1VwbG9hZCh7XG4gICAgICAgIHVwbG9hZFVybDogJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9yZXN1bWluZycsXG4gICAgICAgIHVybFN0b3JhZ2VLZXk6ICd0dXM6OmZpbmdlcnByaW50ZWQ6OjEzMzcnLFxuICAgICAgfSlcblxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvcmVzdW1pbmcnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0hFQUQnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IHdhaXQoMTApXG5cbiAgICAgIGV4cGVjdChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndHVzOjpmaW5nZXJwcmludGVkOjoxMzM3JykpLnRvQmUobnVsbClcbiAgICB9KVxuXG4gICAgZGVzY3JpYmUoJ3VwbG9hZGluZyBkYXRhIGZyb20gYSBSZWFkZXInLCAoKSA9PiB7XG4gICAgICBmdW5jdGlvbiBtYWtlUmVhZGVyKGNvbnRlbnQsIHJlYWRTaXplID0gY29udGVudC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0ge1xuICAgICAgICAgIHZhbHVlOiBjb250ZW50LnNwbGl0KCcnKSxcbiAgICAgICAgICByZWFkKCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlXG4gICAgICAgICAgICBsZXQgZG9uZSA9IGZhbHNlXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZS5zbGljZSgwLCByZWFkU2l6ZSlcbiAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuc2xpY2UocmVhZFNpemUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkb25lID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHZhbHVlLCBkb25lIH0pXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjYW5jZWw6IHdhaXRhYmxlRnVuY3Rpb24oJ2NhbmNlbCcpLFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlYWRlclxuICAgICAgfVxuXG4gICAgICBhc3luYyBmdW5jdGlvbiBhc3NlcnRSZWFkZXJVcGxvYWQoeyByZWFkU2l6ZSwgY2h1bmtTaXplIH0pIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbWFrZVJlYWRlcignaGVsbG8gd29ybGQnLCByZWFkU2l6ZSlcblxuICAgICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICAgIGNodW5rU2l6ZSxcbiAgICAgICAgICBvblByb2dyZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblByb2dyZXNzJyksXG4gICAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgICAgICBmaW5nZXJwcmludCgpIHt9LFxuICAgICAgICAgIHVwbG9hZExlbmd0aERlZmVycmVkOiB0cnVlLFxuICAgICAgICB9XG4gICAgICAgIHNweU9uKG9wdGlvbnMsICdmaW5nZXJwcmludCcpLmFuZC5yZXNvbHZlVG8oJ2ZpbmdlcnByaW50ZWQnKVxuXG4gICAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKHJlYWRlciwgb3B0aW9ucylcbiAgICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgICBleHBlY3Qob3B0aW9ucy5maW5nZXJwcmludCkudG9IYXZlQmVlbkNhbGxlZFdpdGgocmVhZGVyLCB1cGxvYWQub3B0aW9ucylcblxuICAgICAgICBsZXQgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlKHVuZGVmaW5lZClcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLURlZmVyLUxlbmd0aCddKS50b0JlKCcxJylcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgTG9jYXRpb246ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU9mZnNldCddKS50b0JlKCcwJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ10pLnRvQmUoJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nKVxuICAgICAgICBleHBlY3QocmVxLmJvZHkubGVuZ3RoKS50b0JlKDExKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgb3B0aW9ucy5vblByb2dyZXNzLnRvQmVDYWxsZWRcbiAgICAgICAgZXhwZWN0KG9wdGlvbnMub25Qcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoMTEsIG51bGwpXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzExJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlKCcxMScpXG4gICAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJylcbiAgICAgICAgZXhwZWN0KHJlcS5ib2R5KS50b0JlKG51bGwpXG5cbiAgICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMTEsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICBhd2FpdCBvcHRpb25zLm9uU3VjY2Vzcy50b0JlQ2FsbGVkXG4gICAgICAgIGV4cGVjdCh1cGxvYWQudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJylcbiAgICAgICAgZXhwZWN0KG9wdGlvbnMub25Qcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoMTEsIDExKVxuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIHVwbG9hZCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBhc3NlcnRSZWFkZXJVcGxvYWQoeyBjaHVua1NpemU6IDEwMCwgcmVhZFNpemU6IDEwMCB9KVxuICAgICAgfSlcblxuICAgICAgaXQoJ3Nob3VsZCByZWFkIG11bHRpcGxlIHRpbWVzIGZyb20gdGhlIHJlYWRlcicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgYXNzZXJ0UmVhZGVyVXBsb2FkKHsgY2h1bmtTaXplOiAxMDAsIHJlYWRTaXplOiA2IH0pXG4gICAgICB9KVxuXG4gICAgICBpdCgnc2hvdWxkIHVzZSBtdWx0aXBsZSBQQVRDSCByZXF1ZXN0cycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbWFrZVJlYWRlcignaGVsbG8gd29ybGQnLCAxKVxuXG4gICAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vdXBsb2FkcycsXG4gICAgICAgICAgY2h1bmtTaXplOiA2LFxuICAgICAgICAgIG9uUHJvZ3Jlc3M6IHdhaXRhYmxlRnVuY3Rpb24oJ29uUHJvZ3Jlc3MnKSxcbiAgICAgICAgICBvblN1Y2Nlc3M6IHdhaXRhYmxlRnVuY3Rpb24oJ29uU3VjY2VzcycpLFxuICAgICAgICAgIGZpbmdlcnByaW50KCkge30sXG4gICAgICAgICAgdXBsb2FkTGVuZ3RoRGVmZXJyZWQ6IHRydWUsXG4gICAgICAgIH1cbiAgICAgICAgc3B5T24ob3B0aW9ucywgJ2ZpbmdlcnByaW50JykuYW5kLnJlc29sdmVUbygnZmluZ2VycHJpbnRlZCcpXG5cbiAgICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQocmVhZGVyLCBvcHRpb25zKVxuICAgICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICAgIGV4cGVjdChvcHRpb25zLmZpbmdlcnByaW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChyZWFkZXIsIHVwbG9hZC5vcHRpb25zKVxuXG4gICAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtTGVuZ3RoJ10pLnRvQmUodW5kZWZpbmVkKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtRGVmZXItTGVuZ3RoJ10pLnRvQmUoJzEnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICBMb2NhdGlvbjogJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzAnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICAgIGV4cGVjdChyZXEuYm9keS5sZW5ndGgpLnRvQmUoNilcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiA2LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgb3B0aW9ucy5vblByb2dyZXNzLnRvQmVDYWxsZWRcbiAgICAgICAgZXhwZWN0KG9wdGlvbnMub25Qcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoNiwgbnVsbClcblxuICAgICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL2JsYXJnaCcpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG4gICAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzYnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICAgIGV4cGVjdChyZXEuYm9keS5sZW5ndGgpLnRvQmUoNSlcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU9mZnNldCddKS50b0JlKCcxMScpXG4gICAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZSgnMTEnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICAgIGV4cGVjdChyZXEuYm9keSkudG9CZShudWxsKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuICAgICAgICBleHBlY3QodXBsb2FkLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL2JsYXJnaCcpXG4gICAgICAgIGV4cGVjdChvcHRpb25zLm9uUHJvZ3Jlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDExLCAxMSlcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgcmV0cnkgdGhlIFBPU1QgcmVxdWVzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbWFrZVJlYWRlcignaGVsbG8gd29ybGQnLCAxKVxuXG4gICAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJyxcbiAgICAgICAgICBjaHVua1NpemU6IDExLFxuICAgICAgICAgIHJldHJ5RGVsYXlzOiBbMTAsIDEwLCAxMF0sXG4gICAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgICAgICB1cGxvYWRMZW5ndGhEZWZlcnJlZDogdHJ1ZSxcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKHJlYWRlciwgb3B0aW9ucylcbiAgICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgICBsZXQgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICBMb2NhdGlvbjogJy9maWxlcy9mb28nLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG4gICAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZSgnMTEnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuICAgICAgfSlcblxuICAgICAgaXQoJ3Nob3VsZCByZXRyeSB0aGUgZmlyc3QgUEFUQ0ggcmVxdWVzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbWFrZVJlYWRlcignaGVsbG8gd29ybGQnLCAxKVxuXG4gICAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJyxcbiAgICAgICAgICBjaHVua1NpemU6IDExLFxuICAgICAgICAgIHJldHJ5RGVsYXlzOiBbMTAsIDEwLCAxMF0sXG4gICAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgICAgICB1cGxvYWRMZW5ndGhEZWZlcnJlZDogdHJ1ZSxcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKHJlYWRlciwgb3B0aW9ucylcbiAgICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgICBsZXQgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICBMb2NhdGlvbjogJy9maWxlcy9mb28nLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICB9KVxuXG4gICAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdIRUFEJylcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAwLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG4gICAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZSgnMTEnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuICAgICAgfSlcblxuICAgICAgaXQoJ3Nob3VsZCByZXRyeSBmb2xsb3dpbmcgUEFUQ0ggcmVxdWVzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG1ha2VSZWFkZXIoJ2hlbGxvIHdvcmxkIHRoZXJlIScpXG5cbiAgICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby9maWxlcy8nLFxuICAgICAgICAgIGNodW5rU2l6ZTogNixcbiAgICAgICAgICByZXRyeURlbGF5czogWzEwLCAxMCwgMTBdLFxuICAgICAgICAgIG9uU3VjY2VzcygpIHt9LFxuICAgICAgICAgIHVwbG9hZExlbmd0aERlZmVycmVkOiB0cnVlLFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQocmVhZGVyLCBvcHRpb25zKVxuICAgICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy8nKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG5cbiAgICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAgIExvY2F0aW9uOiAnL2ZpbGVzL2ZvbycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDYsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0hFQUQnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDYsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDEyLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxOCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG4gICAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZSgnMTgnKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDE4LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuICAgICAgfSlcblxuICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgc291cmNlIHByb3ZpZGVzIGxlc3MgZGF0YSB0aGFuIHVwbG9hZFNpemUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG1ha2VSZWFkZXIoJ2hlbGxvIHdvcmxkJylcblxuICAgICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgICAgdXBsb2FkU2l6ZTogMTAwLFxuICAgICAgICAgIGNodW5rU2l6ZTogMTAwLFxuICAgICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgICByZXRyeURlbGF5czogW10sXG4gICAgICAgICAgb25FcnJvcjogd2FpdGFibGVGdW5jdGlvbignb25FcnJvcicpLFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQocmVhZGVyLCBvcHRpb25zKVxuICAgICAgICB1cGxvYWQuc3RhcnQoKVxuICAgICAgICBsZXQgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG5cbiAgICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAgIExvY2F0aW9uOiAnaHR0cDovL3R1cy5pby91cGxvYWRzL2ZvbycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL2ZvbycpXG4gICAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMTEsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBlcnIgPSBhd2FpdCBvcHRpb25zLm9uRXJyb3IudG9CZUNhbGxlZFxuXG4gICAgICAgIGV4cGVjdChlcnIubWVzc2FnZSkudG9CZShcbiAgICAgICAgICAndHVzOiBmYWlsZWQgdG8gdXBsb2FkIGNodW5rIGF0IG9mZnNldCAxMSwgY2F1c2VkIGJ5IEVycm9yOiB1cGxvYWQgd2FzIGNvbmZpZ3VyZWQgd2l0aCBhIHNpemUgb2YgMTAwIGJ5dGVzLCBidXQgdGhlIHNvdXJjZSBpcyBkb25lIGFmdGVyIDExIGJ5dGVzLCBvcmlnaW5hdGVkIGZyb20gcmVxdWVzdCAobWV0aG9kOiBQQVRDSCwgdXJsOiBodHRwOi8vdHVzLmlvL3VwbG9hZHMvZm9vLCByZXNwb25zZSBjb2RlOiBuL2EsIHJlc3BvbnNlIHRleHQ6IG4vYSwgcmVxdWVzdCBpZDogbi9hKScsXG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGRlc2NyaWJlKCdyZXNvbHZpbmcgb2YgVVJJcycsICgpID0+IHtcbiAgICAgIC8vIERpc2FibGUgdGhlc2UgdGVzdHMgZm9yIElFIDEwIGFuZCAxMSBiZWNhdXNlIGl0J3Mgbm90IHBvc3NpYmxlIHRvIG92ZXJ3cml0ZVxuICAgICAgLy8gdGhlIG5hdmlnYXRvci5wcm9kdWN0IHByb3BlcnR5LlxuICAgICAgY29uc3QgaXNJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudC8nKSA+IDBcbiAgICAgIGlmIChpc0lFKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTa2lwcGluZyB0ZXN0cyBmb3IgUmVhY3QgTmF0aXZlIGluIEludGVybmV0IEV4cGxvcmVyJylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9yaWdpbmFsUHJvZHVjdCA9IG5hdmlnYXRvci5wcm9kdWN0XG5cbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBqYXNtaW5lLkFqYXguaW5zdGFsbCgpXG4gICAgICAgIC8vIFNpbXVsYXRlIFJlYWN0IE5hdGl2ZSBlbnZpcm9ubWVudCB0byBlbmFibGUgVVJJcyBhcyBpbnB1dCBvYmplY3RzLlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmF2aWdhdG9yLCAncHJvZHVjdCcsIHtcbiAgICAgICAgICB2YWx1ZTogJ1JlYWN0TmF0aXZlJyxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgICBqYXNtaW5lLkFqYXgudW5pbnN0YWxsKClcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5hdmlnYXRvciwgJ3Byb2R1Y3QnLCB7XG4gICAgICAgICAgdmFsdWU6IG9yaWdpbmFsUHJvZHVjdCxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICBpdCgnc2hvdWxkIHVwbG9hZCBhIGZpbGUgZnJvbSBhbiBVUkknLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB7XG4gICAgICAgICAgdXJpOiAnZmlsZTovLy9teS9maWxlLmRhdCcsXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgICBvblN1Y2Nlc3M6IHdhaXRhYmxlRnVuY3Rpb24oJ29uU3VjY2VzcycpLFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgICAvLyBXYWl0IGEgc2hvcnQgaW50ZXJ2YWwgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIFhIUiBoYXMgYmVlbiBzZW50LlxuICAgICAgICBhd2FpdCB3YWl0KDApXG5cbiAgICAgICAgbGV0IHJlcSA9IGphc21pbmUuQWpheC5yZXF1ZXN0cy5tb3N0UmVjZW50KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2ZpbGU6Ly8vbXkvZmlsZS5kYXQnKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnR0VUJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXNwb25zZVR5cGUpLnRvQmUoJ2Jsb2InKVxuXG4gICAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDExLFxuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAzLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzcG9uc2U6IG5ldyBCbG9iKCdoZWxsbyB3b3JsZCcuc3BsaXQoJycpKSxcbiAgICAgICAgfSlcblxuICAgICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzJylcbiAgICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtTGVuZ3RoJ10pLnRvQmUoJzExJylcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgTG9jYXRpb246ICcvdXBsb2Fkcy9ibGFyZ2gnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuICAgICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU9mZnNldCddKS50b0JlKCcwJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ10pLnRvQmUoJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nKVxuICAgICAgICBleHBlY3QocmVxLmJvZHkuc2l6ZSkudG9CZSgxMSlcblxuICAgICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuXG4gICAgICAgIGF3YWl0IG9wdGlvbnMub25TdWNjZXNzLnRvQmVDYWxsZWRcbiAgICAgICAgZXhwZWN0KHVwbG9hZC51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgfSlcblxuICAgICAgaXQoXCJzaG91bGQgZW1pdCBhbiBlcnJvciBpZiBpdCBjYW4ndCByZXNvbHZlIHRoZSBVUklcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlID0ge1xuICAgICAgICAgIHVyaTogJ2ZpbGU6Ly8vbXkvZmlsZS5kYXQnLFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICAgIG9uRXJyb3I6IHdhaXRhYmxlRnVuY3Rpb24oJ29uRXJyb3InKSxcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgICAgLy8gV2FpdCBhIHNob3J0IGludGVydmFsIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBYSFIgaGFzIGJlZW4gc2VudC5cbiAgICAgICAgYXdhaXQgd2FpdCgwKVxuXG4gICAgICAgIGNvbnN0IHJlcSA9IGphc21pbmUuQWpheC5yZXF1ZXN0cy5tb3N0UmVjZW50KClcbiAgICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2ZpbGU6Ly8vbXkvZmlsZS5kYXQnKVxuICAgICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnR0VUJylcbiAgICAgICAgZXhwZWN0KHJlcS5yZXNwb25zZVR5cGUpLnRvQmUoJ2Jsb2InKVxuXG4gICAgICAgIHJlcS5yZXNwb25zZUVycm9yKClcblxuICAgICAgICBhd2FpdCBvcHRpb25zLm9uRXJyb3IudG9CZUNhbGxlZFxuICAgICAgICBleHBlY3Qob3B0aW9ucy5vbkVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAndHVzOiBjYW5ub3QgZmV0Y2ggYGZpbGUudXJpYCBhcyBCbG9iLCBtYWtlIHN1cmUgdGhlIHVyaSBpcyBjb3JyZWN0IGFuZCBhY2Nlc3NpYmxlLiBbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnI0xvY2FsU3RvcmFnZVVybFN0b3JhZ2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBzdG9yaW5nIGFuZCByZXRyaWV2aW5nIHVwbG9hZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBhc3NlcnRVcmxTdG9yYWdlKHR1cy5kZWZhdWx0T3B0aW9ucy51cmxTdG9yYWdlKVxuICAgIH0pXG4gIH0pXG59KVxuIiwiY29uc3QgeyBUZXN0SHR0cFN0YWNrLCB3YWl0YWJsZUZ1bmN0aW9uLCB3YWl0LCBnZXRCbG9iLCBUZXN0UmVzcG9uc2UgfSA9IHJlcXVpcmUoJy4vaGVscGVycy91dGlscycpXG5jb25zdCB0dXMgPSByZXF1aXJlKCcuLi8uLicpXG5cbi8vIFVuY29tbWVudCB0byBlbmFibGUgZGVidWcgbG9nIGZyb20gdHVzLWpzLWNsaWVudFxuLy8gdHVzLmVuYWJsZURlYnVnTG9nKCk7XG5cbmRlc2NyaWJlKCd0dXMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCcjaXNTdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBiZSB0cnVlJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHR1cy5pc1N1cHBvcnRlZCkudG9CZSh0cnVlKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJyNVcGxvYWQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBpZiBubyBlcnJvciBoYW5kbGVyIGlzIGF2YWlsYWJsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKG51bGwpXG4gICAgICBleHBlY3QodXBsb2FkLnN0YXJ0LmJpbmQodXBsb2FkKSkudG9UaHJvd0Vycm9yKCd0dXM6IG5vIGZpbGUgb3Igc3RyZWFtIHRvIHVwbG9hZCBwcm92aWRlZCcpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgaWYgbm8gZW5kcG9pbnQgYW5kIHVwbG9hZCBVUkwgaXMgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSlcbiAgICAgIGV4cGVjdCh1cGxvYWQuc3RhcnQuYmluZCh1cGxvYWQpKS50b1Rocm93RXJyb3IoXG4gICAgICAgICd0dXM6IG5laXRoZXIgYW4gZW5kcG9pbnQgb3IgYW4gdXBsb2FkIFVSTCBpcyBwcm92aWRlZCcsXG4gICAgICApXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgdXBsb2FkIGEgZmlsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwczovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIEN1c3RvbTogJ2JsYXJnaCcsXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgZm9vOiAnaGVsbG8nLFxuICAgICAgICAgIGJhcjogJ3dvcmxkJyxcbiAgICAgICAgICBub25sYXRpbjogJ3PFgm/FhGNlJyxcbiAgICAgICAgICBudW1iZXI6IDEwMCxcbiAgICAgICAgfSxcbiAgICAgICAgb25Qcm9ncmVzcygpIHt9LFxuICAgICAgICBvblVwbG9hZFVybEF2YWlsYWJsZTogd2FpdGFibGVGdW5jdGlvbignb25VcGxvYWRVcmxBdmFpbGFibGUnKSxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgIH1cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvblByb2dyZXNzJylcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzLkN1c3RvbSkudG9CZSgnYmxhcmdoJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlKCcxMScpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtTWV0YWRhdGEnXSkudG9CZShcbiAgICAgICAgJ2ZvbyBhR1ZzYkc4PSxiYXIgZDI5eWJHUT0sbm9ubGF0aW4gYzhXQ2I4V0VZMlU9LG51bWJlciBNVEF3JyxcbiAgICAgIClcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcblxuICAgICAgZXhwZWN0KG9wdGlvbnMub25VcGxvYWRVcmxBdmFpbGFibGUpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnMuQ3VzdG9tKS50b0JlKCdibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ10pLnRvQmUoJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nKVxuICAgICAgZXhwZWN0KHJlcS5ib2R5LnNpemUpLnRvQmUoMTEpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuXG4gICAgICBleHBlY3QodXBsb2FkLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgZXhwZWN0KG9wdGlvbnMub25Qcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoMTEsIDExKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiB1cGxvYWQgaWYgcmVzdW1pbmcgZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgdXBsb2FkVXJsOiAnaHR0cDovL3R1cy5pby91cGxvYWRzL3Jlc3VtaW5nJyxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9yZXN1bWluZycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZSgnMTEnKVxuXG4gICAgICAvLyBUaGUgdXBsb2FkIFVSTCBzaG91bGQgYmUgY2xlYXJlZCB3aGVuIHR1cy1qcy5jbGllbnQgdHJpZXMgdG8gY3JlYXRlIGEgbmV3IHVwbG9hZC5cbiAgICAgIGV4cGVjdCh1cGxvYWQudXJsKS50b0JlKG51bGwpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGFuIHVwbG9hZCB1c2luZyB0aGUgY3JlYXRpb24td2l0aC1kYXRhIGV4dGVuc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICB1cGxvYWREYXRhRHVyaW5nQ3JlYXRpb246IHRydWUsXG4gICAgICAgIG9uUHJvZ3Jlc3MoKSB7fSxcbiAgICAgICAgb25DaHVua0NvbXBsZXRlKCkge30sXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbignb25TdWNjZXNzJyksXG4gICAgICB9XG5cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvblByb2dyZXNzJylcbiAgICAgIHNweU9uKG9wdGlvbnMsICdvbkNodW5rQ29tcGxldGUnKVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtTGVuZ3RoJ10pLnRvQmUoJzExJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJylcbiAgICAgIGV4cGVjdChyZXEuYm9keS5zaXplKS50b0JlKDExKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJyxcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblByb2dyZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxMSwgMTEpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkNodW5rQ29tcGxldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDExLCAxMSwgMTEpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblN1Y2Nlc3MpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuXG4gICAgICBleHBlY3QodXBsb2FkLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL2JsYXJnaCcpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGFuIHVwbG9hZCB3aXRoIHBhcnRpYWwgZGF0YSBhbmQgY29udGludWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgdXBsb2FkRGF0YUR1cmluZ0NyZWF0aW9uOiB0cnVlLFxuICAgICAgICBjaHVua1NpemU6IDYsXG4gICAgICAgIG9uUHJvZ3Jlc3MoKSB7fSxcbiAgICAgICAgb25DaHVua0NvbXBsZXRlKCkge30sXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbignb25TdWNjZXNzJyksXG4gICAgICB9XG5cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvblByb2dyZXNzJylcbiAgICAgIHNweU9uKG9wdGlvbnMsICdvbkNodW5rQ29tcGxldGUnKVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgbGV0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlKCcxMScpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICBleHBlY3QocmVxLmJvZHkuc2l6ZSkudG9CZSg2KVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJyxcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDYsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuXG4gICAgICAvLyBPbmNlIHRoZSBzZWNvbmQgcmVxdWVzdCBoYXMgYmVlbiBzZW50LCB0aGUgcHJvZ3Jlc3MgaGFuZGxlciBtdXN0IGhhdmUgYmVlbiBpbnZva2VkLlxuICAgICAgZXhwZWN0KG9wdGlvbnMub25Qcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoNiwgMTEpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkNodW5rQ29tcGxldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDYsIDYsIDExKVxuICAgICAgZXhwZWN0KG9wdGlvbnMub25TdWNjZXNzKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgICBleHBlY3QodXBsb2FkLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL2JsYXJnaCcpXG5cbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1PZmZzZXQnXSkudG9CZSgnNicpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICBleHBlY3QocmVxLmJvZHkuc2l6ZSkudG9CZSg1KVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJyxcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblByb2dyZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxMSwgMTEpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkNodW5rQ29tcGxldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDUsIDExLCAxMSlcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uU3VjY2VzcykudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgfSlcblxuICAgIGl0KFwic2hvdWxkIGFkZCB0aGUgcmVxdWVzdCdzIGJvZHkgYW5kIElEIHRvIGVycm9yc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgYWRkUmVxdWVzdElkOiB0cnVlLFxuICAgICAgICByZXRyeURlbGF5czogbnVsbCxcbiAgICAgICAgb25FcnJvcjogd2FpdGFibGVGdW5jdGlvbignb25FcnJvcicpLFxuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuXG4gICAgICBjb25zdCByZXFJZCA9IHJlcS5yZXF1ZXN0SGVhZGVyc1snWC1SZXF1ZXN0LUlEJ11cbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVxSWQpLnRvQmUoJ3N0cmluZycpXG4gICAgICBleHBlY3QocmVxSWQubGVuZ3RoKS50b0JlKDM2KVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgcmVzcG9uc2VUZXh0OiAnc2VydmVyX2Vycm9yJyxcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IGVyciA9IGF3YWl0IG9wdGlvbnMub25FcnJvci50b0JlQ2FsbGVkXG5cbiAgICAgIGV4cGVjdChlcnIubWVzc2FnZSkudG9CZShcbiAgICAgICAgYHR1czogdW5leHBlY3RlZCByZXNwb25zZSB3aGlsZSBjcmVhdGluZyB1cGxvYWQsIG9yaWdpbmF0ZWQgZnJvbSByZXF1ZXN0IChtZXRob2Q6IFBPU1QsIHVybDogaHR0cDovL3R1cy5pby91cGxvYWRzLCByZXNwb25zZSBjb2RlOiA1MDAsIHJlc3BvbnNlIHRleHQ6IHNlcnZlcl9lcnJvciwgcmVxdWVzdCBpZDogJHtyZXFJZH0pYCxcbiAgICAgIClcbiAgICAgIGV4cGVjdChlcnIub3JpZ2luYWxSZXF1ZXN0KS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QoZXJyLm9yaWdpbmFsUmVzcG9uc2UpLnRvQmVEZWZpbmVkKClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBpbnZva2UgdGhlIHJlcXVlc3QgYW5kIHJlc3BvbnNlIGNhbGxiYWNrcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgdXBsb2FkVXJsOiAnaHR0cDovL3R1cy5pby91cGxvYWRzL2ZvbycsXG4gICAgICAgIG9uQmVmb3JlUmVxdWVzdChyZXEpIHtcbiAgICAgICAgICBleHBlY3QocmVxLmdldFVSTCgpKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvZm9vJylcbiAgICAgICAgICBleHBlY3QocmVxLmdldE1ldGhvZCgpKS50b0JlKCdIRUFEJylcbiAgICAgICAgfSxcbiAgICAgICAgb25BZnRlclJlc3BvbnNlKHJlcSwgcmVzKSB7XG4gICAgICAgICAgZXhwZWN0KHJlcS5nZXRVUkwoKSkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL2ZvbycpXG4gICAgICAgICAgZXhwZWN0KHJlcS5nZXRNZXRob2QoKSkudG9CZSgnSEVBRCcpXG4gICAgICAgICAgZXhwZWN0KHJlcy5nZXRTdGF0dXMoKSkudG9CZSgyMDQpXG4gICAgICAgICAgZXhwZWN0KHJlcy5nZXRIZWFkZXIoJ1VwbG9hZC1PZmZzZXQnKSkudG9CZSgxMSlcbiAgICAgICAgfSxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgIH1cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvbkJlZm9yZVJlcXVlc3QnKVxuICAgICAgc3B5T24ob3B0aW9ucywgJ29uQWZ0ZXJSZXNwb25zZScpXG5cbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBjb25zdCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0hFQUQnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuICAgICAgZXhwZWN0KG9wdGlvbnMub25CZWZvcmVSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uQWZ0ZXJSZXNwb25zZSkudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgaW52b2tlIHRoZSBvblN1Y2Nlc3MgY2FsbGJhY2sgd2l0aCBldmVudCBwYXlsb2FkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICB1cGxvYWRVcmw6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMvZm9vJyxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGNvbnN0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDExLFxuICAgICAgICAgICdDdXN0b20tSGVhZGVyJzogJ2hlbGxvJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHsgbGFzdFJlc3BvbnNlIH0gPSBhd2FpdCBvcHRpb25zLm9uU3VjY2Vzcy50b0JlQ2FsbGVkXG4gICAgICBleHBlY3QobGFzdFJlc3BvbnNlKS50b0JlSW5zdGFuY2VPZihUZXN0UmVzcG9uc2UpXG4gICAgICBleHBlY3QobGFzdFJlc3BvbnNlLmdldEhlYWRlcignQ3VzdG9tLUhlYWRlcicpKS50b0JlKCdoZWxsbycpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgcmVzdW1pbmcgZmFpbHMgYW5kIG5vIGVuZHBvaW50IGlzIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICB1cGxvYWRVcmw6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMvcmVzdW1pbmcnLFxuICAgICAgICBvbkVycm9yOiB3YWl0YWJsZUZ1bmN0aW9uKCdvbkVycm9yJyksXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBjb25zdCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9yZXN1bWluZycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICB9KVxuXG4gICAgICBjb25zdCBlcnIgPSBhd2FpdCBvcHRpb25zLm9uRXJyb3IudG9CZUNhbGxlZFxuICAgICAgZXhwZWN0KGVyci5tZXNzYWdlKS50b0JlKFxuICAgICAgICAndHVzOiB1bmFibGUgdG8gcmVzdW1lIHVwbG9hZCAobmV3IHVwbG9hZCBjYW5ub3QgYmUgY3JlYXRlZCB3aXRob3V0IGFuIGVuZHBvaW50KSwgb3JpZ2luYXRlZCBmcm9tIHJlcXVlc3QgKG1ldGhvZDogSEVBRCwgdXJsOiBodHRwOi8vdHVzLmlvL3VwbG9hZHMvcmVzdW1pbmcsIHJlc3BvbnNlIGNvZGU6IDQwNCwgcmVzcG9uc2UgdGV4dDogLCByZXF1ZXN0IGlkOiBuL2EpJyxcbiAgICAgIClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCByZXNvbHZlIHJlbGF0aXZlIFVSTHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pbzoxMDgwL2ZpbGVzLycsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBsZXQgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvOjEwODAvZmlsZXMvJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnLy9sb2NhbGhvc3QvdXBsb2Fkcy9mb28nLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vbG9jYWxob3N0L3VwbG9hZHMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHVwbG9hZC51cmwpLnRvQmUoJ2h0dHA6Ly9sb2NhbGhvc3QvdXBsb2Fkcy9mb28nKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHVwbG9hZCBhIGZpbGUgaW4gY2h1bmtzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vdXBsb2FkcycsXG4gICAgICAgIGNodW5rU2l6ZTogNyxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgICAgb25Qcm9ncmVzcygpIHt9LFxuICAgICAgICBvbkNodW5rQ29tcGxldGUoKSB7fSxcbiAgICAgIH1cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvblByb2dyZXNzJylcbiAgICAgIHNweU9uKG9wdGlvbnMsICdvbkNodW5rQ29tcGxldGUnKVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgbGV0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlKCcxMScpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogJy91cGxvYWRzL2JsYXJnaCcsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU9mZnNldCddKS50b0JlKCcwJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJylcbiAgICAgIGV4cGVjdChyZXEuYm9keS5zaXplKS50b0JlKDcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDcsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU9mZnNldCddKS50b0JlKCc3JylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJylcbiAgICAgIGV4cGVjdChyZXEuYm9keS5zaXplKS50b0JlKDQpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuXG4gICAgICBleHBlY3QodXBsb2FkLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL2JsYXJnaCcpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblByb2dyZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxMSwgMTEpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkNodW5rQ29tcGxldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDcsIDcsIDExKVxuICAgICAgZXhwZWN0KG9wdGlvbnMub25DaHVua0NvbXBsZXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCg0LCAxMSwgMTEpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgYWRkIHRoZSBvcmlnaW5hbCByZXF1ZXN0IHRvIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICByZXRyeURlbGF5czogbnVsbCxcbiAgICAgICAgb25FcnJvcjogd2FpdGFibGVGdW5jdGlvbignb25FcnJvcicpLFxuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgQ3VzdG9tOiAnYmxhcmdoJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IGVyciA9IGF3YWl0IG9wdGlvbnMub25FcnJvci50b0JlQ2FsbGVkXG5cbiAgICAgIGV4cGVjdCh1cGxvYWQudXJsKS50b0JlKG51bGwpXG4gICAgICBleHBlY3QoZXJyLm1lc3NhZ2UpLnRvQmUoXG4gICAgICAgICd0dXM6IHVuZXhwZWN0ZWQgcmVzcG9uc2Ugd2hpbGUgY3JlYXRpbmcgdXBsb2FkLCBvcmlnaW5hdGVkIGZyb20gcmVxdWVzdCAobWV0aG9kOiBQT1NULCB1cmw6IGh0dHA6Ly90dXMuaW8vdXBsb2FkcywgcmVzcG9uc2UgY29kZTogNTAwLCByZXNwb25zZSB0ZXh0OiAsIHJlcXVlc3QgaWQ6IG4vYSknLFxuICAgICAgKVxuICAgICAgZXhwZWN0KGVyci5vcmlnaW5hbFJlcXVlc3QpLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChlcnIub3JpZ2luYWxSZXNwb25zZSkudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KGVyci5vcmlnaW5hbFJlc3BvbnNlLmdldEhlYWRlcignQ3VzdG9tJykpLnRvQmUoJ2JsYXJnaCcpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgb25seSBjcmVhdGUgYW4gdXBsb2FkIGZvciBlbXB0eSBmaWxlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCcnKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGNvbnN0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlKCcwJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnaHR0cDovL3R1cy5pby91cGxvYWRzL2VtcHR5JyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IG9wdGlvbnMub25TdWNjZXNzLnRvQmVDYWxsZWRcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uU3VjY2VzcykudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgbm90IHJlc3VtZSBhIGZpbmlzaGVkIHVwbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICBvblByb2dyZXNzKCkge30sXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbignb25TdWNjZXNzJyksXG4gICAgICAgIHVwbG9hZFVybDogJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9yZXN1bWluZycsXG4gICAgICB9XG4gICAgICBzcHlPbihvcHRpb25zLCAnb25Qcm9ncmVzcycpXG5cbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBjb25zdCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9yZXN1bWluZycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogJzExJyxcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6ICcxMScsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBvcHRpb25zLm9uU3VjY2Vzcy50b0JlQ2FsbGVkXG5cbiAgICAgIGV4cGVjdChvcHRpb25zLm9uUHJvZ3Jlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDExLCAxMSlcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uU3VjY2VzcykudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgcmVzdW1lIGFuIHVwbG9hZCBmcm9tIGEgc3BlY2lmaWVkIHVybCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICB1cGxvYWRVcmw6ICdodHRwOi8vdHVzLmlvL2ZpbGVzL3VwbG9hZCcsXG4gICAgICAgIG9uUHJvZ3Jlc3MoKSB7fSxcbiAgICAgICAgb25VcGxvYWRVcmxBdmFpbGFibGU6IHdhaXRhYmxlRnVuY3Rpb24oJ29uVXBsb2FkVXJsQXZhaWxhYmxlJyksXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbignb25TdWNjZXNzJyksXG4gICAgICAgIGZpbmdlcnByaW50KCkge30sXG4gICAgICB9XG4gICAgICBzcHlPbihvcHRpb25zLCAnZmluZ2VycHJpbnQnKS5hbmQucmVzb2x2ZVRvKCdmaW5nZXJwcmludGVkJylcbiAgICAgIHNweU9uKG9wdGlvbnMsICdvblByb2dyZXNzJylcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGV4cGVjdChvcHRpb25zLmZpbmdlcnByaW50KS50b0hhdmVCZWVuQ2FsbGVkKClcblxuICAgICAgbGV0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy91cGxvYWQnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0hFQUQnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDExLFxuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG5cbiAgICAgIGV4cGVjdChvcHRpb25zLm9uVXBsb2FkVXJsQXZhaWxhYmxlKS50b0hhdmVCZWVuQ2FsbGVkKClcblxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvdXBsb2FkJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1PZmZzZXQnXSkudG9CZSgnMycpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICBleHBlY3QocmVxLmJvZHkuc2l6ZSkudG9CZSgxMSAtIDMpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuICAgICAgZXhwZWN0KG9wdGlvbnMub25Qcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoMTEsIDExKVxuICAgICAgZXhwZWN0KHVwbG9hZC51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvdXBsb2FkJylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCByZXN1bWUgYSBwcmV2aW91c2x5IHN0YXJ0ZWQgdXBsb2FkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vdXBsb2FkcycsXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbignb25TdWNjZXNzJyksXG4gICAgICAgIG9uRXJyb3IoKSB7fSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvYmxhcmdoJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgIHVwbG9hZC5hYm9ydCgpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDUsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0hFQUQnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiA1LFxuICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogMTEsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9ibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMTEsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBvcHRpb25zLm9uU3VjY2Vzcy50b0JlQ2FsbGVkXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblN1Y2Nlc3MpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIG92ZXJyaWRlIHRoZSBQQVRDSCBtZXRob2QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgdXBsb2FkVXJsOiAnaHR0cDovL3R1cy5pby9maWxlcy91cGxvYWQnLFxuICAgICAgICBvdmVycmlkZVBhdGNoTWV0aG9kOiB0cnVlLFxuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgbGV0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy91cGxvYWQnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0hFQUQnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDExLFxuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy91cGxvYWQnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzMnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snWC1IVFRQLU1ldGhvZC1PdmVycmlkZSddKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBlbWl0IGFuIGVycm9yIGlmIGFuIHVwbG9hZCBpcyBsb2NrZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby91cGxvYWRzJyxcbiAgICAgICAgdXBsb2FkVXJsOiAnaHR0cDovL3R1cy5pby9maWxlcy91cGxvYWQnLFxuICAgICAgICBvbkVycm9yOiB3YWl0YWJsZUZ1bmN0aW9uKCdvbkVycm9yJyksXG4gICAgICAgIHJldHJ5RGVsYXlzOiBudWxsLFxuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL3VwbG9hZCcpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogNDIzLCAvLyBMb2NrZWRcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IG9wdGlvbnMub25FcnJvci50b0JlQ2FsbGVkXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICd0dXM6IHVwbG9hZCBpcyBjdXJyZW50bHkgbG9ja2VkOyByZXRyeSBsYXRlciwgb3JpZ2luYXRlZCBmcm9tIHJlcXVlc3QgKG1ldGhvZDogSEVBRCwgdXJsOiBodHRwOi8vdHVzLmlvL2ZpbGVzL3VwbG9hZCwgcmVzcG9uc2UgY29kZTogNDIzLCByZXNwb25zZSB0ZXh0OiAsIHJlcXVlc3QgaWQ6IG4vYSknLFxuICAgICAgICApLFxuICAgICAgKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGVtaXQgYW4gZXJyb3IgaWYgbm8gTG9jYXRpb24gaGVhZGVyIGlzIHByZXNlbnRlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICBvbkVycm9yOiB3YWl0YWJsZUZ1bmN0aW9uKCdvbkVycm9yJyksXG4gICAgICAgIHJldHJ5RGVsYXlzOiBudWxsLFxuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuXG4gICAgICAvLyBUaGUgTG9jYXRpb24gaGVhZGVyIGlzIG9taXR0ZWQgb24gcHVycG9zZSBoZXJlXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IG9wdGlvbnMub25FcnJvci50b0JlQ2FsbGVkXG5cbiAgICAgIGV4cGVjdChvcHRpb25zLm9uRXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgJ3R1czogaW52YWxpZCBvciBtaXNzaW5nIExvY2F0aW9uIGhlYWRlciwgb3JpZ2luYXRlZCBmcm9tIHJlcXVlc3QgKG1ldGhvZDogUE9TVCwgdXJsOiBodHRwOi8vdHVzLmlvL3VwbG9hZHMsIHJlc3BvbnNlIGNvZGU6IDIwMSwgcmVzcG9uc2UgdGV4dDogLCByZXF1ZXN0IGlkOiBuL2EpJyxcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgc291cmNlIHByb3ZpZGVzIGxlc3MgZGF0YSB0aGFuIHVwbG9hZFNpemUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIHVwbG9hZFNpemU6IDEwMCxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICByZXRyeURlbGF5czogW10sXG4gICAgICAgIG9uRXJyb3I6IHdhaXRhYmxlRnVuY3Rpb24oJ29uRXJyb3InKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGNvbnN0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwOi8vdHVzLmlvL3VwbG9hZHMvZm9vJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IGVyciA9IGF3YWl0IG9wdGlvbnMub25FcnJvci50b0JlQ2FsbGVkXG4gICAgICBleHBlY3QoZXJyLm1lc3NhZ2UpLnRvQmUoXG4gICAgICAgICd0dXM6IGZhaWxlZCB0byB1cGxvYWQgY2h1bmsgYXQgb2Zmc2V0IDAsIGNhdXNlZCBieSBFcnJvcjogdXBsb2FkIHdhcyBjb25maWd1cmVkIHdpdGggYSBzaXplIG9mIDEwMCBieXRlcywgYnV0IHRoZSBzb3VyY2UgaXMgZG9uZSBhZnRlciAxMSBieXRlcywgb3JpZ2luYXRlZCBmcm9tIHJlcXVlc3QgKG1ldGhvZDogUEFUQ0gsIHVybDogaHR0cDovL3R1cy5pby91cGxvYWRzL2ZvbywgcmVzcG9uc2UgY29kZTogbi9hLCByZXNwb25zZSB0ZXh0OiBuL2EsIHJlcXVlc3QgaWQ6IG4vYSknLFxuICAgICAgKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGlmIHJldHJ5RGVsYXlzIGlzIG5vdCBhbiBhcnJheScsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCB7XG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL2VuZHBvaW50LycsXG4gICAgICAgIHJldHJ5RGVsYXlzOiA0NCxcbiAgICAgIH0pXG4gICAgICBleHBlY3QodXBsb2FkLnN0YXJ0LmJpbmQodXBsb2FkKSkudG9UaHJvd0Vycm9yKFxuICAgICAgICAndHVzOiB0aGUgYHJldHJ5RGVsYXlzYCBvcHRpb24gbXVzdCBlaXRoZXIgYmUgYW4gYXJyYXkgb3IgbnVsbCcsXG4gICAgICApXG4gICAgfSlcblxuICAgIC8vIFRoaXMgdGVzdHMgZW5zdXJlcyB0aGF0IHR1cy1qcy1jbGllbnQgY29ycmVjdGx5IHJldHJpZXMgaWYgdGhlXG4gICAgLy8gcmVzcG9uc2UgaGFzIHRoZSBjb2RlIDUwMCBJbnRlcm5hbCBFcnJvciwgNDIzIExvY2tlZCBvciA0MDkgQ29uZmxpY3QuXG4gICAgaXQoJ3Nob3VsZCByZXRyeSB0aGUgdXBsb2FkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJyxcbiAgICAgICAgcmV0cnlEZWxheXM6IFsxMCwgMTAsIDEwXSxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnL2ZpbGVzL2ZvbycsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogNDIzLFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDAsXG4gICAgICAgICAgJ1VwbG9hZC1MZW5ndGgnOiAxMSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA0MDksXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdIRUFEJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMCxcbiAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IG9wdGlvbnMub25TdWNjZXNzLnRvQmVDYWxsZWRcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uU3VjY2VzcykudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgfSlcblxuICAgIC8vIFRoaXMgdGVzdHMgZW5zdXJlcyB0aGF0IHR1cy1qcy1jbGllbnQgY29ycmVjdGx5IHJldHJpZXMgaWYgdGhlXG4gICAgLy8gcmV0dXJuIHZhbHVlIG9mIG9uU2hvdWxkUmV0cnkgaXMgdHJ1ZS5cbiAgICBpdCgnc2hvdWxkIHJldHJ5IHRoZSB1cGxvYWQgd2hlbiBvblNob3VsZFJldHJ5IHNwZWNpZmllZCBhbmQgcmV0dXJucyB0cnVlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJyxcbiAgICAgICAgcmV0cnlEZWxheXM6IFsxMCwgMTAsIDEwXSxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCdvblN1Y2Nlc3MnKSxcbiAgICAgICAgb25TaG91bGRSZXRyeTogKCkgPT4gdHJ1ZSxcbiAgICAgIH1cblxuICAgICAgc3B5T24ob3B0aW9ucywgJ29uU2hvdWxkUmV0cnknKS5hbmQuY2FsbFRocm91Z2goKVxuICAgICAgc3B5T24odHVzLlVwbG9hZC5wcm90b3R5cGUsICdfZW1pdEVycm9yJykuYW5kLmNhbGxUaHJvdWdoKClcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnL2ZpbGVzL2ZvbycsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogNDIzLFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDAsXG4gICAgICAgICAgJ1VwbG9hZC1MZW5ndGgnOiAxMSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA0MDksXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdIRUFEJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMCxcbiAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDExLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IG9wdGlvbnMub25TdWNjZXNzLnRvQmVDYWxsZWRcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uU3VjY2VzcykudG9IYXZlQmVlbkNhbGxlZCgpXG5cbiAgICAgIGNvbnN0IFtlcnJvcjFdID0gdXBsb2FkLl9lbWl0RXJyb3IuY2FsbHMuYXJnc0ZvcigwKVxuICAgICAgZXhwZWN0KG9wdGlvbnMub25TaG91bGRSZXRyeSkudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblNob3VsZFJldHJ5LmNhbGxzLmFyZ3NGb3IoMCkpLnRvRXF1YWwoW2Vycm9yMSwgMCwgdXBsb2FkLm9wdGlvbnNdKVxuICAgICAgY29uc3QgW2Vycm9yMl0gPSB1cGxvYWQuX2VtaXRFcnJvci5jYWxscy5hcmdzRm9yKDEpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblNob3VsZFJldHJ5LmNhbGxzLmFyZ3NGb3IoMSkpLnRvRXF1YWwoW2Vycm9yMiwgMSwgdXBsb2FkLm9wdGlvbnNdKVxuICAgIH0pXG5cbiAgICAvLyBUaGlzIHRlc3RzIGVuc3VyZXMgdGhhdCB0dXMtanMtY2xpZW50IGNvcnJlY3RseSBhYm9ydHMgaWYgdGhlXG4gICAgLy8gcmV0dXJuIHZhbHVlIG9mIG9uU2hvdWxkUmV0cnkgaXMgZmFsc2UuXG4gICAgaXQoJ3Nob3VsZCBub3QgcmV0cnkgdGhlIHVwbG9hZCB3aGVuIGNhbGxiYWNrIHNwZWNpZmllZCBhbmQgcmV0dXJucyBmYWxzZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL2ZpbGVzLycsXG4gICAgICAgIHJldHJ5RGVsYXlzOiBbMTAsIDEwLCAxMF0sXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbignb25TdWNjZXNzJyksXG4gICAgICAgIG9uRXJyb3I6IHdhaXRhYmxlRnVuY3Rpb24oJ29uRXJyb3InKSxcbiAgICAgICAgb25TaG91bGRSZXRyeTogKCkgPT4gZmFsc2UsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBjb25zdCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcblxuICAgICAgLy8gVGhlIGVycm9yIGNhbGxiYWNrIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgdGhlIGZpcnN0IGVycm9yIHJlc3BvbnNlLlxuICAgICAgZXhwZWN0KG9wdGlvbnMub25FcnJvcikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IG9wdGlvbnMub25FcnJvci50b0JlQ2FsbGVkXG5cbiAgICAgIGV4cGVjdChvcHRpb25zLm9uU3VjY2Vzcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgICAgZXhwZWN0KG9wdGlvbnMub25FcnJvcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgbm90IHJldHJ5IGlmIHRoZSBlcnJvciBoYXMgbm90IGJlZW4gY2F1c2VkIGJ5IGEgcmVxdWVzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IG5ldyBUZXN0SHR0cFN0YWNrKCksXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cDovL3R1cy5pby9maWxlcy8nLFxuICAgICAgICByZXRyeURlbGF5czogWzEwLCAxMCwgMTBdLFxuICAgICAgICBvblN1Y2Nlc3MoKSB7fSxcbiAgICAgICAgb25FcnJvcigpIHt9LFxuICAgICAgfVxuXG4gICAgICBzcHlPbihvcHRpb25zLCAnb25TdWNjZXNzJylcbiAgICAgIHNweU9uKG9wdGlvbnMsICdvbkVycm9yJylcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHNweU9uKHVwbG9hZCwgJ19jcmVhdGVVcGxvYWQnKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgYXdhaXQgd2FpdCgyMDApXG5cbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdjdXN0b20gZXJyb3InKVxuICAgICAgdXBsb2FkLl9lbWl0RXJyb3IoZXJyb3IpXG5cbiAgICAgIGV4cGVjdCh1cGxvYWQuX2NyZWF0ZVVwbG9hZCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChlcnJvcilcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uU3VjY2Vzcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHN0b3AgcmV0cnlpbmcgYWZ0ZXIgYWxsIGRlbGF5cyBoYXZlIGJlZW4gdXNlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL2ZpbGVzLycsXG4gICAgICAgIHJldHJ5RGVsYXlzOiBbMTBdLFxuICAgICAgICBvblN1Y2Nlc3MoKSB7fSxcbiAgICAgICAgb25FcnJvcjogd2FpdGFibGVGdW5jdGlvbignb25FcnJvcicpLFxuICAgICAgfVxuICAgICAgc3B5T24ob3B0aW9ucywgJ29uU3VjY2VzcycpXG5cbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBsZXQgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzLycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzLycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG5cbiAgICAgIC8vIFRoZSBlcnJvciBjYWxsYmFjayBzaG91bGQgbm90IGJlIGludm9rZWQgZm9yIHRoZSBmaXJzdCBlcnJvciByZXNwb25zZS5cbiAgICAgIGV4cGVjdChvcHRpb25zLm9uRXJyb3IpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKClcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBvcHRpb25zLm9uRXJyb3IudG9CZUNhbGxlZFxuXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblN1Y2Nlc3MpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uRXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHN0b3AgcmV0cnlpbmcgd2hlbiB0aGUgYWJvcnQgZnVuY3Rpb24gaXMgY2FsbGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJyxcbiAgICAgICAgcmV0cnlEZWxheXM6IFsxMF0sXG4gICAgICAgIG9uRXJyb3IoKSB7fSxcbiAgICAgIH1cblxuICAgICAgc3B5T24ob3B0aW9ucywgJ29uRXJyb3InKVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzLycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG5cbiAgICAgIHNweU9uKHVwbG9hZCwgJ3N0YXJ0JykuYW5kLmNhbGxUaHJvdWdoKClcblxuICAgICAgdXBsb2FkLmFib3J0KClcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW3Rlc3RTdGFjay5uZXh0UmVxdWVzdCgpLCB3YWl0KDEwMCldKVxuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCd0aW1lZCBvdXQnKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHN0b3AgdXBsb2FkIHdoZW4gdGhlIGFib3J0IGZ1bmN0aW9uIGlzIGNhbGxlZCBkdXJpbmcgYSBjYWxsYmFjaycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL2ZpbGVzLycsXG4gICAgICAgIGNodW5rU2l6ZTogNSxcbiAgICAgICAgb25DaHVua0NvbXBsZXRlKCkge1xuICAgICAgICAgIHVwbG9hZC5hYm9ydCgpXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvbkNodW5rQ29tcGxldGUnKS5hbmQuY2FsbFRocm91Z2goKVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgbGV0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy8nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICcvZmlsZXMvZm9vJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogNSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFByb21pc2UucmFjZShbdGVzdFN0YWNrLm5leHRSZXF1ZXN0KCksIHdhaXQoMjAwKV0pXG5cbiAgICAgIGV4cGVjdChvcHRpb25zLm9uQ2h1bmtDb21wbGV0ZSkudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCd0aW1lZCBvdXQnKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHN0b3AgdXBsb2FkIHdoZW4gdGhlIGFib3J0IGZ1bmN0aW9uIGlzIGNhbGxlZCBkdXJpbmcgdGhlIFBPU1QgcmVxdWVzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL2ZpbGVzLycsXG4gICAgICAgIG9uRXJyb3IoKSB7fSxcbiAgICAgIH1cblxuICAgICAgc3B5T24ob3B0aW9ucywgJ29uRXJyb3InKS5hbmQuY2FsbFRocm91Z2goKVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzLycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG5cbiAgICAgIHVwbG9hZC5hYm9ydCgpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogJy9maWxlcy9mb28nLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFt0ZXN0U3RhY2submV4dFJlcXVlc3QoKSwgd2FpdCgyMDApXSlcblxuICAgICAgZXhwZWN0KG9wdGlvbnMub25FcnJvcikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgndGltZWQgb3V0JylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCByZXNldCB0aGUgYXR0ZW1wdCBjb3VudGVyIGlmIGFuIHVwbG9hZCBwcm9jZWVkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL2ZpbGVzLycsXG4gICAgICAgIHJldHJ5RGVsYXlzOiBbMTBdLFxuICAgICAgICBvbkVycm9yKCkge30sXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbignb25TdWNjZXNzJyksXG4gICAgICB9XG4gICAgICBzcHlPbihvcHRpb25zLCAnb25FcnJvcicpXG5cbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBsZXQgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzLycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogJy9maWxlcy9mb28nLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0hFQUQnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAwLFxuICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogMTEsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDUsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDUsXG4gICAgICAgICAgJ1VwbG9hZC1MZW5ndGgnOiAxMSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMTEsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBvcHRpb25zLm9uU3VjY2Vzcy50b0JlQ2FsbGVkXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkVycm9yKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblN1Y2Nlc3MpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIH0pXG4gIH0pXG59KVxuIiwiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpXG5jb25zdCB7IGdldEJsb2IgfSA9IHJlcXVpcmUoJy4vaGVscGVycy91dGlscycpXG5jb25zdCB0dXMgPSByZXF1aXJlKCcuLi8uLicpXG5cbi8vIFRlc3QgdGltZW91dCBmb3IgZW5kLXRvLWVuZCB0ZXN0cyB3aGVuIHVwbG9hZGluZyB0byByZWFsIHNlcnZlci5cbmNvbnN0IEVORF9UT19FTkRfVElNRU9VVCA9IDIwICogMTAwMFxuXG5kZXNjcmliZSgndHVzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnZW5kLXRvLWVuZCcsICgpID0+IHtcbiAgICBpdChcbiAgICAgICdzaG91bGQgdXBsb2FkIHRvIGEgcmVhbCB0dXMgc2VydmVyJyxcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBlbmRwb2ludDogJ2h0dHBzOi8vdHVzZC50dXNkZW1vLm5ldC9maWxlcy8nLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgbm9ubGF0aW46ICdzxYJvxYRjZScsXG4gICAgICAgICAgICAgIG51bWJlcjogMTAwLFxuICAgICAgICAgICAgICBmaWxlbmFtZTogJ2hlbGxvLnR4dCcsXG4gICAgICAgICAgICAgIGZpbGV0eXBlOiAndGV4dC9wbGFpbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TdWNjZXNzKCkge1xuICAgICAgICAgICAgICBleHBlY3QodXBsb2FkLnVybCkudG9NYXRjaCgvXmh0dHBzOlxcL1xcL3R1c2RcXC50dXNkZW1vXFwubmV0XFwvZmlsZXNcXC8vKVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVXBsb2FkIFVSTDonLCB1cGxvYWQudXJsKVxuXG4gICAgICAgICAgICAgIHJlc29sdmUodXBsb2FkKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRXJyb3IoZXJyKSB7XG4gICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICAgICAgdXBsb2FkLnN0YXJ0KClcbiAgICAgICAgfSlcbiAgICAgICAgICAudGhlbih2YWxpZGF0ZVVwbG9hZENvbnRlbnQpXG4gICAgICAgICAgLnRoZW4oKHVwbG9hZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHVwbG9hZC5hYm9ydCh0cnVlKS50aGVuKCgpID0+IHVwbG9hZClcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKHZhbGlkYXRlVXBsb2FkRGVsZXRpb24pXG4gICAgICB9LFxuICAgICAgRU5EX1RPX0VORF9USU1FT1VULFxuICAgIClcblxuICAgIGl0KFxuICAgICAgJ3Nob3VsZCB1cGxvYWQgdG8gYSByZWFsIHR1cyBzZXJ2ZXIgd2l0aCBjcmVhdGlvbi13aXRoLXVwbG9hZCcsXG4gICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgZW5kcG9pbnQ6ICdodHRwczovL3R1c2QudHVzZGVtby5uZXQvZmlsZXMvJyxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgIG5vbmxhdGluOiAnc8WCb8WEY2UnLFxuICAgICAgICAgICAgICBudW1iZXI6IDEwMCxcbiAgICAgICAgICAgICAgZmlsZW5hbWU6ICdoZWxsby50eHQnLFxuICAgICAgICAgICAgICBmaWxldHlwZTogJ3RleHQvcGxhaW4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uU3VjY2VzcygpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KHVwbG9hZC51cmwpLnRvTWF0Y2goL15odHRwczpcXC9cXC90dXNkXFwudHVzZGVtb1xcLm5ldFxcL2ZpbGVzXFwvLylcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VwbG9hZCBVUkw6JywgdXBsb2FkLnVybClcblxuICAgICAgICAgICAgICByZXNvbHZlKHVwbG9hZClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkVycm9yKGVycikge1xuICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgICAgIHVwbG9hZC5zdGFydCgpXG4gICAgICAgIH0pLnRoZW4odmFsaWRhdGVVcGxvYWRDb250ZW50KVxuICAgICAgfSxcbiAgICAgIEVORF9UT19FTkRfVElNRU9VVCxcbiAgICApXG4gIH0pXG59KVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVVwbG9hZENvbnRlbnQodXBsb2FkKSB7XG4gIHJldHVybiBheGlvcy5nZXQodXBsb2FkLnVybCkudGhlbigocmVzKSA9PiB7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKVxuICAgIGV4cGVjdChyZXMuZGF0YSkudG9CZSgnaGVsbG8gd29ybGQnKVxuXG4gICAgcmV0dXJuIHZhbGlkYXRlVXBsb2FkTWV0YWRhdGEodXBsb2FkKVxuICB9KVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVVwbG9hZE1ldGFkYXRhKHVwbG9hZCkge1xuICByZXR1cm4gYXhpb3NcbiAgICAuaGVhZCh1cGxvYWQudXJsLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdUdXMtUmVzdW1hYmxlJzogJzEuMC4wJyxcbiAgICAgIH0sXG4gICAgfSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApXG4gICAgICBleHBlY3QocmVzLmRhdGEpLnRvQmUoJycpXG4gICAgICBleHBlY3QocmVzLmhlYWRlcnNbJ3R1cy1yZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcy5oZWFkZXJzWyd1cGxvYWQtb2Zmc2V0J10pLnRvQmUoJzExJylcbiAgICAgIGV4cGVjdChyZXMuaGVhZGVyc1sndXBsb2FkLWxlbmd0aCddKS50b0JlKCcxMScpXG5cbiAgICAgIC8vIFRoZSB2YWx1ZXMgaW4gdGhlIFVwbG9hZC1NZXRhZGF0YSBoZWFkZXIgbWF5IG5vdCBiZSBpbiB0aGUgc2FtZVxuICAgICAgLy8gb3JkZXIgYXMgd2Ugc3VibWl0dGVkIHRoZW0gKHRoZSBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmVcbiAgICAgIC8vIHRoYXQpLiBUaGVyZWZvcmUsIHdlIHNwbGl0IHRoZSB2YWx1ZXMgYW5kIHZlcmlmeSB0aGF0IGVhY2ggb25lXG4gICAgICAvLyBpcyBwcmVzZW50LlxuICAgICAgY29uc3QgbWV0YWRhdGFTdHIgPSByZXMuaGVhZGVyc1sndXBsb2FkLW1ldGFkYXRhJ11cbiAgICAgIGV4cGVjdChtZXRhZGF0YVN0cikudG9CZVRydXRoeSgpXG4gICAgICBjb25zdCBtZXRhZGF0YSA9IG1ldGFkYXRhU3RyLnNwbGl0KCcsJylcbiAgICAgIGV4cGVjdChtZXRhZGF0YSkudG9Db250YWluKCdmaWxlbmFtZSBhR1ZzYkc4dWRIaDAnKVxuICAgICAgZXhwZWN0KG1ldGFkYXRhKS50b0NvbnRhaW4oJ2ZpbGV0eXBlIGRHVjRkQzl3YkdGcGJnPT0nKVxuICAgICAgZXhwZWN0KG1ldGFkYXRhKS50b0NvbnRhaW4oJ25vbmxhdGluIGM4V0NiOFdFWTJVPScpXG4gICAgICBleHBlY3QobWV0YWRhdGEpLnRvQ29udGFpbignbnVtYmVyIE1UQXcnKVxuICAgICAgZXhwZWN0KG1ldGFkYXRhLmxlbmd0aCkudG9CZSg0KVxuXG4gICAgICByZXR1cm4gdXBsb2FkXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVVcGxvYWREZWxldGlvbih1cGxvYWQpIHtcbiAgcmV0dXJuIGF4aW9zXG4gICAgLmdldCh1cGxvYWQudXJsLCB7XG4gICAgICB2YWxpZGF0ZVN0YXR1czogKHN0YXR1cykgPT4gc3RhdHVzID09PSA0MDQsXG4gICAgfSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSg0MDQpXG5cbiAgICAgIHJldHVybiB1cGxvYWRcbiAgICB9KVxufVxuIiwiY29uc3QgeyBUZXN0SHR0cFN0YWNrLCB3YWl0YWJsZUZ1bmN0aW9uLCB3YWl0LCBnZXRCbG9iIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvdXRpbHMnKVxuY29uc3QgdHVzID0gcmVxdWlyZSgnLi4vLi4nKVxuXG5kZXNjcmliZSgndHVzJywgKCkgPT4ge1xuICBkZXNjcmliZSgncGFyYWxsZWwgdXBsb2FkaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdGhyb3cgaWYgaW5jb21wYXRpYmxlIG9wdGlvbnMgYXJlIHVzZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwge1xuICAgICAgICBlbmRwb2ludDogJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICBwYXJhbGxlbFVwbG9hZHM6IDIsXG4gICAgICAgIHVwbG9hZFVybDogJ2ZvbycsXG4gICAgICB9KVxuICAgICAgZXhwZWN0KHVwbG9hZC5zdGFydC5iaW5kKHVwbG9hZCkpLnRvVGhyb3dFcnJvcihcbiAgICAgICAgJ3R1czogY2Fubm90IHVzZSB0aGUgdXBsb2FkVXJsIG9wdGlvbiB3aGVuIHBhcmFsbGVsVXBsb2FkcyBpcyBlbmFibGVkJyxcbiAgICAgIClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBpZiBgcGFyYWxsZWxVcGxvYWRCb3VuZGFyaWVzYCBpcyBwYXNzZWQgd2l0aG91dCBgcGFyYWxsZWxVcGxvYWRzYCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCB7XG4gICAgICAgIGVuZHBvaW50OiAnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycsXG4gICAgICAgIHBhcmFsbGVsVXBsb2FkQm91bmRhcmllczogW3sgc3RhcnQ6IDAsIGVuZDogMiB9XSxcbiAgICAgIH0pXG4gICAgICBleHBlY3QodXBsb2FkLnN0YXJ0LmJpbmQodXBsb2FkKSkudG9UaHJvd0Vycm9yKFxuICAgICAgICAndHVzOiBjYW5ub3QgdXNlIHRoZSBgcGFyYWxsZWxVcGxvYWRCb3VuZGFyaWVzYCBvcHRpb24gd2hlbiBgcGFyYWxsZWxVcGxvYWRzYCBpcyBkaXNhYmxlZCcsXG4gICAgICApXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgaWYgYHBhcmFsbGVsVXBsb2FkQm91bmRhcmllc2AgaXMgbm90IHRoZSBzYW1lIGxlbmd0aCBhcyB0aGUgdmFsdWUgb2YgYHBhcmFsbGVsVXBsb2Fkc2AnLCAoKSA9PiB7XG4gICAgICBjb25zdCBmaWxlID0gZ2V0QmxvYignaGVsbG8gd29ybGQnKVxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwge1xuICAgICAgICBlbmRwb2ludDogJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICBwYXJhbGxlbFVwbG9hZHM6IDMsXG4gICAgICAgIHBhcmFsbGVsVXBsb2FkQm91bmRhcmllczogW3sgc3RhcnQ6IDAsIGVuZDogMiB9XSxcbiAgICAgIH0pXG4gICAgICBleHBlY3QodXBsb2FkLnN0YXJ0LmJpbmQodXBsb2FkKSkudG9UaHJvd0Vycm9yKFxuICAgICAgICAndHVzOiB0aGUgYHBhcmFsbGVsVXBsb2FkQm91bmRhcmllc2AgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aCBhcyB0aGUgdmFsdWUgb2YgYHBhcmFsbGVsVXBsb2Fkc2AnLFxuICAgICAgKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHNwbGl0IGEgZmlsZSBpbnRvIG11bHRpcGxlIHBhcnRzIGFuZCBjcmVhdGUgYW4gdXBsb2FkIGZvciBlYWNoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuXG4gICAgICBjb25zdCB0ZXN0VXJsU3RvcmFnZSA9IHtcbiAgICAgICAgYWRkVXBsb2FkOiAoZmluZ2VycHJpbnQsIHVwbG9hZCkgPT4ge1xuICAgICAgICAgIGV4cGVjdChmaW5nZXJwcmludCkudG9CZSgnZmluZ2VycHJpbnRlZCcpXG4gICAgICAgICAgZXhwZWN0KHVwbG9hZC51cGxvYWRVcmwpLnRvQmVVbmRlZmluZWQoKVxuICAgICAgICAgIGV4cGVjdCh1cGxvYWQuc2l6ZSkudG9CZSgxMSlcbiAgICAgICAgICBleHBlY3QodXBsb2FkLnBhcmFsbGVsVXBsb2FkVXJscykudG9FcXVhbChbXG4gICAgICAgICAgICAnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQxJyxcbiAgICAgICAgICAgICdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDInLFxuICAgICAgICAgIF0pXG5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCd0dXM6OmZpbmdlcnByaW50ZWQ6OjEzMzcnKVxuICAgICAgICB9LFxuICAgICAgICByZW1vdmVVcGxvYWQ6ICh1cmxTdG9yYWdlS2V5KSA9PiB7XG4gICAgICAgICAgZXhwZWN0KHVybFN0b3JhZ2VLZXkpLnRvQmUoJ3R1czo6ZmluZ2VycHJpbnRlZDo6MTMzNycpXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgICBzcHlPbih0ZXN0VXJsU3RvcmFnZSwgJ3JlbW92ZVVwbG9hZCcpLmFuZC5jYWxsVGhyb3VnaCgpXG4gICAgICBzcHlPbih0ZXN0VXJsU3RvcmFnZSwgJ2FkZFVwbG9hZCcpLmFuZC5jYWxsVGhyb3VnaCgpXG5cbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgdXJsU3RvcmFnZTogdGVzdFVybFN0b3JhZ2UsXG4gICAgICAgIHN0b3JlRmluZ2VycHJpbnRGb3JSZXN1bWluZzogdHJ1ZSxcbiAgICAgICAgcmVtb3ZlRmluZ2VycHJpbnRPblN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHBhcmFsbGVsVXBsb2FkczogMixcbiAgICAgICAgcmV0cnlEZWxheXM6IFsxMF0sXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBDdXN0b206ICdibGFyZ2gnLFxuICAgICAgICB9LFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIGZvbzogJ2hlbGxvJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWV0YWRhdGFGb3JQYXJ0aWFsVXBsb2Fkczoge1xuICAgICAgICAgIHRlc3Q6ICd3b3JsZCcsXG4gICAgICAgIH0sXG4gICAgICAgIG9uUHJvZ3Jlc3MoKSB7fSxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCksXG4gICAgICAgIGZpbmdlcnByaW50OiAoKSA9PiBQcm9taXNlLnJlc29sdmUoJ2ZpbmdlcnByaW50ZWQnKSxcbiAgICAgIH1cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvblByb2dyZXNzJylcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVycy5DdXN0b20pLnRvQmUoJ2JsYXJnaCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZSgnNScpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtQ29uY2F0J10pLnRvQmUoJ3BhcnRpYWwnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU1ldGFkYXRhJ10pLnRvQmUoJ3Rlc3QgZDI5eWJHUT0nKSAvLyB3b3JsZFxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDEnLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnMuQ3VzdG9tKS50b0JlKCdibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtTGVuZ3RoJ10pLnRvQmUoJzYnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUNvbmNhdCddKS50b0JlKCdwYXJ0aWFsJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1NZXRhZGF0YSddKS50b0JlKCd0ZXN0IGQyOXliR1E9JykgLy8gd29ybGRcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQyJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG5cbiAgICAgIC8vIEFzc2VydCB0aGF0IHRoZSBVUkxzIGhhdmUgYmVlbiBzdG9yZWQuXG4gICAgICBleHBlY3QodGVzdFVybFN0b3JhZ2UuYWRkVXBsb2FkKS50b0hhdmVCZWVuQ2FsbGVkKClcblxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMScpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVycy5DdXN0b20pLnRvQmUoJ2JsYXJnaCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1PZmZzZXQnXSkudG9CZSgnMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICBleHBlY3QocmVxLmJvZHkuc2l6ZSkudG9CZSg1KVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiA1LFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDInKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnMuQ3VzdG9tKS50b0JlKCdibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ10pLnRvQmUoJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nKVxuICAgICAgZXhwZWN0KHJlcS5ib2R5LnNpemUpLnRvQmUoNilcblxuICAgICAgLy8gUmV0dXJuIGFuIGVycm9yIHRvIGVuc3VyZSB0aGF0IHRoZSBpbmRpdmlkdWFsIHBhcnRpYWwgdXBsb2FkIGlzIHByb3Blcmx5IHJldHJpZWQuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQyJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdIRUFEJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogMTEsXG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAwLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDInKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnMuQ3VzdG9tKS50b0JlKCdibGFyZ2gnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ10pLnRvQmUoJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nKVxuICAgICAgZXhwZWN0KHJlcS5ib2R5LnNpemUpLnRvQmUoNilcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogNixcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzLkN1c3RvbSkudG9CZSgnYmxhcmdoJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlVW5kZWZpbmVkKClcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1Db25jYXQnXSkudG9CZShcbiAgICAgICAgJ2ZpbmFsO2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMSBodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDInLFxuICAgICAgKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU1ldGFkYXRhJ10pLnRvQmUoJ2ZvbyBhR1ZzYkc4PScpIC8vIGhlbGxvXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjAxLFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMycsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBvcHRpb25zLm9uU3VjY2Vzcy50b0JlQ2FsbGVkXG5cbiAgICAgIGV4cGVjdCh1cGxvYWQudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDMnKVxuICAgICAgZXhwZWN0KG9wdGlvbnMub25Qcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoNSwgMTEpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblByb2dyZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxMSwgMTEpXG4gICAgICBleHBlY3QodGVzdFVybFN0b3JhZ2UucmVtb3ZlVXBsb2FkKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBzcGxpdCBhIGZpbGUgaW50byBtdWx0aXBsZSBwYXJ0cyBiYXNlZCBvbiBjdXN0b20gYHBhcmFsbGVsVXBsb2FkQm91bmRhcmllc2AnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0U3RhY2sgPSBuZXcgVGVzdEh0dHBTdGFjaygpXG5cbiAgICAgIGNvbnN0IHBhcmFsbGVsVXBsb2FkQm91bmRhcmllcyA9IFtcbiAgICAgICAgeyBzdGFydDogMCwgZW5kOiAxIH0sXG4gICAgICAgIHsgc3RhcnQ6IDEsIGVuZDogMTEgfSxcbiAgICAgIF1cbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgcGFyYWxsZWxVcGxvYWRzOiAyLFxuICAgICAgICBwYXJhbGxlbFVwbG9hZEJvdW5kYXJpZXMsXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycsXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbigpLFxuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgbGV0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZSgnMScpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtQ29uY2F0J10pLnRvQmUoJ3BhcnRpYWwnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDEnLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlKCcxMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtQ29uY2F0J10pLnRvQmUoJ3BhcnRpYWwnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDInLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcblxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMScpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ10pLnRvQmUoJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nKVxuICAgICAgZXhwZWN0KHJlcS5ib2R5LnNpemUpLnRvQmUoMSlcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogMSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQyJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1PZmZzZXQnXSkudG9CZSgnMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnYXBwbGljYXRpb24vb2Zmc2V0K29jdGV0LXN0cmVhbScpXG4gICAgICBleHBlY3QocmVxLmJvZHkuc2l6ZSkudG9CZSgxMClcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogMTEsXG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAwLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDInKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU9mZnNldCddKS50b0JlKCcwJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJylcbiAgICAgIGV4cGVjdChyZXEuYm9keS5zaXplKS50b0JlKDEwKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAxMCxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZVVuZGVmaW5lZCgpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtQ29uY2F0J10pLnRvQmUoXG4gICAgICAgICdmaW5hbDtodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDEgaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQyJyxcbiAgICAgIClcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQzJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IG9wdGlvbnMub25TdWNjZXNzLnRvQmVDYWxsZWRcbiAgICAgIGV4cGVjdCh1cGxvYWQudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDMnKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGVtaXQgZXJyb3IgZnJvbSBhIHBhcnRpYWwgdXBsb2FkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBwYXJhbGxlbFVwbG9hZHM6IDIsXG4gICAgICAgIHJldHJ5RGVsYXlzOiBudWxsLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICBvbkVycm9yOiB3YWl0YWJsZUZ1bmN0aW9uKCdvbkVycm9yJyksXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVwbG9hZCA9IG5ldyB0dXMuVXBsb2FkKGZpbGUsIG9wdGlvbnMpXG4gICAgICB1cGxvYWQuc3RhcnQoKVxuXG4gICAgICBjb25zdCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtTGVuZ3RoJ10pLnRvQmUoJzUnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IGVyciA9IGF3YWl0IG9wdGlvbnMub25FcnJvci50b0JlQ2FsbGVkXG4gICAgICBleHBlY3QoZXJyLm1lc3NhZ2UpLnRvQmUoXG4gICAgICAgICd0dXM6IHVuZXhwZWN0ZWQgcmVzcG9uc2Ugd2hpbGUgY3JlYXRpbmcgdXBsb2FkLCBvcmlnaW5hdGVkIGZyb20gcmVxdWVzdCAobWV0aG9kOiBQT1NULCB1cmw6IGh0dHBzOi8vdHVzLmlvL3VwbG9hZHMsIHJlc3BvbnNlIGNvZGU6IDUwMCwgcmVzcG9uc2UgdGV4dDogLCByZXF1ZXN0IGlkOiBuL2EpJyxcbiAgICAgIClcbiAgICAgIGV4cGVjdChlcnIub3JpZ2luYWxSZXF1ZXN0KS50b0JlKHJlcSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCByZXN1bWUgdGhlIHBhcnRpYWwgdXBsb2FkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgLy8gVGhlIGNsaWVudCBzaG91bGQgcmVzdW1lIHRoZSBwYXJhbGxlbCB1cGxvYWRzLCBldmVuIGlmIGl0IGlzIG5vdFxuICAgICAgICAvLyBjb25maWd1cmVkIGZvciBuZXcgdXBsb2Fkcy5cbiAgICAgICAgcGFyYWxsZWxVcGxvYWRzOiAxLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMnLFxuICAgICAgICBvblByb2dyZXNzKCkge30sXG4gICAgICAgIG9uU3VjY2Vzczogd2FpdGFibGVGdW5jdGlvbigpLFxuICAgICAgfVxuICAgICAgc3B5T24ob3B0aW9ucywgJ29uUHJvZ3Jlc3MnKVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuXG4gICAgICB1cGxvYWQucmVzdW1lRnJvbVByZXZpb3VzVXBsb2FkKHtcbiAgICAgICAgdXJsU3RvcmFnZUtleTogJ3R1czo6ZmluZ2VycHJpbnQ6OjEzMzcnLFxuICAgICAgICBwYXJhbGxlbFVwbG9hZFVybHM6IFsnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQxJywgJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMiddLFxuICAgICAgfSlcblxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgbGV0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQxJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdIRUFEJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogNSxcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDIsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMicpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDYsXG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiAwLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDEnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXEuYm9keS5zaXplKS50b0JlKDMpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDUsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMicpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuICAgICAgZXhwZWN0KHJlcS5ib2R5LnNpemUpLnRvQmUoNilcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogNixcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtQ29uY2F0J10pLnRvQmUoXG4gICAgICAgICdmaW5hbDtodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDEgaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQyJyxcbiAgICAgIClcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQzJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IG9wdGlvbnMub25TdWNjZXNzLnRvQmVDYWxsZWRcblxuICAgICAgZXhwZWN0KHVwbG9hZC51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMycpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vblByb2dyZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCg1LCAxMSlcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uUHJvZ3Jlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDExLCAxMSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBhYm9ydCBhbGwgcGFydGlhbCB1cGxvYWRzIGFuZCByZXN1bWUgZnJvbSB0aGVtJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBwYXJhbGxlbFVwbG9hZHM6IDIsXG4gICAgICAgIGVuZHBvaW50OiAnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycsXG4gICAgICAgIG9uUHJvZ3Jlc3MoKSB7fSxcbiAgICAgICAgb25TdWNjZXNzOiB3YWl0YWJsZUZ1bmN0aW9uKCksXG4gICAgICAgIGZpbmdlcnByaW50OiAoKSA9PiBQcm9taXNlLnJlc29sdmUoJ2ZpbmdlcnByaW50ZWQnKSxcbiAgICAgIH1cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvblByb2dyZXNzJylcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMnKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVHVzLVJlc3VtYWJsZSddKS50b0JlKCcxLjAuMCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtTGVuZ3RoJ10pLnRvQmUoJzUnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUNvbmNhdCddKS50b0JlKCdwYXJ0aWFsJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1NZXRhZGF0YSddKS50b0JlVW5kZWZpbmVkKClcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQxJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2FkcycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnUE9TVCcpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1MZW5ndGgnXSkudG9CZSgnNicpXG4gICAgICBleHBlY3QocmVxLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtQ29uY2F0J10pLnRvQmUoJ3BhcnRpYWwnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLU1ldGFkYXRhJ10pLnRvQmVVbmRlZmluZWQoKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDInLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVxMSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxMS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMScpXG4gICAgICBleHBlY3QocmVxMS5tZXRob2QpLnRvQmUoJ1BBVENIJylcbiAgICAgIGV4cGVjdChyZXExLnJlcXVlc3RIZWFkZXJzWydUdXMtUmVzdW1hYmxlJ10pLnRvQmUoJzEuMC4wJylcbiAgICAgIGV4cGVjdChyZXExLnJlcXVlc3RIZWFkZXJzWydVcGxvYWQtT2Zmc2V0J10pLnRvQmUoJzAnKVxuICAgICAgZXhwZWN0KHJlcTEucmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJylcbiAgICAgIGV4cGVjdChyZXExLmJvZHkuc2l6ZSkudG9CZSg1KVxuXG4gICAgICBjb25zdCByZXEyID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEyLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQyJylcbiAgICAgIGV4cGVjdChyZXEyLm1ldGhvZCkudG9CZSgnUEFUQ0gnKVxuICAgICAgZXhwZWN0KHJlcTIucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcTIucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1PZmZzZXQnXSkudG9CZSgnMCcpXG4gICAgICBleHBlY3QocmVxMi5yZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ10pLnRvQmUoJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nKVxuICAgICAgZXhwZWN0KHJlcTIuYm9keS5zaXplKS50b0JlKDYpXG5cbiAgICAgIHVwbG9hZC5hYm9ydCgpXG5cbiAgICAgIHJlcTEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiA1LFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxMi5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDYsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICAvLyBObyBmdXJ0aGVyIHJlcXVlc3RzIHNob3VsZCBiZSBzZW50LlxuICAgICAgY29uc3QgcmVxUHJvbWlzZSA9IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW3JlcVByb21pc2UsIHdhaXQoMTAwKV0pXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCd0aW1lZCBvdXQnKVxuXG4gICAgICAvLyBSZXN0YXJ0IHRoZSB1cGxvYWRcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIC8vIFJldXNlIHRoZSBwcm9taXNlIGZyb20gYmVmb3JlIGFzIGl0IGlzIG5vdCBjYW5jZWxsZWQuXG4gICAgICByZXEgPSBhd2FpdCByZXFQcm9taXNlXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQxJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdIRUFEJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogNSxcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDUsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMicpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnSEVBRCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLUxlbmd0aCc6IDYsXG4gICAgICAgICAgJ1VwbG9hZC1PZmZzZXQnOiA2LFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwczovL3R1cy5pby91cGxvYWRzJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1R1cy1SZXN1bWFibGUnXSkudG9CZSgnMS4wLjAnKVxuICAgICAgZXhwZWN0KHJlcS5yZXF1ZXN0SGVhZGVyc1snVXBsb2FkLUxlbmd0aCddKS50b0JlVW5kZWZpbmVkKClcbiAgICAgIGV4cGVjdChyZXEucmVxdWVzdEhlYWRlcnNbJ1VwbG9hZC1Db25jYXQnXSkudG9CZShcbiAgICAgICAgJ2ZpbmFsO2h0dHBzOi8vdHVzLmlvL3VwbG9hZHMvdXBsb2FkMSBodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDInLFxuICAgICAgKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICdodHRwczovL3R1cy5pby91cGxvYWRzL3VwbG9hZDMnLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgYXdhaXQgb3B0aW9ucy5vblN1Y2Nlc3MudG9CZUNhbGxlZFxuXG4gICAgICBleHBlY3QodXBsb2FkLnVybCkudG9CZSgnaHR0cHM6Ly90dXMuaW8vdXBsb2Fkcy91cGxvYWQzJylcbiAgICAgIGV4cGVjdChvcHRpb25zLm9uUHJvZ3Jlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDUsIDExKVxuICAgICAgZXhwZWN0KG9wdGlvbnMub25Qcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoMTEsIDExKVxuICAgIH0pXG4gIH0pXG59KVxuIiwiY29uc3QgeyBUZXN0SHR0cFN0YWNrLCBnZXRCbG9iIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvdXRpbHMnKVxuY29uc3QgdHVzID0gcmVxdWlyZSgnLi4vLi4nKVxuXG5kZXNjcmliZSgndHVzJywgKCkgPT4ge1xuICBkZXNjcmliZSgndGVybWluYXRlIHVwbG9hZCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHRlcm1pbmF0ZSB1cGxvYWQgd2hlbiBhYm9ydCBpcyBjYWxsZWQgd2l0aCB0cnVlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGFib3J0UHJvbWlzZVxuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3QgZmlsZSA9IGdldEJsb2IoJ2hlbGxvIHdvcmxkJylcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGh0dHBTdGFjazogdGVzdFN0YWNrLFxuICAgICAgICBlbmRwb2ludDogJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJyxcbiAgICAgICAgY2h1bmtTaXplOiA1LFxuICAgICAgICBvbkNodW5rQ29tcGxldGUoKSB7XG4gICAgICAgICAgYWJvcnRQcm9taXNlID0gdXBsb2FkLmFib3J0KHRydWUpXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHNweU9uKG9wdGlvbnMsICdvbkNodW5rQ29tcGxldGUnKS5hbmQuY2FsbFRocm91Z2goKVxuXG4gICAgICBjb25zdCB1cGxvYWQgPSBuZXcgdHVzLlVwbG9hZChmaWxlLCBvcHRpb25zKVxuICAgICAgdXBsb2FkLnN0YXJ0KClcblxuICAgICAgbGV0IHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy8nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BPU1QnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwMSxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246ICcvZmlsZXMvZm9vJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ1BBVENIJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgICdVcGxvYWQtT2Zmc2V0JzogNSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0RFTEVURScpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KG9wdGlvbnMub25DaHVua0NvbXBsZXRlKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICAgIGF3YWl0IGFib3J0UHJvbWlzZVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHJldHJ5IHRlcm1pbmF0ZSB3aGVuIGFuIGVycm9yIGlzIHJldHVybmVkIG9uIGZpcnN0IHRyeScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBhYm9ydFByb21pc2VcbiAgICAgIGNvbnN0IHRlc3RTdGFjayA9IG5ldyBUZXN0SHR0cFN0YWNrKClcbiAgICAgIGNvbnN0IGZpbGUgPSBnZXRCbG9iKCdoZWxsbyB3b3JsZCcpXG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBodHRwU3RhY2s6IHRlc3RTdGFjayxcbiAgICAgICAgZW5kcG9pbnQ6ICdodHRwOi8vdHVzLmlvL2ZpbGVzLycsXG4gICAgICAgIGNodW5rU2l6ZTogNSxcbiAgICAgICAgcmV0cnlEZWxheXM6IFsxMCwgMTAsIDEwXSxcbiAgICAgICAgb25DaHVua0NvbXBsZXRlKCkge1xuICAgICAgICAgIGFib3J0UHJvbWlzZSA9IHVwbG9hZC5hYm9ydCh0cnVlKVxuICAgICAgICB9LFxuICAgICAgfVxuXG4gICAgICBzcHlPbihvcHRpb25zLCAnb25DaHVua0NvbXBsZXRlJykuYW5kLmNhbGxUaHJvdWdoKClcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZSwgb3B0aW9ucylcbiAgICAgIHVwbG9hZC5zdGFydCgpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQT1NUJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiAyMDEsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiAnL2ZpbGVzL2ZvbycsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdQQVRDSCcpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICByZXNwb25zZUhlYWRlcnM6IHtcbiAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IDUsXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdERUxFVEUnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDQyMyxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0RFTEVURScpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgfSlcblxuICAgICAgYXdhaXQgYWJvcnRQcm9taXNlXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkNodW5rQ29tcGxldGUpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHN0b3AgcmV0cnlpbmcgd2hlbiBhbGwgZGVsYXlzIGFyZSB1c2VkIHVwJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIHJldHJ5RGVsYXlzOiBbMTAsIDEwXSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGVybWluYXRlUHJvbWlzZSA9IHR1cy5VcGxvYWQudGVybWluYXRlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycsIG9wdGlvbnMpXG5cbiAgICAgIGxldCByZXEgPSBhd2FpdCB0ZXN0U3RhY2submV4dFJlcXVlc3QoKVxuICAgICAgZXhwZWN0KHJlcS51cmwpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vZmlsZXMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdERUxFVEUnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIH0pXG5cbiAgICAgIHJlcSA9IGF3YWl0IHRlc3RTdGFjay5uZXh0UmVxdWVzdCgpXG4gICAgICBleHBlY3QocmVxLnVybCkudG9CZSgnaHR0cDovL3R1cy5pby9maWxlcy9mb28nKVxuICAgICAgZXhwZWN0KHJlcS5tZXRob2QpLnRvQmUoJ0RFTEVURScpXG5cbiAgICAgIHJlcS5yZXNwb25kV2l0aCh7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgfSlcblxuICAgICAgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL2ZpbGVzL2ZvbycpXG4gICAgICBleHBlY3QocmVxLm1ldGhvZCkudG9CZSgnREVMRVRFJylcblxuICAgICAgcmVxLnJlc3BvbmRXaXRoKHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBleHBlY3RBc3luYyh0ZXJtaW5hdGVQcm9taXNlKS50b0JlUmVqZWN0ZWRXaXRoRXJyb3IoXG4gICAgICAgIC90dXM6IHVuZXhwZWN0ZWQgcmVzcG9uc2Ugd2hpbGUgdGVybWluYXRpbmcgdXBsb2FkLyxcbiAgICAgIClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBpbnZva2UgdGhlIHJlcXVlc3QgYW5kIHJlc3BvbnNlIFByb21pc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFN0YWNrID0gbmV3IFRlc3RIdHRwU3RhY2soKVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaHR0cFN0YWNrOiB0ZXN0U3RhY2ssXG4gICAgICAgIG9uQmVmb3JlUmVxdWVzdChyZXEpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChyZXEuZ2V0VVJMKCkpLnRvQmUoJ2h0dHA6Ly90dXMuaW8vdXBsb2Fkcy9mb28nKVxuICAgICAgICAgICAgZXhwZWN0KHJlcS5nZXRNZXRob2QoKSkudG9CZSgnREVMRVRFJylcbiAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIG9uQWZ0ZXJSZXNwb25zZShyZXEsIHJlcykge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KHJlcS5nZXRVUkwoKSkudG9CZSgnaHR0cDovL3R1cy5pby91cGxvYWRzL2ZvbycpXG4gICAgICAgICAgICBleHBlY3QocmVxLmdldE1ldGhvZCgpKS50b0JlKCdERUxFVEUnKVxuICAgICAgICAgICAgZXhwZWN0KHJlcy5nZXRTdGF0dXMoKSkudG9CZSgyMDQpXG4gICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgfVxuICAgICAgc3B5T24ob3B0aW9ucywgJ29uQmVmb3JlUmVxdWVzdCcpXG4gICAgICBzcHlPbihvcHRpb25zLCAnb25BZnRlclJlc3BvbnNlJylcblxuICAgICAgY29uc3QgdGVybWluYXRlUHJvbWlzZSA9IHR1cy5VcGxvYWQudGVybWluYXRlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvZm9vJywgb3B0aW9ucylcblxuICAgICAgY29uc3QgcmVxID0gYXdhaXQgdGVzdFN0YWNrLm5leHRSZXF1ZXN0KClcbiAgICAgIGV4cGVjdChyZXEudXJsKS50b0JlKCdodHRwOi8vdHVzLmlvL3VwbG9hZHMvZm9vJylcbiAgICAgIGV4cGVjdChyZXEubWV0aG9kKS50b0JlKCdERUxFVEUnKVxuXG4gICAgICByZXEucmVzcG9uZFdpdGgoe1xuICAgICAgICBzdGF0dXM6IDIwNCxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGV4cGVjdEFzeW5jKHRlcm1pbmF0ZVByb21pc2UpLnRvQmVSZXNvbHZlZCgpXG4gICAgICBleHBlY3Qob3B0aW9ucy5vbkJlZm9yZVJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgICAgZXhwZWN0KG9wdGlvbnMub25BZnRlclJlc3BvbnNlKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==
diff --git a/node_modules/tus-js-client/dist/tus.js b/node_modules/tus-js-client/dist/tus.js
index 918cd45..abd29db 100644
--- a/node_modules/tus-js-client/dist/tus.js
+++ b/node_modules/tus-js-client/dist/tus.js
@@ -807,6 +807,7 @@ function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol"
 function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 var PROTOCOL_TUS_V1 = 'tus-v1';
 var PROTOCOL_IETF_DRAFT_03 = 'ietf-draft-03';
+var PROTOCOL_IETF_DRAFT_05 = 'ietf-draft-05';
 var defaultOptions = {
   endpoint: null,
   uploadUrl: null,
@@ -900,6 +901,9 @@ var BaseUpload = /*#__PURE__*/function () {
     // An array of upload URLs which are used for uploading the different
     // parts, if the parallelUploads option is used.
     this._parallelUploadUrls = null;
+
+    // The remote upload resource is deferred
+    this._deferred = false;
   }
 
   /**
@@ -936,7 +940,7 @@ var BaseUpload = /*#__PURE__*/function () {
         this._emitError(new Error('tus: no file or stream to upload provided'));
         return;
       }
-      if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03].includes(this.options.protocol)) {
+      if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03, PROTOCOL_IETF_DRAFT_05].includes(this.options.protocol)) {
         this._emitError(new Error("tus: unsupported protocol ".concat(this.options.protocol)));
         return;
       }
@@ -1323,6 +1327,7 @@ var BaseUpload = /*#__PURE__*/function () {
       var req = this._openRequest('POST', this.options.endpoint);
       if (this.options.uploadLengthDeferred) {
         req.setHeader('Upload-Defer-Length', '1');
+        this._deferred = true;
       } else {
         req.setHeader('Upload-Length', "".concat(this._size));
       }
@@ -1337,7 +1342,7 @@ var BaseUpload = /*#__PURE__*/function () {
         this._offset = 0;
         promise = this._addChunkToRequest(req);
       } else {
-        if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+        if (this.options.protocol === PROTOCOL_IETF_DRAFT_03 || this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
           req.setHeader('Upload-Complete', '?0');
         }
         promise = this._sendRequest(req, null);
@@ -1422,8 +1427,10 @@ var BaseUpload = /*#__PURE__*/function () {
           _this7._emitHttpError(req, res, 'tus: invalid or missing offset value');
           return;
         }
+        var deferLength = parseInt(xhr.getResponseHeader("Upload-Defer-Length"), 10);
+        _this7._deferred = deferLength === 1;
         var length = Number.parseInt(res.getHeader('Upload-Length'), 10);
-        if (Number.isNaN(length) && !_this7.options.uploadLengthDeferred && _this7.options.protocol === PROTOCOL_TUS_V1) {
+        if (Number.isNaN(length) && !_this7._deferred && !_this7.options.uploadLengthDeferred && _this7.options.protocol === PROTOCOL_TUS_V1) {
           _this7._emitHttpError(req, res, 'tus: invalid or missing length value');
           return;
         }
@@ -1506,7 +1513,11 @@ var BaseUpload = /*#__PURE__*/function () {
       req.setProgressHandler(function (bytesSent) {
         _this9._emitProgress(start + bytesSent, _this9._size);
       });
-      req.setHeader('Content-Type', 'application/offset+octet-stream');
+      if (this.options.protocol === PROTOCOL_TUS_V1) {
+        req.setHeader('Content-Type', 'application/offset+octet-stream');
+      } else if (this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
+        req.setHeader('Content-Type', 'application/partial-upload');
+      }
 
       // The specified chunkSize may be Infinity or the calcluated end position
       // may exceed the file's size. In both cases, we limit the end position to
@@ -1522,9 +1533,10 @@ var BaseUpload = /*#__PURE__*/function () {
         // If the upload length is deferred, the upload size was not specified during
         // upload creation. So, if the file reader is done reading, we know the total
         // upload size and can tell the tus server.
-        if (_this9.options.uploadLengthDeferred && done) {
+        if (_this9._deferred && (!_this9.options.uploadLengthDeferred || done)) {
           _this9._size = _this9._offset + valueSize;
-          req.setHeader('Upload-Length', "".concat(_this9._size));
+          req.setHeader("Upload-Length", "".concat(_this9._size));
+          _this9._deferred = false;
         }
 
         // The specified uploadSize might not match the actual amount of data that a source
@@ -1539,7 +1551,7 @@ var BaseUpload = /*#__PURE__*/function () {
         if (value === null) {
           return _this9._sendRequest(req);
         }
-        if (_this9.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+        if (_this9.options.protocol === PROTOCOL_IETF_DRAFT_03 || _this9.options.protocol === PROTOCOL_IETF_DRAFT_05) {
           req.setHeader('Upload-Complete', done ? '?1' : '?0');
         }
         _this9._emitProgress(_this9._offset, _this9._size);
@@ -1712,6 +1724,8 @@ function openRequest(method, url, options) {
   var req = options.httpStack.createRequest(method, url);
   if (options.protocol === PROTOCOL_IETF_DRAFT_03) {
     req.setHeader('Upload-Draft-Interop-Version', '5');
+  } else if (options.protocol === PROTOCOL_IETF_DRAFT_05) {
+    req.setHeader('Upload-Draft-Interop-Version', '6');
   } else {
     req.setHeader('Tus-Resumable', '1.0.0');
   }
diff --git a/node_modules/tus-js-client/dist/tus.js.map b/node_modules/tus-js-client/dist/tus.js.map
index 84e6e7f..4c79e04 100644
--- a/node_modules/tus-js-client/dist/tus.js.map
+++ b/node_modules/tus-js-client/dist/tus.js.map
@@ -27,7 +27,7 @@
     "node_modules/url-parse/index.js"
   ],
   "names": [],
-  "mappings": "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AC,SAAS,GAAG,SAAS,CAAC;EAClD,IAAM,KAAK,GAAG,EAAE;EAEhB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IAClC,KAAK,CAAC,IAAI,CAAC;MACT,KAAK,EAAE,QAAQ,GAAG,CAAC;MACnB,GAAG,EAAE,QAAQ,IAAI,CAAC,GAAG,CAAC;IACxB,CAAC,CAAC;EACJ;EAEA,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,SAAS;EAEpC,OAAO,KAAK;AACd;AAEA,UAAU,CAAC,cAAc,GAAG,cAAc;AAAA,IAAA,QAAA,GAAA,OAAA,cAE3B,UAAU;;;;;;;;;AC9kCzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,IAAI,CAAA,EAAG;EAC7B,OAAO,sCAAsC,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,CAAC,EAAK;IACpE,IAAM,CAAC,GAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAI,CAAC;IAClC,IAAM,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAI,CAAC,GAAG,GAAG,GAAI,GAAG;IACzC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;EACvB,CAAC,CAAC;AACJ;;;ACltJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
+  "mappings": "AAAA;;;;;;;ACAA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA;AAEA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA;AAAoD,SAAA,uBAAA,GAAA,WAAA,GAAA,IAAA,GAAA,CAAA,UAAA,GAAA,GAAA,gBAAA,GAAA;AAAA,SAAA,QAAA,CAAA,sCAAA,OAAA,wBAAA,MAAA,uBAAA,MAAA,CAAA,QAAA,aAAA,CAAA,kBAAA,CAAA,gBAAA,CAAA,WAAA,CAAA,yBAAA,MAAA,IAAA,CAAA,CAAA,WAAA,KAAA,MAAA,IAAA,CAAA,KAAA,MAAA,CAAA,SAAA,qBAAA,CAAA,KAAA,OAAA,CAAA,CAAA;AAAA,SAAA,oBAAA,kBAHpD,qJAAA,mBAAA,YAAA,oBAAA,WAAA,CAAA,SAAA,CAAA,EAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,CAAA,cAAA,EAAA,CAAA,GAAA,MAAA,CAAA,cAAA,cAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,KAAA,CAAA,wBAAA,MAAA,GAAA,MAAA,OAAA,CAAA,GAAA,CAAA,CAAA,QAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,aAAA,uBAAA,CAAA,GAAA,CAAA,CAAA,WAAA,8BAAA,OAAA,CAAA,EAAA,CAAA,EAAA,CAAA,WAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,CAAA,IAAA,KAAA,EAAA,CAAA,EAAA,UAAA,MAAA,YAAA,MAAA,QAAA,SAAA,CAAA,CAAA,CAAA,WAAA,MAAA,mBAAA,CAAA,IAAA,MAAA,YAAA,OAAA,CAAA,EAAA,CAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAA,CAAA,gBAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,SAAA,YAAA,SAAA,GAAA,CAAA,GAAA,SAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,SAAA,GAAA,CAAA,OAAA,OAAA,CAAA,CAAA,gBAAA,CAAA,CAAA,CAAA,eAAA,KAAA,EAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,aAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,mBAAA,IAAA,YAAA,GAAA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,cAAA,CAAA,aAAA,IAAA,WAAA,GAAA,EAAA,CAAA,QAAA,CAAA,CAAA,IAAA,GAAA,IAAA,MAAA,CAAA,qBAAA,CAAA,qBAAA,CAAA,gBAAA,CAAA,gBAAA,CAAA,gBAAA,UAAA,cAAA,kBAAA,cAAA,2BAAA,SAAA,CAAA,OAAA,MAAA,CAAA,CAAA,EAAA,CAAA,qCAAA,CAAA,GAAA,MAAA,CAAA,cAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,GAAA,CAAA,OAAA,CAAA,GAAA,0BAAA,CAAA,SAAA,GAAA,SAAA,CAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,YAAA,sBAAA,CAAA,gCAAA,OAAA,WAAA,CAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,YAAA,CAAA,gBAAA,OAAA,CAAA,CAAA,EAAA,CAAA,sBAAA,cAAA,CAAA,EAAA,CAAA,aAAA,OAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,mBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,SAAA,CAAA,gBAAA,OAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,OAAA,EAAA,IAAA,WAAA,CAAA,IAAA,MAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,gBAAA,CAAA,IAAA,MAAA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,IAAA,WAAA,CAAA,IAAA,CAAA,CAAA,KAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,gBAAA,CAAA,WAAA,MAAA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,oBAAA,KAAA,WAAA,MAAA,CAAA,EAAA,CAAA,aAAA,2BAAA,eAAA,CAAA,WAAA,CAAA,EAAA,CAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,0BAAA,EAAA,0BAAA,IAAA,0BAAA,qBAAA,iBAAA,CAAA,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,CAAA,mBAAA,CAAA,EAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,KAAA,sCAAA,CAAA,KAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,WAAA,KAAA,EAAA,CAAA,EAAA,IAAA,eAAA,CAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAA,GAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,QAAA,MAAA,CAAA,QAAA,CAAA,GAAA,mBAAA,CAAA,CAAA,EAAA,CAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,GAAA,sBAAA,CAAA,CAAA,MAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,GAAA,uBAAA,CAAA,CAAA,MAAA,IAAA,CAAA,CAAA,MAAA,WAAA,CAAA,CAAA,GAAA,GAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,oBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAA,KAAA,CAAA,qBAAA,KAAA,EAAA,CAAA,CAAA,GAAA,EAAA,IAAA,EAAA,CAAA,CAAA,IAAA,kBAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,MAAA,YAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,GAAA,mBAAA,oBAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,CAAA,GAAA,CAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA,QAAA,qBAAA,CAAA,IAAA,CAAA,CAAA,QAAA,eAAA,CAAA,CAAA,MAAA,aAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,mBAAA,CAAA,CAAA,EAAA,CAAA,eAAA,CAAA,CAAA,MAAA,kBAAA,CAAA,KAAA,CAAA,CAAA,MAAA,YAAA,CAAA,CAAA,GAAA,OAAA,SAAA,uCAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA,GAAA,mBAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,MAAA,YAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,QAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,GAAA,CAAA,CAAA,IAAA,IAAA,CAAA,CAAA,CAAA,CAAA,UAAA,IAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,OAAA,eAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,MAAA,WAAA,CAAA,CAAA,GAAA,GAAA,CAAA,GAAA,CAAA,CAAA,QAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,YAAA,CAAA,CAAA,GAAA,OAAA,SAAA,sCAAA,CAAA,CAAA,QAAA,SAAA,CAAA,cAAA,aAAA,CAAA,QAAA,CAAA,KAAA,MAAA,EAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA,QAAA,GAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA,UAAA,GAAA,CAAA,KAAA,CAAA,CAAA,QAAA,GAAA,CAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA,cAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,UAAA,QAAA,CAAA,CAAA,IAAA,oBAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,UAAA,GAAA,CAAA,aAAA,QAAA,CAAA,SAAA,UAAA,MAAA,MAAA,aAAA,CAAA,CAAA,OAAA,CAAA,YAAA,cAAA,KAAA,iBAAA,OAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,CAAA,4BAAA,CAAA,CAAA,IAAA,SAAA,CAAA,OAAA,KAAA,CAAA,CAAA,CAAA,MAAA,SAAA,CAAA,OAAA,CAAA,YAAA,KAAA,aAAA,CAAA,GAAA,CAAA,CAAA,MAAA,OAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,UAAA,IAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,IAAA,OAAA,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,CAAA,EAAA,IAAA,CAAA,IAAA,OAAA,IAAA,YAAA,CAAA,CAAA,IAAA,GAAA,CAAA,gBAAA,SAAA,CAAA,OAAA,CAAA,CAAA,kCAAA,iBAAA,CAAA,SAAA,GAAA,0BAAA,EAAA,CAAA,CAAA,CAAA,mBAAA,KAAA,EAAA,0BAAA,EAAA,YAAA,SAAA,CAAA,CAAA,0BAAA,mBAAA,KAAA,EAAA,iBAAA,EAAA,YAAA,SAAA,iBAAA,CAAA,WAAA,GAAA,MAAA,CAAA,0BAAA,EAAA,CAAA,wBAAA,CAAA,CAAA,mBAAA,aAAA,CAAA,QAAA,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,WAAA,WAAA,CAAA,KAAA,CAAA,KAAA,iBAAA,6BAAA,CAAA,CAAA,WAAA,IAAA,CAAA,CAAA,IAAA,OAAA,CAAA,CAAA,IAAA,aAAA,CAAA,WAAA,MAAA,CAAA,cAAA,GAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,0BAAA,KAAA,CAAA,CAAA,SAAA,GAAA,0BAAA,EAAA,MAAA,CAAA,CAAA,EAAA,CAAA,yBAAA,CAAA,CAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,KAAA,aAAA,CAAA,aAAA,OAAA,EAAA,CAAA,OAAA,qBAAA,CAAA,aAAA,CAAA,SAAA,GAAA,MAAA,CAAA,aAAA,CAAA,SAAA,EAAA,CAAA,iCAAA,CAAA,CAAA,aAAA,GAAA,aAAA,EAAA,CAAA,CAAA,KAAA,aAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,eAAA,CAAA,KAAA,CAAA,GAAA,OAAA,OAAA,CAAA,OAAA,aAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,UAAA,CAAA,CAAA,mBAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,GAAA,IAAA,WAAA,CAAA,WAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,IAAA,WAAA,qBAAA,CAAA,CAAA,GAAA,MAAA,CAAA,CAAA,EAAA,CAAA,gBAAA,MAAA,CAAA,CAAA,EAAA,CAAA,iCAAA,MAAA,CAAA,CAAA,6DAAA,CAAA,CAAA,IAAA,aAAA,CAAA,QAAA,CAAA,GAAA,MAAA,CAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,UAAA,CAAA,CAAA,OAAA,aAAA,KAAA,WAAA,CAAA,CAAA,MAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA,IAAA,CAAA,SAAA,IAAA,CAAA,KAAA,GAAA,CAAA,EAAA,IAAA,CAAA,IAAA,OAAA,IAAA,WAAA,IAAA,CAAA,IAAA,OAAA,IAAA,QAAA,CAAA,CAAA,MAAA,GAAA,MAAA,EAAA,OAAA,CAAA,SAAA,KAAA,WAAA,EAAA,OAAA,EAAA,KAAA,WAAA,MAAA,CAAA,aAAA,IAAA,WAAA,IAAA,WAAA,IAAA,QAAA,KAAA,GAAA,CAAA,OAAA,IAAA,YAAA,QAAA,cAAA,MAAA,gBAAA,GAAA,GAAA,CAAA,OAAA,UAAA,CAAA,OAAA,CAAA,aAAA,IAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,CAAA,MAAA,OAAA,CAAA,CAAA,IAAA,OAAA,CAAA,MAAA,KAAA,EAAA,CAAA,CAAA,KAAA,cAAA,CAAA,IAAA,CAAA,MAAA,IAAA,WAAA,KAAA,SAAA,IAAA,WAAA,CAAA,QAAA,UAAA,IAAA,UAAA,kBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,CAAA,GAAA,cAAA,IAAA,KAAA,iBAAA,WAAA,kBAAA,CAAA,aAAA,IAAA,QAAA,CAAA,MAAA,CAAA,kBAAA,OAAA,CAAA,EAAA,CAAA,WAAA,CAAA,CAAA,IAAA,YAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,CAAA,CAAA,IAAA,GAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,MAAA,WAAA,CAAA,CAAA,GAAA,GAAA,CAAA,KAAA,CAAA,aAAA,CAAA,QAAA,UAAA,CAAA,MAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,UAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,UAAA,iBAAA,CAAA,CAAA,MAAA,SAAA,MAAA,aAAA,CAAA,CAAA,MAAA,SAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,aAAA,IAAA,GAAA,CAAA,CAAA,QAAA,SAAA,MAAA,CAAA,CAAA,CAAA,QAAA,gBAAA,IAAA,GAAA,CAAA,CAAA,UAAA,SAAA,MAAA,CAAA,CAAA,CAAA,UAAA,cAAA,CAAA,aAAA,IAAA,GAAA,CAAA,CAAA,QAAA,SAAA,MAAA,CAAA,CAAA,CAAA,QAAA,qBAAA,CAAA,QAAA,KAAA,qDAAA,IAAA,GAAA,CAAA,CAAA,UAAA,SAAA,MAAA,CAAA,CAAA,CAAA,UAAA,YAAA,MAAA,WAAA,OAAA,CAAA,EAAA,CAAA,aAAA,CAAA,QAAA,UAAA,CAAA,MAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,UAAA,CAAA,CAAA,OAAA,CAAA,CAAA,MAAA,SAAA,IAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,wBAAA,IAAA,GAAA,CAAA,CAAA,UAAA,QAAA,CAAA,GAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,UAAA,KAAA,CAAA,cAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,UAAA,cAAA,CAAA,CAAA,IAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,CAAA,SAAA,MAAA,gBAAA,IAAA,GAAA,CAAA,CAAA,UAAA,EAAA,CAAA,SAAA,QAAA,CAAA,CAAA,MAAA,QAAA,WAAA,SAAA,CAAA,EAAA,CAAA,oBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,CAAA,GAAA,qBAAA,CAAA,CAAA,IAAA,mBAAA,CAAA,CAAA,IAAA,QAAA,IAAA,GAAA,CAAA,CAAA,GAAA,gBAAA,CAAA,CAAA,IAAA,SAAA,IAAA,QAAA,GAAA,GAAA,CAAA,CAAA,GAAA,OAAA,MAAA,kBAAA,IAAA,yBAAA,CAAA,CAAA,IAAA,IAAA,CAAA,UAAA,IAAA,GAAA,CAAA,GAAA,CAAA,KAAA,MAAA,WAAA,OAAA,CAAA,aAAA,CAAA,QAAA,UAAA,CAAA,MAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,UAAA,CAAA,CAAA,OAAA,CAAA,CAAA,UAAA,KAAA,CAAA,cAAA,QAAA,CAAA,CAAA,CAAA,UAAA,EAAA,CAAA,CAAA,QAAA,GAAA,aAAA,CAAA,CAAA,GAAA,CAAA,yBAAA,OAAA,CAAA,aAAA,CAAA,QAAA,UAAA,CAAA,MAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,UAAA,CAAA,CAAA,OAAA,CAAA,CAAA,MAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,UAAA,kBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,aAAA,CAAA,CAAA,YAAA,CAAA,YAAA,KAAA,8BAAA,aAAA,WAAA,cAAA,CAAA,EAAA,CAAA,EAAA,CAAA,gBAAA,QAAA,KAAA,QAAA,EAAA,MAAA,CAAA,CAAA,GAAA,UAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,oBAAA,MAAA,UAAA,GAAA,GAAA,CAAA,GAAA,CAAA,OAAA,CAAA;AAAA,SAAA,mBAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,cAAA,IAAA,GAAA,GAAA,CAAA,GAAA,EAAA,GAAA,OAAA,KAAA,GAAA,IAAA,CAAA,KAAA,WAAA,KAAA,IAAA,MAAA,CAAA,KAAA,iBAAA,IAAA,CAAA,IAAA,IAAA,OAAA,CAAA,KAAA,YAAA,OAAA,CAAA,OAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,EAAA,MAAA;AAAA,SAAA,kBAAA,EAAA,6BAAA,IAAA,SAAA,IAAA,GAAA,SAAA,aAAA,OAAA,WAAA,OAAA,EAAA,MAAA,QAAA,GAAA,GAAA,EAAA,CAAA,KAAA,CAAA,IAAA,EAAA,IAAA,YAAA,MAAA,KAAA,IAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,UAAA,KAAA,cAAA,OAAA,GAAA,IAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,WAAA,GAAA,KAAA,KAAA,CAAA,SAAA;AAAA,SAAA,gBAAA,QAAA,EAAA,WAAA,UAAA,QAAA,YAAA,WAAA,eAAA,SAAA;AAAA,SAAA,kBAAA,MAAA,EAAA,KAAA,aAAA,CAAA,MAAA,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,CAAA,UAAA,UAAA,GAAA,KAAA,CAAA,CAAA,GAAA,UAAA,CAAA,UAAA,GAAA,UAAA,CAAA,UAAA,WAAA,UAAA,CAAA,YAAA,wBAAA,UAAA,EAAA,UAAA,CAAA,QAAA,SAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,cAAA,CAAA,UAAA,CAAA,GAAA,GAAA,UAAA;AAAA,SAAA,aAAA,WAAA,EAAA,UAAA,EAAA,WAAA,QAAA,UAAA,EAAA,iBAAA,CAAA,WAAA,CAAA,SAAA,EAAA,UAAA,OAAA,WAAA,EAAA,iBAAA,CAAA,WAAA,EAAA,WAAA,GAAA,MAAA,CAAA,cAAA,CAAA,WAAA,iBAAA,QAAA,mBAAA,WAAA;AAAA,SAAA,eAAA,CAAA,QAAA,CAAA,GAAA,YAAA,CAAA,CAAA,gCAAA,OAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AAAA,SAAA,aAAA,CAAA,EAAA,CAAA,oBAAA,OAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,WAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,gCAAA,OAAA,CAAA,CAAA,UAAA,CAAA,YAAA,SAAA,yEAAA,CAAA,GAAA,MAAA,GAAA,MAAA,EAAA,CAAA;AAAA,IAKqB,UAAU,GAAA,OAAA;EAAA,SAAA,WAAA;IAAA,eAAA,OAAA,UAAA;EAAA;EAAA,OAAA,YAAA,CAAA,UAAA;IAAA,GAAA;IAAA,KAAA;MAAA,IAAA,SAAA,GAAA,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAC7B,SAAA,QAAe,KAAK,EAAE,SAAS;QAAA,IAAA,IAAA;QAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;UAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA;cAAA,MAKzB,IAAA,yBAAa,EAAC,CAAC,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC,GAAG,KAAK,WAAW;gBAAA,QAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,QAAA,CAAA,IAAA;cAAA,QAAA,CAAA,IAAA;cAAA,OAEzC,IAAA,qBAAS,EAAC,KAAK,CAAC,GAAG,CAAC;YAAA;cAAjC,IAAI,GAAA,QAAA,CAAA,IAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WACH,IAAI,sBAAU,CAAC,IAAI,CAAC;YAAA;cAAA,QAAA,CAAA,IAAA;cAAA,QAAA,CAAA,EAAA,GAAA,QAAA;cAAA,MAErB,IAAI,KAAK,uFAAA,MAAA,CAAA,QAAA,CAAA,EAAA,CAEf,CAAC;YAAA;cAAA,MAQD,OAAO,KAAK,CAAC,KAAK,KAAK,UAAU,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,WAAW;gBAAA,QAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WACjE,OAAO,CAAC,OAAO,CAAC,IAAI,sBAAU,CAAC,KAAK,CAAC,CAAC;YAAA;cAAA,MAG3C,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU;gBAAA,QAAA,CAAA,IAAA;gBAAA;cAAA;cAClC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;cAAA,IACxB,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAAA,QAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WACtB,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,mFACF,CACF,CAAC;YAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WAGI,OAAO,CAAC,OAAO,CAAC,IAAI,wBAAY,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WAGrD,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,oFACF,CACF,CAAC;YAAA;YAAA;cAAA,OAAA,QAAA,CAAA,IAAA;UAAA;QAAA,GAAA,OAAA;MAAA,CACF;MAAA,SAAA,SAAA,EAAA,EAAA,GAAA;QAAA,OAAA,SAAA,CAAA,KAAA,OAAA,SAAA;MAAA;MAAA,OAAA,QAAA;IAAA;EAAA;AAAA;;;;;;;;;ACjDH,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA;AAA8C,SAAA,uBAAA,GAAA,WAAA,GAAA,IAAA,GAAA,CAAA,UAAA,GAAA,GAAA,gBAAA,GAAA;AAE9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE;EACjD,IAAI,IAAA,yBAAa,EAAC,CAAC,EAAE;IACnB,OAAO,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;EAC/D;EAEA,OAAO,OAAO,CAAC,OAAO,CACpB,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAC3F,CAAC;AACH;AAEA,SAAS,sBAAsB,CAAC,IAAI,EAAE,OAAO,EAAE;EAC7C,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ;EAC3E,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,IAAI,QAAQ,EAAE,IAAI,CAAC,IAAI,IAAI,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAC9F,GACF,CAAC;AACH;AAEA,SAAS,QAAQ,CAAC,GAAG,EAAE;EACrB;EACA,IAAI,IAAI,GAAG,CAAC;EACZ,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;IACpB,OAAO,IAAI;EACb;EACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,IAAM,KAAI,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9B,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,KAAI;IAChC,IAAI,IAAI,IAAI,EAAC;EACf;EACA,OAAO,IAAI;AACb;;;;;;;;;;;;;;;ICxCqB,YAAY,GAAA,OAAA;EAAA,SAAA,aAAA;IAAA,eAAA,OAAA,YAAA;EAAA;EAAA,OAAA,YAAA,CAAA,YAAA;IAAA,GAAA;IAAA,KAAA,EAC/B,SAAA,cAAc,MAAM,EAAE,GAAG,EAAE;MACzB,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACjC;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,QAAA,EAAU;MACR,OAAO,cAAc;IACvB;EAAC;AAAA;AAAA,IAGG,OAAO;EACX,SAAA,QAAY,MAAM,EAAE,GAAG,EAAE;IAAA,eAAA,OAAA,OAAA;IACvB,IAAI,CAAC,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC;IAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;IAEjC,IAAI,CAAC,OAAO,GAAG,MAAM;IACrB,IAAI,CAAC,IAAI,GAAG,GAAG;IACf,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;EACpB;EAAC,OAAA,YAAA,CAAA,OAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAA,EAAY;MACV,OAAO,IAAI,CAAC,OAAO;IACrB;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,OAAA,EAAS;MACP,OAAO,IAAI,CAAC,IAAI;IAClB;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAU,MAAM,EAAE,KAAK,EAAE;MACvB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC;MACzC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,KAAK;IAC/B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAU,MAAM,EAAE;MAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC9B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,mBAAmB,eAAe,EAAE;MAClC;MACA,IAAI,EAAE,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;QAC5B;MACF;MAEA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,UAAC,CAAC,EAAK;QACnC,IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAE;UACvB;QACF;QAEA,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC;MAC3B,CAAC;IACH;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,KAAA,EAAkB;MAAA,IAAA,KAAA;MAAA,IAAb,IAAI,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,IAAI;MACd,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;QACtC,KAAI,CAAC,IAAI,CAAC,MAAM,GAAG,YAAM;UACvB,OAAO,CAAC,IAAI,QAAQ,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;QAED,KAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAC,GAAG,EAAK;UAC3B,MAAM,CAAC,GAAG,CAAC;QACb,CAAC;QAED,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,MAAA,EAAQ;MACN,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MACjB,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;IAC1B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,oBAAA,EAAsB;MACpB,OAAO,IAAI,CAAC,IAAI;IAClB;EAAC;AAAA;AAAA,IAGG,QAAQ;EACZ,SAAA,SAAY,GAAG,EAAE;IAAA,eAAA,OAAA,QAAA;IACf,IAAI,CAAC,IAAI,GAAG,GAAG;EACjB;EAAC,OAAA,YAAA,CAAA,QAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAA,EAAY;MACV,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM;IACzB;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAU,MAAM,EAAE;MAChB,OAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;IAC5C;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,QAAA,EAAU;MACR,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY;IAC/B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,oBAAA,EAAsB;MACpB,OAAO,IAAI,CAAC,IAAI;IAClB;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/FH,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,OAAA,GAAA,OAAA;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA;AAEA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,WAAA,GAAA,OAAA;AAAoE,SAAA,uBAAA,GAAA,WAAA,GAAA,IAAA,GAAA,CAAA,UAAA,GAAA,GAAA,gBAAA,GAAA;AAAA,SAAA,QAAA,CAAA,sCAAA,OAAA,wBAAA,MAAA,uBAAA,MAAA,CAAA,QAAA,aAAA,CAAA,kBAAA,CAAA,gBAAA,CAAA,WAAA,CAAA,yBAAA,MAAA,IAAA,CAAA,CAAA,WAAA,KAAA,MAAA,IAAA,CAAA,KAAA,MAAA,CAAA,SAAA,qBAAA,CAAA,KAAA,OAAA,CAAA,CAAA;AAAA,SAAA,gBAAA,QAAA,EAAA,WAAA,UAAA,QAAA,YAAA,WAAA,eAAA,SAAA;AAAA,SAAA,kBAAA,MAAA,EAAA,KAAA,aAAA,CAAA,MAAA,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,CAAA,UAAA,UAAA,GAAA,KAAA,CAAA,CAAA,GAAA,UAAA,CAAA,UAAA,GAAA,UAAA,CAAA,UAAA,WAAA,UAAA,CAAA,YAAA,wBAAA,UAAA,EAAA,UAAA,CAAA,QAAA,SAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,cAAA,CAAA,UAAA,CAAA,GAAA,GAAA,UAAA;AAAA,SAAA,aAAA,WAAA,EAAA,UAAA,EAAA,WAAA,QAAA,UAAA,EAAA,iBAAA,CAAA,WAAA,CAAA,SAAA,EAAA,UAAA,OAAA,WAAA,EAAA,iBAAA,CAAA,WAAA,EAAA,WAAA,GAAA,MAAA,CAAA,cAAA,CAAA,WAAA,iBAAA,QAAA,mBAAA,WAAA;AAAA,SAAA,WAAA,CAAA,EAAA,CAAA,EAAA,CAAA,WAAA,CAAA,GAAA,eAAA,CAAA,CAAA,GAAA,0BAAA,CAAA,CAAA,EAAA,yBAAA,KAAA,OAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,QAAA,eAAA,CAAA,CAAA,EAAA,WAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA;AAAA,SAAA,2BAAA,IAAA,EAAA,IAAA,QAAA,IAAA,KAAA,OAAA,CAAA,IAAA,yBAAA,IAAA,2BAAA,IAAA,aAAA,IAAA,yBAAA,SAAA,uEAAA,sBAAA,CAAA,IAAA;AAAA,SAAA,uBAAA,IAAA,QAAA,IAAA,yBAAA,cAAA,wEAAA,IAAA;AAAA,SAAA,0BAAA,cAAA,CAAA,IAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,iCAAA,CAAA,aAAA,yBAAA,YAAA,0BAAA,aAAA,CAAA;AAAA,SAAA,gBAAA,CAAA,IAAA,eAAA,GAAA,MAAA,CAAA,cAAA,GAAA,MAAA,CAAA,cAAA,CAAA,IAAA,cAAA,gBAAA,CAAA,WAAA,CAAA,CAAA,SAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,aAAA,eAAA,CAAA,CAAA;AAAA,SAAA,UAAA,QAAA,EAAA,UAAA,eAAA,UAAA,mBAAA,UAAA,uBAAA,SAAA,0DAAA,QAAA,CAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,UAAA,IAAA,UAAA,CAAA,SAAA,IAAA,WAAA,IAAA,KAAA,EAAA,QAAA,EAAA,QAAA,QAAA,YAAA,aAAA,MAAA,CAAA,cAAA,CAAA,QAAA,iBAAA,QAAA,gBAAA,UAAA,EAAA,eAAA,CAAA,QAAA,EAAA,UAAA;AAAA,SAAA,gBAAA,CAAA,EAAA,CAAA,IAAA,eAAA,GAAA,MAAA,CAAA,cAAA,GAAA,MAAA,CAAA,cAAA,CAAA,IAAA,cAAA,gBAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA,SAAA,GAAA,CAAA,SAAA,CAAA,YAAA,eAAA,CAAA,CAAA,EAAA,CAAA;AAAA,SAAA,QAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,MAAA,CAAA,IAAA,CAAA,CAAA,OAAA,MAAA,CAAA,qBAAA,QAAA,CAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,WAAA,CAAA,WAAA,MAAA,CAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA,OAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,YAAA,CAAA;AAAA,SAAA,cAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,UAAA,CAAA,WAAA,SAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,QAAA,CAAA,OAAA,OAAA,CAAA,MAAA,CAAA,CAAA,OAAA,OAAA,WAAA,CAAA,IAAA,eAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,SAAA,MAAA,CAAA,yBAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,MAAA,CAAA,yBAAA,CAAA,CAAA,KAAA,OAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,WAAA,CAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,iBAAA,CAAA;AAAA,SAAA,gBAAA,GAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,GAAA,cAAA,CAAA,GAAA,OAAA,GAAA,IAAA,GAAA,IAAA,MAAA,CAAA,cAAA,CAAA,GAAA,EAAA,GAAA,IAAA,KAAA,EAAA,KAAA,EAAA,UAAA,QAAA,YAAA,QAAA,QAAA,oBAAA,GAAA,CAAA,GAAA,IAAA,KAAA,WAAA,GAAA;AAAA,SAAA,eAAA,CAAA,QAAA,CAAA,GAAA,YAAA,CAAA,CAAA,gCAAA,OAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AAAA,SAAA,aAAA,CAAA,EAAA,CAAA,oBAAA,OAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,WAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,gCAAA,OAAA,CAAA,CAAA,UAAA,CAAA,YAAA,SAAA,yEAAA,CAAA,GAAA,MAAA,GAAA,MAAA,EAAA,CAAA;AAEpE,IAAM,cAAc,GAAA,OAAA,CAAA,cAAA,GAAA,aAAA,CAAA,aAAA,KACf,kBAAU,CAAC,cAAc;EAC5B,SAAS,EAAE,IAAI,qBAAgB,CAAC,CAAC;EACjC,UAAU,EAAE,IAAI,sBAAU,CAAC,CAAC;EAC5B,UAAU,EAAE,wBAAY,GAAG,IAAI,gCAAoB,CAAC,CAAC,GAAG,IAAI,0BAAc,CAAC,CAAC;EAC5E,WAAW,EAAX;AAAW,EACZ;AAAA,IAEK,MAAM,GAAA,OAAA,CAAA,MAAA,0BAAA,WAAA;EACV,SAAA,OAAA,EAAuC;IAAA,IAA3B,IAAI,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,IAAI;IAAA,IAAE,OAAO,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAC,CAAC;IAAA,eAAA,OAAA,MAAA;IACnC,OAAO,GAAA,aAAA,CAAA,aAAA,KAAQ,cAAc,GAAK,OAAO,CAAE;IAAA,OAAA,UAAA,OAAA,MAAA,GACrC,IAAI,EAAE,OAAO;EACrB;EAAC,SAAA,CAAA,MAAA,EAAA,WAAA;EAAA,OAAA,YAAA,CAAA,MAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAiB,GAAG,EAAgB;MAAA,IAAd,OAAO,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAC,CAAC;MAChC,OAAO,GAAA,aAAA,CAAA,aAAA,KAAQ,cAAc,GAAK,OAAO,CAAE;MAC3C,OAAO,kBAAU,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC;IAC3C;EAAC;AAAA,EATkB,kBAAU,GAY/B;AACA,IAAM,WAAW,GAAA,OAAA,CAAA,WAAA,GACf,OAAO,cAAc,KAAK,UAAU,IACpC,OAAO,IAAI,KAAK,UAAU,IAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,UAAU;;;;;;;;;AClC5C,IAAM,aAAa,GAAG,SAAhB,aAAa,CAAA;EAAA,OACjB,OAAO,SAAS,KAAK,WAAW,IAChC,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,IACrC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,KAAK,aAAa;AAAA;AAAA,IAAA,QAAA,GAAA,OAAA,cAEpC,aAAa;;;;;;;;;ACL5B,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA;AAAkD,SAAA,uBAAA,GAAA,WAAA,GAAA,IAAA,GAAA,CAAA,UAAA,GAAA,GAAA,gBAAA,GAAA;AAAA,SAAA,QAAA,CAAA,sCAAA,OAAA,wBAAA,MAAA,uBAAA,MAAA,CAAA,QAAA,aAAA,CAAA,kBAAA,CAAA,gBAAA,CAAA,WAAA,CAAA,yBAAA,MAAA,IAAA,CAAA,CAAA,WAAA,KAAA,MAAA,IAAA,CAAA,KAAA,MAAA,CAAA,SAAA,qBAAA,CAAA,KAAA,OAAA,CAAA,CAAA;AAAA,SAAA,gBAAA,QAAA,EAAA,WAAA,UAAA,QAAA,YAAA,WAAA,eAAA,SAAA;AAAA,SAAA,kBAAA,MAAA,EAAA,KAAA,aAAA,CAAA,MAAA,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,CAAA,UAAA,UAAA,GAAA,KAAA,CAAA,CAAA,GAAA,UAAA,CAAA,UAAA,GAAA,UAAA,CAAA,UAAA,WAAA,UAAA,CAAA,YAAA,wBAAA,UAAA,EAAA,UAAA,CAAA,QAAA,SAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,cAAA,CAAA,UAAA,CAAA,GAAA,GAAA,UAAA;AAAA,SAAA,aAAA,WAAA,EAAA,UAAA,EAAA,WAAA,QAAA,UAAA,EAAA,iBAAA,CAAA,WAAA,CAAA,SAAA,EAAA,UAAA,OAAA,WAAA,EAAA,iBAAA,CAAA,WAAA,EAAA,WAAA,GAAA,MAAA,CAAA,cAAA,CAAA,WAAA,iBAAA,QAAA,mBAAA,WAAA;AAAA,SAAA,eAAA,CAAA,QAAA,CAAA,GAAA,YAAA,CAAA,CAAA,gCAAA,OAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AAAA,SAAA,aAAA,CAAA,EAAA,CAAA,oBAAA,OAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,WAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,gCAAA,OAAA,CAAA,CAAA,UAAA,CAAA,YAAA,SAAA,yEAAA,CAAA,GAAA,MAAA,GAAA,MAAA,EAAA,CAAA;AAAA,IAE7B,UAAU,GAAA,OAAA;EAC7B;EACA,SAAA,WAAY,IAAI,EAAE;IAAA,eAAA,OAAA,UAAA;IAChB,IAAI,CAAC,KAAK,GAAG,IAAI;IACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;EACvB;EAAC,OAAA,YAAA,CAAA,UAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,MAAM,KAAK,EAAE,GAAG,EAAE;MAChB;MACA;MACA;MACA,IAAI,IAAA,qBAAS,EAAC,CAAC,EAAE;QACf,OAAO,IAAA,2BAAe,EAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;MACtD;MAEA,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC;MAC1C,IAAM,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI;MAC7B,OAAO,OAAO,CAAC,OAAO,CAAC;QAAE,KAAK,EAAL,KAAK;QAAE,IAAI,EAAJ;MAAK,CAAC,CAAC;IACzC;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,MAAA,EAAQ;MACN;IAAA;EACD;AAAA;;;;;;;;;;;;;;;ACzBH,SAAS,GAAG,CAAC,WAAW,EAAE;EACxB,IAAI,WAAW,KAAK,SAAS,EAAE,OAAO,CAAC;EACvC,IAAI,WAAW,CAAC,IAAI,KAAK,SAAS,EAAE,OAAO,WAAW,CAAC,IAAI;EAC3D,OAAO,WAAW,CAAC,MAAM;AAC3B;;AAEA;AACA;AACA;AACA;AACA,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;EACpB,IAAI,CAAC,CAAC,MAAM,EAAE;IACZ;IACA,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;EACpB;EACA,IAAI,CAAC,YAAY,IAAI,EAAE;IACrB,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;MAAE,IAAI,EAAE,CAAC,CAAC;IAAK,CAAC,CAAC;EAC3C;EACA,IAAI,CAAC,CAAC,GAAG,EAAE;IACT;IACA,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;IAChD,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACR,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC;IAClB,OAAO,CAAC;EACV;EACA,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC;AACtC;AAAC,IAEoB,YAAY,GAAA,OAAA;EAC/B,SAAA,aAAY,MAAM,EAAE;IAAA,eAAA,OAAA,YAAA;IAClB,IAAI,CAAC,OAAO,GAAG,SAAS;IACxB,IAAI,CAAC,aAAa,GAAG,CAAC;IACtB,IAAI,CAAC,OAAO,GAAG,MAAM;IACrB,IAAI,CAAC,KAAK,GAAG,KAAK;EACpB;EAAC,OAAA,YAAA,CAAA,YAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,MAAM,KAAK,EAAE,GAAG,EAAE;MAChB,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE;QAC9B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;MAC1F;MAEA,OAAO,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,GAAG,CAAC;IACpD;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,2BAA2B,KAAK,EAAE,GAAG,EAAE;MAAA,IAAA,KAAA;MACrC,IAAM,aAAa,GAAG,GAAG,IAAI,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;MACnE,IAAI,IAAI,CAAC,KAAK,IAAI,aAAa,EAAE;QAC/B,IAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAG,CAAC;QACjD,IAAM,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK;QAC/C,OAAO,OAAO,CAAC,OAAO,CAAC;UAAE,KAAK,EAAL,KAAK;UAAE,IAAI,EAAJ;QAAK,CAAC,CAAC;MACzC;MAEA,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,IAAA,EAAqB;QAAA,IAAlB,KAAK,GAAA,IAAA,CAAL,KAAK;UAAE,IAAI,GAAA,IAAA,CAAJ,IAAI;QAC5C,IAAI,IAAI,EAAE;UACR,KAAI,CAAC,KAAK,GAAG,IAAI;QACnB,CAAC,MAAM,IAAI,KAAI,CAAC,OAAO,KAAK,SAAS,EAAE;UACrC,KAAI,CAAC,OAAO,GAAG,KAAK;QACtB,CAAC,MAAM;UACL,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,KAAI,CAAC,OAAO,EAAE,KAAK,CAAC;QAC5C;QAEA,OAAO,KAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,GAAG,CAAC;MACpD,CAAC,CAAC;IACJ;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,mBAAmB,KAAK,EAAE,GAAG,EAAE;MAC7B;MACA;MACA;MACA,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE;QAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;QAC7D,IAAI,CAAC,aAAa,GAAG,KAAK;MAC5B;MACA;MACA,IAAM,kBAAkB,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;MAClD,IAAI,IAAI,CAAC,KAAK,IAAI,kBAAkB,EAAE;QACpC,OAAO,IAAI;MACb;MACA;MACA;MACA,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC;IAC3C;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,MAAA,EAAQ;MACN,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;MACvB;IACF;EAAC;AAAA;;;;;;;;;ACvFH,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAA;EAAA,OACb,OAAO,MAAM,KAAK,WAAW,KAC5B,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW,IACrC,OAAO,MAAM,CAAC,OAAO,KAAK,WAAW,IACrC,OAAO,MAAM,CAAC,OAAO,KAAK,WAAW,CAAC;AAAA;AAAA,IAAA,QAAA,GAAA,OAAA,cAE3B,SAAS;;;;;;;;;ACNxB;AACA;AACA;AACA;AACA;AACe,SAAS,eAAe,CAAC,KAAK,EAAE;EAC7C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;IACtC,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC;IAC/B,MAAM,CAAC,MAAM,GAAG,YAAM;MACpB,IAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;MAC3C,OAAO,CAAC;QAAE,KAAK,EAAL;MAAM,CAAC,CAAC;IACpB,CAAC;IACD,MAAM,CAAC,OAAO,GAAG,UAAC,GAAG,EAAK;MACxB,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IACD,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC;EACjC,CAAC,CAAC;AACJ;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACe,SAAS,SAAS,CAAC,GAAG,EAAE;EACrC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;IACtC,IAAM,GAAG,GAAG,IAAI,cAAc,CAAC,CAAC;IAChC,GAAG,CAAC,YAAY,GAAG,MAAM;IACzB,GAAG,CAAC,MAAM,GAAG,YAAM;MACjB,IAAM,IAAI,GAAG,GAAG,CAAC,QAAQ;MACzB,OAAO,CAAC,IAAI,CAAC;IACf,CAAC;IACD,GAAG,CAAC,OAAO,GAAG,UAAC,GAAG,EAAK;MACrB,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IACD,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC;IACpB,GAAG,CAAC,IAAI,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ;;;;;;;;;;;;;;;ACnBA,IAAI,UAAU,GAAG,KAAK;AACtB,IAAI;EACF;EACA,UAAU,GAAG,cAAc,IAAI,MAAM;;EAErC;EACA;EACA;EACA;EACA,IAAM,GAAG,GAAG,YAAY;EACxB,IAAM,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC;EAC/C,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,aAAa,CAAC;EACxC,IAAI,aAAa,KAAK,IAAI,EAAE,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC;AAC1D,CAAC,CAAC,OAAO,CAAC,EAAE;EACV;EACA;EACA;EACA,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,kBAAkB,EAAE;IAChE,UAAU,GAAG,KAAK;EACpB,CAAC,MAAM;IACL,MAAM,CAAC;EACT;AACF;AAEO,IAAM,YAAY,GAAA,OAAA,CAAA,YAAA,GAAG,UAAU;AAAA,IAEzB,oBAAoB,GAAA,OAAA,CAAA,oBAAA;EAAA,SAAA,qBAAA;IAAA,eAAA,OAAA,oBAAA;EAAA;EAAA,OAAA,YAAA,CAAA,oBAAA;IAAA,GAAA;IAAA,KAAA,EAC/B,SAAA,eAAA,EAAiB;MACf,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;MAC1C,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;IACjC;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,yBAAyB,WAAW,EAAE;MACpC,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,SAAA,MAAA,CAAS,WAAW,OAAI,CAAC;MAC1D,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;IACjC;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,aAAa,aAAa,EAAE;MAC1B,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC;MACtC,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;IAC1B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAU,WAAW,EAAE,MAAM,EAAE;MAC7B,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;MAC3C,IAAM,GAAG,WAAA,MAAA,CAAW,WAAW,QAAA,MAAA,CAAK,EAAE,CAAE;MAExC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;MACjD,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;IAC7B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,aAAa,MAAM,EAAE;MACnB,IAAM,OAAO,GAAG,EAAE;MAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC5C,IAAM,IAAG,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/B,IAAI,IAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QAE/B,IAAI;UACF,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,IAAG,CAAC,CAAC;UACpD,MAAM,CAAC,aAAa,GAAG,IAAG;UAE1B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;QACtB,CAAC,CAAC,OAAO,EAAE,EAAE;UACX;UACA;QAAA;MAEJ;MAEA,OAAO,OAAO;IAChB;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ICrEG,aAAa,0BAAA,MAAA;EACjB,SAAA,cAAY,OAAO,EAA6C;IAAA,IAAA,KAAA;IAAA,IAA3C,UAAU,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,IAAI;IAAA,IAAE,GAAG,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,IAAI;IAAA,IAAE,GAAG,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,IAAI;IAAA,eAAA,OAAA,aAAA;IAC5D,KAAA,GAAA,UAAA,OAAA,aAAA,GAAM,OAAO;IAEb,KAAA,CAAK,eAAe,GAAG,GAAG;IAC1B,KAAA,CAAK,gBAAgB,GAAG,GAAG;IAC3B,KAAA,CAAK,YAAY,GAAG,UAAU;IAE9B,IAAI,UAAU,IAAI,IAAI,EAAE;MACtB,OAAO,mBAAA,MAAA,CAAmB,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAE;IACnD;IAEA,IAAI,GAAG,IAAI,IAAI,EAAE;MACf,IAAM,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,KAAK;MACxD,IAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;MAC9B,IAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;MACxB,IAAM,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,KAAK;MAC5C,IAAM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK;MAC9C,OAAO,0CAAA,MAAA,CAA0C,MAAM,aAAA,MAAA,CAAU,GAAG,uBAAA,MAAA,CAAoB,MAAM,uBAAA,MAAA,CAAoB,IAAI,oBAAA,MAAA,CAAiB,SAAS,MAAG;IACrJ;IACA,KAAA,CAAK,OAAO,GAAG,OAAO;IAAA,OAAA,KAAA;EACxB;EAAC,SAAA,CAAA,aAAA,EAAA,MAAA;EAAA,OAAA,YAAA,CAAA,aAAA;AAAA,gBAAA,gBAAA,CArByB,KAAK;AAAA,IAAA,QAAA,GAAA,OAAA,cAwBlB,aAAa;;;;;;;;;;ACxB5B,IAAI,SAAS,GAAG,KAAK;AAEd,SAAS,cAAc,CAAA,EAAG;EAC/B,SAAS,GAAG,IAAI;AAClB;AAEO,SAAS,GAAG,CAAC,GAAG,EAAE;EACvB,IAAI,CAAC,SAAS,EAAE;EAChB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAClB;;;;;;;;;;;;;;;ICTqB,cAAc,GAAA,OAAA;EAAA,SAAA,eAAA;IAAA,eAAA,OAAA,cAAA;EAAA;EAAA,OAAA,YAAA,CAAA,cAAA;IAAA,GAAA;IAAA,KAAA,EACjC,SAAA,eAAA,EAAiB;MACf,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;IAC5B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,yBAAyB,YAAY,EAAE;MACrC,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;IAC5B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,aAAa,cAAc,EAAE;MAC3B,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;IAC1B;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,UAAU,YAAY,EAAE,OAAO,EAAE;MAC/B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IAC9B;EAAC;AAAA;;;;;;;;;ACfH,IAAA,OAAA,GAAA,OAAA;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA;AACA,IAAA,OAAA,GAAA,OAAA;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA;AAA4B,SAAA,uBAAA,GAAA,WAAA,GAAA,IAAA,GAAA,CAAA,UAAA,GAAA,GAAA,gBAAA,GAAA;AAAA,SAAA,oBAAA,kBAH5B,qJAAA,mBAAA,YAAA,oBAAA,WAAA,CAAA,SAAA,CAAA,EAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,CAAA,GAAA,CAAA,CAAA,cAAA,EAAA,CAAA,GAAA,MAAA,CAAA,cAAA,cAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,KAAA,CAAA,wBAAA,MAAA,GAAA,MAAA,OAAA,CAAA,GAAA,CAAA,CAAA,QAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,aAAA,uBAAA,CAAA,GAAA,CAAA,CAAA,WAAA,8BAAA,OAAA,CAAA,EAAA,CAAA,EAAA,CAAA,WAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,CAAA,IAAA,KAAA,EAAA,CAAA,EAAA,UAAA,MAAA,YAAA,MAAA,QAAA,SAAA,CAAA,CAAA,CAAA,WAAA,MAAA,mBAAA,CAAA,IAAA,MAAA,YAAA,OAAA,CAAA,EAAA,CAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAA,CAAA,gBAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,SAAA,YAAA,SAAA,GAAA,CAAA,GAAA,SAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,SAAA,GAAA,CAAA,OAAA,OAAA,CAAA,CAAA,gBAAA,CAAA,CAAA,CAAA,eAAA,KAAA,EAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,aAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,mBAAA,IAAA,YAAA,GAAA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,cAAA,CAAA,aAAA,IAAA,WAAA,GAAA,EAAA,CAAA,QAAA,CAAA,CAAA,IAAA,GAAA,IAAA,MAAA,CAAA,qBAAA,CAAA,qBAAA,CAAA,gBAAA,CAAA,gBAAA,CAAA,gBAAA,UAAA,cAAA,kBAAA,cAAA,2BAAA,SAAA,CAAA,OAAA,MAAA,CAAA,CAAA,EAAA,CAAA,qCAAA,CAAA,GAAA,MAAA,CAAA,cAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,GAAA,CAAA,OAAA,CAAA,GAAA,0BAAA,CAAA,SAAA,GAAA,SAAA,CAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,YAAA,sBAAA,CAAA,gCAAA,OAAA,WAAA,CAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,YAAA,CAAA,gBAAA,OAAA,CAAA,CAAA,EAAA,CAAA,sBAAA,cAAA,CAAA,EAAA,CAAA,aAAA,OAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,mBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA,SAAA,CAAA,gBAAA,OAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,OAAA,EAAA,IAAA,WAAA,CAAA,IAAA,MAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,gBAAA,CAAA,IAAA,MAAA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,IAAA,WAAA,CAAA,IAAA,CAAA,CAAA,KAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,gBAAA,CAAA,WAAA,MAAA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,oBAAA,KAAA,WAAA,MAAA,CAAA,EAAA,CAAA,aAAA,2BAAA,eAAA,CAAA,WAAA,CAAA,EAAA,CAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,0BAAA,EAAA,0BAAA,IAAA,0BAAA,qBAAA,iBAAA,CAAA,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,CAAA,mBAAA,CAAA,EAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,KAAA,sCAAA,CAAA,KAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,WAAA,KAAA,EAAA,CAAA,EAAA,IAAA,eAAA,CAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAA,GAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,QAAA,MAAA,CAAA,QAAA,CAAA,GAAA,mBAAA,CAAA,CAAA,EAAA,CAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,mBAAA,CAAA,qBAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,GAAA,sBAAA,CAAA,CAAA,MAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,GAAA,uBAAA,CAAA,CAAA,MAAA,IAAA,CAAA,CAAA,MAAA,WAAA,CAAA,CAAA,GAAA,GAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,oBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAA,KAAA,CAAA,qBAAA,KAAA,EAAA,CAAA,CAAA,GAAA,EAAA,IAAA,EAAA,CAAA,CAAA,IAAA,kBAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,MAAA,YAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,GAAA,mBAAA,oBAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,CAAA,GAAA,CAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA,QAAA,qBAAA,CAAA,IAAA,CAAA,CAAA,QAAA,eAAA,CAAA,CAAA,MAAA,aAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,mBAAA,CAAA,CAAA,EAAA,CAAA,eAAA,CAAA,CAAA,MAAA,kBAAA,CAAA,KAAA,CAAA,CAAA,MAAA,YAAA,CAAA,CAAA,GAAA,OAAA,SAAA,uCAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,QAAA,CAAA,CAAA,EAAA,CAAA,CAAA,QAAA,EAAA,CAAA,CAAA,GAAA,mBAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,MAAA,YAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,QAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,GAAA,CAAA,CAAA,IAAA,IAAA,CAAA,CAAA,CAAA,CAAA,UAAA,IAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,OAAA,eAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,MAAA,WAAA,CAAA,CAAA,GAAA,GAAA,CAAA,GAAA,CAAA,CAAA,QAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,YAAA,CAAA,CAAA,GAAA,OAAA,SAAA,sCAAA,CAAA,CAAA,QAAA,SAAA,CAAA,cAAA,aAAA,CAAA,QAAA,CAAA,KAAA,MAAA,EAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA,QAAA,GAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA,UAAA,GAAA,CAAA,KAAA,CAAA,CAAA,QAAA,GAAA,CAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA,cAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,UAAA,QAAA,CAAA,CAAA,IAAA,oBAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,UAAA,GAAA,CAAA,aAAA,QAAA,CAAA,SAAA,UAAA,MAAA,MAAA,aAAA,CAAA,CAAA,OAAA,CAAA,YAAA,cAAA,KAAA,iBAAA,OAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,CAAA,4BAAA,CAAA,CAAA,IAAA,SAAA,CAAA,OAAA,KAAA,CAAA,CAAA,CAAA,MAAA,SAAA,CAAA,OAAA,CAAA,YAAA,KAAA,aAAA,CAAA,GAAA,CAAA,CAAA,MAAA,OAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,UAAA,IAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,IAAA,OAAA,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,CAAA,EAAA,IAAA,CAAA,IAAA,OAAA,IAAA,YAAA,CAAA,CAAA,IAAA,GAAA,CAAA,gBAAA,SAAA,CAAA,OAAA,CAAA,CAAA,kCAAA,iBAAA,CAAA,SAAA,GAAA,0BAAA,EAAA,CAAA,CAAA,CAAA,mBAAA,KAAA,EAAA,0BAAA,EAAA,YAAA,SAAA,CAAA,CAAA,0BAAA,mBAAA,KAAA,EAAA,iBAAA,EAAA,YAAA,SAAA,iBAAA,CAAA,WAAA,GAAA,MAAA,CAAA,0BAAA,EAAA,CAAA,wBAAA,CAAA,CAAA,mBAAA,aAAA,CAAA,QAAA,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,WAAA,WAAA,CAAA,KAAA,CAAA,KAAA,iBAAA,6BAAA,CAAA,CAAA,WAAA,IAAA,CAAA,CAAA,IAAA,OAAA,CAAA,CAAA,IAAA,aAAA,CAAA,WAAA,MAAA,CAAA,cAAA,GAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,0BAAA,KAAA,CAAA,CAAA,SAAA,GAAA,0BAAA,EAAA,MAAA,CAAA,CAAA,EAAA,CAAA,yBAAA,CAAA,CAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,KAAA,aAAA,CAAA,aAAA,OAAA,EAAA,CAAA,OAAA,qBAAA,CAAA,aAAA,CAAA,SAAA,GAAA,MAAA,CAAA,aAAA,CAAA,SAAA,EAAA,CAAA,iCAAA,CAAA,CAAA,aAAA,GAAA,aAAA,EAAA,CAAA,CAAA,KAAA,aAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,eAAA,CAAA,KAAA,CAAA,GAAA,OAAA,OAAA,CAAA,OAAA,aAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,UAAA,CAAA,CAAA,mBAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,GAAA,IAAA,WAAA,CAAA,WAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,IAAA,WAAA,qBAAA,CAAA,CAAA,GAAA,MAAA,CAAA,CAAA,EAAA,CAAA,gBAAA,MAAA,CAAA,CAAA,EAAA,CAAA,iCAAA,MAAA,CAAA,CAAA,6DAAA,CAAA,CAAA,IAAA,aAAA,CAAA,QAAA,CAAA,GAAA,MAAA,CAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,UAAA,CAAA,CAAA,OAAA,aAAA,KAAA,WAAA,CAAA,CAAA,MAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA,IAAA,CAAA,SAAA,IAAA,CAAA,KAAA,GAAA,CAAA,EAAA,IAAA,CAAA,IAAA,OAAA,IAAA,WAAA,IAAA,CAAA,IAAA,OAAA,IAAA,QAAA,CAAA,CAAA,MAAA,GAAA,MAAA,EAAA,OAAA,CAAA,SAAA,KAAA,WAAA,EAAA,OAAA,EAAA,KAAA,WAAA,MAAA,CAAA,aAAA,IAAA,WAAA,IAAA,WAAA,IAAA,QAAA,KAAA,GAAA,CAAA,OAAA,IAAA,YAAA,QAAA,cAAA,MAAA,gBAAA,GAAA,GAAA,CAAA,OAAA,UAAA,CAAA,OAAA,CAAA,aAAA,IAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,CAAA,MAAA,OAAA,CAAA,CAAA,IAAA,OAAA,CAAA,MAAA,KAAA,EAAA,CAAA,CAAA,KAAA,cAAA,CAAA,IAAA,CAAA,MAAA,IAAA,WAAA,KAAA,SAAA,IAAA,WAAA,CAAA,QAAA,UAAA,IAAA,UAAA,kBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,CAAA,GAAA,cAAA,IAAA,KAAA,iBAAA,WAAA,kBAAA,CAAA,aAAA,IAAA,QAAA,CAAA,MAAA,CAAA,kBAAA,OAAA,CAAA,EAAA,CAAA,WAAA,CAAA,CAAA,IAAA,YAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,CAAA,CAAA,IAAA,GAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,MAAA,WAAA,CAAA,CAAA,GAAA,GAAA,CAAA,KAAA,CAAA,aAAA,CAAA,QAAA,UAAA,CAAA,MAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,UAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,UAAA,iBAAA,CAAA,CAAA,MAAA,SAAA,MAAA,aAAA,CAAA,CAAA,MAAA,SAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,aAAA,IAAA,GAAA,CAAA,CAAA,QAAA,SAAA,MAAA,CAAA,CAAA,CAAA,QAAA,gBAAA,IAAA,GAAA,CAAA,CAAA,UAAA,SAAA,MAAA,CAAA,CAAA,CAAA,UAAA,cAAA,CAAA,aAAA,IAAA,GAAA,CAAA,CAAA,QAAA,SAAA,MAAA,CAAA,CAAA,CAAA,QAAA,qBAAA,CAAA,QAAA,KAAA,qDAAA,IAAA,GAAA,CAAA,CAAA,UAAA,SAAA,MAAA,CAAA,CAAA,CAAA,UAAA,YAAA,MAAA,WAAA,OAAA,CAAA,EAAA,CAAA,aAAA,CAAA,QAAA,UAAA,CAAA,MAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,UAAA,CAAA,CAAA,OAAA,CAAA,CAAA,MAAA,SAAA,IAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,wBAAA,IAAA,GAAA,CAAA,CAAA,UAAA,QAAA,CAAA,GAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,UAAA,KAAA,CAAA,cAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,UAAA,cAAA,CAAA,CAAA,IAAA,GAAA,CAAA,EAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,CAAA,SAAA,MAAA,gBAAA,IAAA,GAAA,CAAA,CAAA,UAAA,EAAA,CAAA,SAAA,QAAA,CAAA,CAAA,MAAA,QAAA,WAAA,SAAA,CAAA,EAAA,CAAA,oBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,CAAA,GAAA,qBAAA,CAAA,CAAA,IAAA,mBAAA,CAAA,CAAA,IAAA,QAAA,IAAA,GAAA,CAAA,CAAA,GAAA,gBAAA,CAAA,CAAA,IAAA,SAAA,IAAA,QAAA,GAAA,GAAA,CAAA,CAAA,GAAA,OAAA,MAAA,kBAAA,IAAA,yBAAA,CAAA,CAAA,IAAA,IAAA,CAAA,UAAA,IAAA,GAAA,CAAA,GAAA,CAAA,KAAA,MAAA,WAAA,OAAA,CAAA,aAAA,CAAA,QAAA,UAAA,CAAA,MAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,UAAA,CAAA,CAAA,OAAA,CAAA,CAAA,UAAA,KAAA,CAAA,cAAA,QAAA,CAAA,CAAA,CAAA,UAAA,EAAA,CAAA,CAAA,QAAA,GAAA,aAAA,CAAA,CAAA,GAAA,CAAA,yBAAA,OAAA,CAAA,aAAA,CAAA,QAAA,UAAA,CAAA,MAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,UAAA,CAAA,CAAA,OAAA,CAAA,CAAA,MAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,UAAA,kBAAA,CAAA,CAAA,IAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,aAAA,CAAA,CAAA,YAAA,CAAA,YAAA,KAAA,8BAAA,aAAA,WAAA,cAAA,CAAA,EAAA,CAAA,EAAA,CAAA,gBAAA,QAAA,KAAA,QAAA,EAAA,MAAA,CAAA,CAAA,GAAA,UAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,oBAAA,MAAA,UAAA,GAAA,GAAA,CAAA,GAAA,CAAA,OAAA,CAAA;AAAA,SAAA,mBAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,cAAA,IAAA,GAAA,GAAA,CAAA,GAAA,EAAA,GAAA,OAAA,KAAA,GAAA,IAAA,CAAA,KAAA,WAAA,KAAA,IAAA,MAAA,CAAA,KAAA,iBAAA,IAAA,CAAA,IAAA,IAAA,OAAA,CAAA,KAAA,YAAA,OAAA,CAAA,OAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,EAAA,MAAA;AAAA,SAAA,kBAAA,EAAA,6BAAA,IAAA,SAAA,IAAA,GAAA,SAAA,aAAA,OAAA,WAAA,OAAA,EAAA,MAAA,QAAA,GAAA,GAAA,EAAA,CAAA,KAAA,CAAA,IAAA,EAAA,IAAA,YAAA,MAAA,KAAA,IAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,UAAA,KAAA,cAAA,OAAA,GAAA,IAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,WAAA,GAAA,KAAA,KAAA,CAAA,SAAA;AAAA,SAAA,eAAA,GAAA,EAAA,CAAA,WAAA,eAAA,CAAA,GAAA,KAAA,qBAAA,CAAA,GAAA,EAAA,CAAA,KAAA,2BAAA,CAAA,GAAA,EAAA,CAAA,KAAA,gBAAA;AAAA,SAAA,iBAAA,cAAA,SAAA;AAAA,SAAA,sBAAA,CAAA,EAAA,CAAA,QAAA,CAAA,WAAA,CAAA,gCAAA,MAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,KAAA,CAAA,4BAAA,CAAA,QAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,OAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,GAAA,IAAA,QAAA,CAAA,QAAA,MAAA,CAAA,CAAA,MAAA,CAAA,UAAA,CAAA,uBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,GAAA,IAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,GAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,CAAA,YAAA,CAAA,eAAA,CAAA,GAAA,CAAA,cAAA,MAAA,CAAA,CAAA,MAAA,CAAA,2BAAA,CAAA,QAAA,CAAA,aAAA,CAAA;AAAA,SAAA,gBAAA,GAAA,QAAA,KAAA,CAAA,OAAA,CAAA,GAAA,UAAA,GAAA;AAAA,SAAA,QAAA,CAAA,sCAAA,OAAA,wBAAA,MAAA,uBAAA,MAAA,CAAA,QAAA,aAAA,CAAA,kBAAA,CAAA,gBAAA,CAAA,WAAA,CAAA,yBAAA,MAAA,IAAA,CAAA,CAAA,WAAA,KAAA,MAAA,IAAA,CAAA,KAAA,MAAA,CAAA,SAAA,qBAAA,CAAA,KAAA,OAAA,CAAA,CAAA;AAAA,SAAA,2BAAA,CAAA,EAAA,cAAA,QAAA,EAAA,UAAA,MAAA,oBAAA,CAAA,CAAA,MAAA,CAAA,QAAA,KAAA,CAAA,qBAAA,EAAA,QAAA,KAAA,CAAA,OAAA,CAAA,CAAA,MAAA,EAAA,GAAA,2BAAA,CAAA,CAAA,MAAA,cAAA,IAAA,CAAA,WAAA,CAAA,CAAA,MAAA,qBAAA,EAAA,EAAA,CAAA,GAAA,EAAA,MAAA,CAAA,UAAA,CAAA,YAAA,EAAA,eAAA,CAAA,EAAA,CAAA,EAAA,CAAA,WAAA,EAAA,QAAA,CAAA,IAAA,CAAA,CAAA,MAAA,WAAA,IAAA,mBAAA,IAAA,SAAA,KAAA,EAAA,CAAA,CAAA,CAAA,UAAA,CAAA,WAAA,EAAA,EAAA,UAAA,EAAA,KAAA,CAAA,EAAA,CAAA,gBAAA,SAAA,iJAAA,gBAAA,SAAA,MAAA,UAAA,GAAA,WAAA,CAAA,WAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,WAAA,EAAA,QAAA,IAAA,GAAA,EAAA,CAAA,IAAA,IAAA,gBAAA,GAAA,IAAA,CAAA,IAAA,SAAA,IAAA,KAAA,CAAA,WAAA,EAAA,GAAA,IAAA,MAAA,SAAA,GAAA,GAAA,GAAA,KAAA,CAAA,WAAA,EAAA,eAAA,gBAAA,IAAA,EAAA,oBAAA,EAAA,8BAAA,MAAA,QAAA,GAAA;AAAA,SAAA,4BAAA,CAAA,EAAA,MAAA,SAAA,CAAA,qBAAA,CAAA,sBAAA,iBAAA,CAAA,CAAA,EAAA,MAAA,OAAA,CAAA,GAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,KAAA,aAAA,CAAA,iBAAA,CAAA,CAAA,WAAA,EAAA,CAAA,GAAA,CAAA,CAAA,WAAA,CAAA,IAAA,MAAA,CAAA,cAAA,CAAA,mBAAA,KAAA,CAAA,IAAA,CAAA,CAAA,OAAA,CAAA,+DAAA,IAAA,CAAA,CAAA,UAAA,iBAAA,CAAA,CAAA,EAAA,MAAA;AAAA,SAAA,kBAAA,GAAA,EAAA,GAAA,QAAA,GAAA,YAAA,GAAA,GAAA,GAAA,CAAA,MAAA,EAAA,GAAA,GAAA,GAAA,CAAA,MAAA,WAAA,CAAA,MAAA,IAAA,OAAA,KAAA,CAAA,GAAA,GAAA,CAAA,GAAA,GAAA,EAAA,CAAA,IAAA,IAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,UAAA,IAAA;AAAA,SAAA,QAAA,CAAA,EAAA,CAAA,QAAA,CAAA,GAAA,MAAA,CAAA,IAAA,CAAA,CAAA,OAAA,MAAA,CAAA,qBAAA,QAAA,CAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,WAAA,CAAA,WAAA,MAAA,CAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,UAAA,OAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,YAAA,CAAA;AAAA,SAAA,cAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,UAAA,CAAA,WAAA,SAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,QAAA,CAAA,OAAA,OAAA,CAAA,MAAA,CAAA,CAAA,OAAA,OAAA,WAAA,CAAA,IAAA,eAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,SAAA,MAAA,CAAA,yBAAA,GAAA,MAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,MAAA,CAAA,yBAAA,CAAA,CAAA,KAAA,OAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,WAAA,CAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,iBAAA,CAAA;AAAA,SAAA,gBAAA,GAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,GAAA,cAAA,CAAA,GAAA,OAAA,GAAA,IAAA,GAAA,IAAA,MAAA,CAAA,cAAA,CAAA,GAAA,EAAA,GAAA,IAAA,KAAA,EAAA,KAAA,EAAA,UAAA,QAAA,YAAA,QAAA,QAAA,oBAAA,GAAA,CAAA,GAAA,IAAA,KAAA,WAAA,GAAA;AAAA,SAAA,gBAAA,QAAA,EAAA,WAAA,UAAA,QAAA,YAAA,WAAA,eAAA,SAAA;AAAA,SAAA,kBAAA,MAAA,EAAA,KAAA,aAAA,CAAA,MAAA,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,CAAA,UAAA,UAAA,GAAA,KAAA,CAAA,CAAA,GAAA,UAAA,CAAA,UAAA,GAAA,UAAA,CAAA,UAAA,WAAA,UAAA,CAAA,YAAA,wBAAA,UAAA,EAAA,UAAA,CAAA,QAAA,SAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,cAAA,CAAA,UAAA,CAAA,GAAA,GAAA,UAAA;AAAA,SAAA,aAAA,WAAA,EAAA,UAAA,EAAA,WAAA,QAAA,UAAA,EAAA,iBAAA,CAAA,WAAA,CAAA,SAAA,EAAA,UAAA,OAAA,WAAA,EAAA,iBAAA,CAAA,WAAA,EAAA,WAAA,GAAA,MAAA,CAAA,cAAA,CAAA,WAAA,iBAAA,QAAA,mBAAA,WAAA;AAAA,SAAA,eAAA,CAAA,QAAA,CAAA,GAAA,YAAA,CAAA,CAAA,gCAAA,OAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AAAA,SAAA,aAAA,CAAA,EAAA,CAAA,oBAAA,OAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,WAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,gCAAA,OAAA,CAAA,CAAA,UAAA,CAAA,YAAA,SAAA,yEAAA,CAAA,GAAA,MAAA,GAAA,MAAA,EAAA,CAAA;AAKA,IAAM,eAAe,GAAG,QAAQ;AAChC,IAAM,sBAAsB,GAAG,eAAe;AAC9C,IAAM,sBAAsB,GAAG,eAAe;AAE9C,IAAM,cAAc,GAAG;EACrB,QAAQ,EAAE,IAAI;EAEd,SAAS,EAAE,IAAI;EACf,QAAQ,EAAE,CAAC,CAAC;EACZ,yBAAyB,EAAE,CAAC,CAAC;EAC7B,WAAW,EAAE,IAAI;EACjB,UAAU,EAAE,IAAI;EAEhB,UAAU,EAAE,IAAI;EAChB,eAAe,EAAE,IAAI;EACrB,SAAS,EAAE,IAAI;EACf,OAAO,EAAE,IAAI;EACb,oBAAoB,EAAE,IAAI;EAE1B,mBAAmB,EAAE,KAAK;EAC1B,OAAO,EAAE,CAAC,CAAC;EACX,YAAY,EAAE,KAAK;EACnB,eAAe,EAAE,IAAI;EACrB,eAAe,EAAE,IAAI;EACrB,aAAa,EAAE,oBAAoB;EAEnC,SAAS,EAAE,MAAM,CAAC,iBAAiB;EACnC,WAAW,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAClC,eAAe,EAAE,CAAC;EAClB,wBAAwB,EAAE,IAAI;EAC9B,2BAA2B,EAAE,IAAI;EACjC,0BAA0B,EAAE,KAAK;EACjC,oBAAoB,EAAE,KAAK;EAC3B,wBAAwB,EAAE,KAAK;EAE/B,UAAU,EAAE,IAAI;EAChB,UAAU,EAAE,IAAI;EAChB,SAAS,EAAE,IAAI;EAEf,QAAQ,EAAE;AACZ,CAAC;AAAA,IAEK,UAAU;EACd,SAAA,WAAY,IAAI,EAAE,OAAO,EAAE;IAAA,eAAA,OAAA,UAAA;IACzB;IACA,IAAI,QAAQ,IAAI,OAAO,EAAE;MACvB,OAAO,CAAC,GAAG,CACT,wGACF,CAAC;IACH;;IAEA;IACA,IAAI,CAAC,OAAO,GAAG,OAAO;;IAEtB;IACA,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;;IAEvD;IACA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU;;IAE1C;IACA,IAAI,CAAC,IAAI,GAAG,IAAI;;IAEhB;IACA,IAAI,CAAC,GAAG,GAAG,IAAI;;IAEf;IACA,IAAI,CAAC,IAAI,GAAG,IAAI;;IAEhB;IACA,IAAI,CAAC,YAAY,GAAG,IAAI;;IAExB;IACA,IAAI,CAAC,cAAc,GAAG,IAAI;;IAE1B;IACA,IAAI,CAAC,OAAO,GAAG,IAAI;;IAEnB;IACA,IAAI,CAAC,QAAQ,GAAG,KAAK;;IAErB;IACA,IAAI,CAAC,KAAK,GAAG,IAAI;;IAEjB;IACA;IACA;IACA,IAAI,CAAC,OAAO,GAAG,IAAI;;IAEnB;IACA,IAAI,CAAC,aAAa,GAAG,CAAC;;IAEtB;IACA,IAAI,CAAC,aAAa,GAAG,IAAI;;IAEzB;IACA,IAAI,CAAC,kBAAkB,GAAG,CAAC;;IAE3B;IACA;IACA,IAAI,CAAC,gBAAgB,GAAG,IAAI;;IAE5B;IACA;IACA,IAAI,CAAC,mBAAmB,GAAG,IAAI;;IAE/B;IACA,IAAI,CAAC,SAAS,GAAG,KAAK;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATE,OAAA,YAAA,CAAA,UAAA;IAAA,GAAA;IAAA,KAAA,EA8CA,SAAA,oBAAA,EAAsB;MAAA,IAAA,KAAA;MACpB,OAAO,IAAI,CAAC,OAAO,CAChB,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CACpC,IAAI,CAAC,UAAC,WAAW;QAAA,OAAK,KAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,WAAW,CAAC;MAAA,EAAC;IAClF;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,yBAAyB,cAAc,EAAE;MACvC,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC,SAAS,IAAI,IAAI;MAC3C,IAAI,CAAC,mBAAmB,GAAG,cAAc,CAAC,kBAAkB,IAAI,IAAI;MACpE,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,aAAa;IACpD;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,MAAA,EAAQ;MAAA,IAAA,MAAA;MACN,IAAQ,IAAI,GAAK,IAAI,CAAb,IAAI;MAEZ,IAAI,CAAC,IAAI,EAAE;QACT,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;QACvE;MACF;MAEA,IACE,CAAC,CAAC,eAAe,EAAE,sBAAsB,EAAE,sBAAsB,CAAC,CAAC,QAAQ,CACzE,IAAI,CAAC,OAAO,CAAC,QACf,CAAC,EACD;QACA,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,8BAAA,MAAA,CAA8B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAE,CAAC,CAAC;QAChF;MACF;MAEA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;QAClE,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;QACnF;MACF;MAEA,IAAQ,WAAW,GAAK,IAAI,CAAC,OAAO,CAA5B,WAAW;MACnB,IAAI,WAAW,IAAI,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,gBAAgB,EAAE;QAC3F,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;QAC3F;MACF;MAEA,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,CAAC,EAAE;QACpC;QACA,SAAA,EAAA,MAAA,IAAA,GAAyB,CAAC,WAAW,EAAE,YAAY,EAAE,sBAAsB,CAAC,EAAA,EAAA,GAAA,IAAA,CAAA,MAAA,EAAA,EAAA,IAAE;UAAzE,IAAM,UAAU,GAAA,IAAA,CAAA,EAAA;UACnB,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAC5B,IAAI,CAAC,UAAU,CACb,IAAI,KAAK,wBAAA,MAAA,CAAwB,UAAU,4CAAyC,CACtF,CAAC;YACD;UACF;QACF;MACF;MAEA,IAAI,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE;QACzC,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,CAAC,EAAE;UACrC,IAAI,CAAC,UAAU,CACb,IAAI,KAAK,CACP,0FACF,CACF,CAAC;UACD;QACF;QACA,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,KAAK,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,MAAM,EAAE;UACjF,IAAI,CAAC,UAAU,CACb,IAAI,KAAK,CACP,iGACF,CACF,CAAC;UACD;QACF;MACF;MAEA,IAAI,CAAC,OAAO,CACT,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAC/B,IAAI,CAAC,UAAC,WAAW,EAAK;QACrB,IAAI,WAAW,IAAI,IAAI,EAAE;UACvB,IAAA,WAAG,EACD,4FACF,CAAC;QACH,CAAC,MAAM;UACL,IAAA,WAAG,6BAAA,MAAA,CAA4B,WAAW,CAAE,CAAC;QAC/C;QAEA,MAAI,CAAC,YAAY,GAAG,WAAW;QAE/B,IAAI,MAAI,CAAC,OAAO,EAAE;UAChB,OAAO,MAAI,CAAC,OAAO;QACrB;QACA,OAAO,MAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAI,CAAC,OAAO,CAAC,SAAS,CAAC;MACvE,CAAC,CAAC,CACD,IAAI,CAAC,UAAC,MAAM,EAAK;QAChB,MAAI,CAAC,OAAO,GAAG,MAAM;;QAErB;QACA;QACA;QACA,IAAI,MAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;UACrC,MAAI,CAAC,KAAK,GAAG,IAAI;QACnB,CAAC,MAAM,IAAI,MAAI,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,EAAE;UAC1C,MAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAI,CAAC,OAAO,CAAC,UAAU,CAAC;UAC5C,IAAI,MAAM,CAAC,KAAK,CAAC,MAAI,CAAC,KAAK,CAAC,EAAE;YAC5B,MAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;YACnF;UACF;QACF,CAAC,MAAM;UACL,MAAI,CAAC,KAAK,GAAG,MAAI,CAAC,OAAO,CAAC,IAAI;UAC9B,IAAI,MAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACtB,MAAI,CAAC,UAAU,CACb,IAAI,KAAK,CACP,uJACF,CACF,CAAC;YACD;UACF;QACF;;QAEA;QACA;QACA,IAAI,MAAI,CAAC,OAAO,CAAC,eAAe,GAAG,CAAC,IAAI,MAAI,CAAC,mBAAmB,IAAI,IAAI,EAAE;UACxE,MAAI,CAAC,oBAAoB,CAAC,CAAC;QAC7B,CAAC,MAAM;UACL,MAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3B;MACF,CAAC,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;QACd,MAAI,CAAC,UAAU,CAAC,GAAG,CAAC;MACtB,CAAC,CAAC;IACN;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA,GAAA;IAAA,KAAA,EAMA,SAAA,qBAAA,EAAuB;MAAA,IAAA,qBAAA;QAAA,MAAA;MACrB,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK;MAC5B,IAAI,aAAa,GAAG,CAAC;MACrB,IAAI,CAAC,gBAAgB,GAAG,EAAE;MAE1B,IAAM,SAAS,GACb,IAAI,CAAC,mBAAmB,IAAI,IAAI,GAC5B,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAC/B,IAAI,CAAC,OAAO,CAAC,eAAe;;MAElC;MACA;MACA,IAAM,KAAK,IAAA,qBAAA,GACT,IAAI,CAAC,OAAO,CAAC,wBAAwB,cAAA,qBAAA,cAAA,qBAAA,GAAI,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC;;MAE3F;MACA,IAAI,IAAI,CAAC,mBAAmB,EAAE;QAC5B,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAK;UAC7B,IAAI,CAAC,SAAS,GAAG,MAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,IAAI;QAC1D,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI,CAAC,mBAAmB,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;;MAElD;MACA;MACA,IAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,EAAK;QACzC,IAAI,gBAAgB,GAAG,CAAC;QAExB,OAAO,MAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAClD,UAAA,IAAA;UAAA,IAAG,KAAK,GAAA,IAAA,CAAL,KAAK;UAAA,OACN,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;YAC/B;YACA,IAAM,OAAO,GAAA,aAAA,CAAA,aAAA,KACR,MAAI,CAAC,OAAO;cACf;cACA,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI;cACjC;cACA;cACA,2BAA2B,EAAE,KAAK;cAClC,0BAA0B,EAAE,KAAK;cACjC;cACA,eAAe,EAAE,CAAC;cAClB;cACA,wBAAwB,EAAE,IAAI;cAC9B,QAAQ,EAAE,MAAI,CAAC,OAAO,CAAC,yBAAyB;cAChD;cACA,OAAO,EAAA,aAAA,CAAA,aAAA,KACF,MAAI,CAAC,OAAO,CAAC,OAAO;gBACvB,eAAe,EAAE;cAAS,EAC3B;cACD;cACA,SAAS,EAAE,OAAO;cAClB,OAAO,EAAE,MAAM;cACf;cACA;cACA,UAAU,EAAE,SAAA,WAAC,eAAe,EAAK;gBAC/B,aAAa,GAAG,aAAa,GAAG,gBAAgB,GAAG,eAAe;gBAClE,gBAAgB,GAAG,eAAe;gBAClC,MAAI,CAAC,aAAa,CAAC,aAAa,EAAE,SAAS,CAAC;cAC9C,CAAC;cACD;cACA;cACA,oBAAoB,EAAE,SAAA,qBAAA,EAAM;gBAC1B,MAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,GAAG;gBAC5C;gBACA,IAAI,MAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAC,CAAC;kBAAA,OAAK,OAAO,CAAC,CAAC,CAAC;gBAAA,EAAC,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;kBAC9E,MAAI,CAAC,uBAAuB,CAAC,CAAC;gBAChC;cACF;YAAC,EACF;YAED,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,CAAC;;YAEd;YACA,MAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC;UACpC,CAAC,CAAC;QAAA,CACN,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,GAAG;MACP;MACA;MACA,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CACjB,IAAI,CAAC,YAAM;QACV,GAAG,GAAG,MAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACtD,GAAG,CAAC,SAAS,CAAC,eAAe,WAAA,MAAA,CAAW,MAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,CAAC;;QAE7E;QACA,IAAM,QAAQ,GAAG,cAAc,CAAC,MAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACtD,IAAI,QAAQ,KAAK,EAAE,EAAE;UACnB,GAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE,QAAQ,CAAC;QAC5C;QAEA,OAAO,MAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC;MACrC,CAAC,CAAC,CACD,IAAI,CAAC,UAAC,GAAG,EAAK;QACb,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;UAC3C,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,gDAAgD,CAAC;UAC/E;QACF;QAEA,IAAM,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC;QAC1C,IAAI,QAAQ,IAAI,IAAI,EAAE;UACpB,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,yCAAyC,CAAC;UACxE;QACF;QAEA,MAAI,CAAC,GAAG,GAAG,UAAU,CAAC,MAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC;QACtD,IAAA,WAAG,uBAAA,MAAA,CAAsB,MAAI,CAAC,GAAG,CAAE,CAAC;QAEpC,MAAI,CAAC,YAAY,CAAC,GAAG,CAAC;MACxB,CAAC,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;QACd,MAAI,CAAC,UAAU,CAAC,GAAG,CAAC;MACtB,CAAC,CAAC;IACN;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA,GAAA;IAAA,KAAA,EAMA,SAAA,mBAAA,EAAqB;MACnB;MACA;MACA;MACA,IAAI,CAAC,QAAQ,GAAG,KAAK;;MAErB;MACA,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE;QACpB,IAAA,WAAG,wCAAA,MAAA,CAAuC,IAAI,CAAC,GAAG,CAAE,CAAC;QACrD,IAAI,CAAC,aAAa,CAAC,CAAC;QACpB;MACF;;MAEA;MACA,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,EAAE;QAClC,IAAA,WAAG,wCAAA,MAAA,CAAuC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAE,CAAC;QACnE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;QACjC,IAAI,CAAC,aAAa,CAAC,CAAC;QACpB;MACF;;MAEA;MACA,IAAA,WAAG,EAAC,uBAAuB,CAAC;MAC5B,IAAI,CAAC,aAAa,CAAC,CAAC;IACtB;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATE;IAAA,GAAA;IAAA,KAAA,EAUA,SAAA,MAAM,eAAe,EAAE;MAAA,IAAA,MAAA;MACrB;MACA,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;QAAA,IAAA,SAAA,GAAA,0BAAA,CACZ,IAAI,CAAC,gBAAgB;UAAA,KAAA;QAAA;UAA1C,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,SAAA,CAAA,CAAA,IAAA,IAAA,GAA4C;YAAA,IAAjC,MAAM,GAAA,KAAA,CAAA,KAAA;YACf,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC;UAC/B;QAAC,SAAA,GAAA;UAAA,SAAA,CAAA,CAAA,CAAA,GAAA;QAAA;UAAA,SAAA,CAAA,CAAA;QAAA;MACH;;MAEA;MACA,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;QACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjB;MACF;MACA,IAAI,CAAC,QAAQ,GAAG,IAAI;;MAEpB;MACA,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;QAC9B,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI;MAC3B;MAEA,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE;QACxC,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;MAC1B;MAEA,OACE,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO;MACzC;MAAA,CACC,IAAI,CAAC;QAAA,OAAM,MAAI,CAAC,qBAAqB,CAAC,CAAC;MAAA,EAAC;IAE/C;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,eAAe,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE;MAC5C,IAAI,CAAC,UAAU,CAAC,IAAI,iBAAa,CAAC,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACnE;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,WAAW,GAAG,EAAE;MAAA,IAAA,MAAA;MACd;MACA,IAAI,IAAI,CAAC,QAAQ,EAAE;;MAEnB;MACA,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;QACpC;QACA;QACA;QACA,IAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB;QACxF,IAAI,iBAAiB,EAAE;UACrB,IAAI,CAAC,aAAa,GAAG,CAAC;QACxB;QAEA,IAAI,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE;UACtD,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;UAE5D,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO;UAEtC,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,YAAM;YACpC,MAAI,CAAC,KAAK,CAAC,CAAC;UACd,CAAC,EAAE,KAAK,CAAC;UACT;QACF;MACF;MAEA,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,UAAU,EAAE;QAC9C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;MAC3B,CAAC,MAAM;QACL,MAAM,GAAG;MACX;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA,GAAA;IAAA,KAAA,EAMA,SAAA,aAAa,YAAY,EAAE;MACzB,IAAI,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE;QAC3C;QACA;QACA,IAAI,CAAC,qBAAqB,CAAC,CAAC;MAC9B;MAEA,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,UAAU,EAAE;QAChD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;UAAE,YAAY,EAAZ;QAAa,CAAC,CAAC;MAC1C;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAA,GAAA;IAAA,KAAA,EAQA,SAAA,cAAc,SAAS,EAAE,UAAU,EAAE;MACnC,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,KAAK,UAAU,EAAE;QACjD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC;MAChD;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAA,GAAA;IAAA,KAAA,EASA,SAAA,mBAAmB,SAAS,EAAE,aAAa,EAAE,UAAU,EAAE;MACvD,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,KAAK,UAAU,EAAE;QACtD,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,aAAa,EAAE,UAAU,CAAC;MACpE;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA,GAAA;IAAA,KAAA,EAOA,SAAA,cAAA,EAAgB;MAAA,IAAA,MAAA;MACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;QAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;QAC1F;MACF;MAEA,IAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;MAE5D,IAAI,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;QACrC,GAAG,CAAC,SAAS,CAAC,qBAAqB,EAAE,GAAG,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,IAAI;MACvB,CAAC,MAAM;QACL,GAAG,CAAC,SAAS,CAAC,eAAe,KAAA,MAAA,CAAK,IAAI,CAAC,KAAK,CAAE,CAAC;MACjD;;MAEA;MACA,IAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;MACtD,IAAI,QAAQ,KAAK,EAAE,EAAE;QACnB,GAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE,QAAQ,CAAC;MAC5C;MAEA,IAAI,OAAO;MACX,IAAI,IAAI,CAAC,OAAO,CAAC,wBAAwB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;QAC/E,IAAI,CAAC,OAAO,GAAG,CAAC;QAChB,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC;MACxC,CAAC,MAAM;QACL,IACE,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,sBAAsB,IAChD,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,sBAAsB,EAChD;UACA,GAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE,IAAI,CAAC;QACxC;QACA,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC;MACxC;MAEA,OAAO,CACJ,IAAI,CAAC,UAAC,GAAG,EAAK;QACb,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;UAC3C,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,gDAAgD,CAAC;UAC/E;QACF;QAEA,IAAM,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC;QAC1C,IAAI,QAAQ,IAAI,IAAI,EAAE;UACpB,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,yCAAyC,CAAC;UACxE;QACF;QAEA,MAAI,CAAC,GAAG,GAAG,UAAU,CAAC,MAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC;QACtD,IAAA,WAAG,uBAAA,MAAA,CAAsB,MAAI,CAAC,GAAG,CAAE,CAAC;QAEpC,IAAI,OAAO,MAAI,CAAC,OAAO,CAAC,oBAAoB,KAAK,UAAU,EAAE;UAC3D,MAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrC;QAEA,IAAI,MAAI,CAAC,KAAK,KAAK,CAAC,EAAE;UACpB;UACA,MAAI,CAAC,YAAY,CAAC,GAAG,CAAC;UACtB,MAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;UACpB;QACF;QAEA,MAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;UACxC,IAAI,MAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE;YACzC,MAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC;UACtC,CAAC,MAAM;YACL,MAAI,CAAC,OAAO,GAAG,CAAC;YAChB,MAAI,CAAC,cAAc,CAAC,CAAC;UACvB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;QACd,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,8BAA8B,EAAE,GAAG,CAAC;MACrE,CAAC,CAAC;IACN;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA,GAAA;IAAA,KAAA,EAOA,SAAA,cAAA,EAAgB;MAAA,IAAA,MAAA;MACd,IAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC;MAC/C,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC;MAE5C,OAAO,CACJ,IAAI,CAAC,UAAC,GAAG,EAAK;QACb,IAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;UAClC;UACA;UACA;UACA;UACA;UACA,IAAI,MAAM,KAAK,GAAG,EAAE;YAClB,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,8CAA8C,CAAC;YAC7E;UACF;UAEA,IAAI,gBAAgB,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;YACjC;YACA;YACA,MAAI,CAAC,qBAAqB,CAAC,CAAC;UAC9B;UAEA,IAAI,CAAC,MAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YAC1B;YACA,MAAI,CAAC,cAAc,CACjB,GAAG,EACH,GAAG,EACH,iFACF,CAAC;YACD;UACF;;UAEA;UACA,MAAI,CAAC,GAAG,GAAG,IAAI;UACf,MAAI,CAAC,aAAa,CAAC,CAAC;UACpB;QACF;QAEA,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC;QAClE,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;UACxB,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,sCAAsC,CAAC;UACrE;QACF;QAEA,IAAM,WAAW,GAAG,QAAQ,CAC1B,GAAG,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,EAC5C,EACF,CAAC;QACD,MAAI,CAAC,SAAS,GAAG,WAAW,KAAK,CAAC;QAElC,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC;QAClE,IACE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IACpB,CAAC,MAAI,CAAC,SAAS,IACf,CAAC,MAAI,CAAC,OAAO,CAAC,oBAAoB,IAClC,MAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,eAAe,EACzC;UACA,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,sCAAsC,CAAC;UACrE;QACF;QAEA,IAAI,OAAO,MAAI,CAAC,OAAO,CAAC,oBAAoB,KAAK,UAAU,EAAE;UAC3D,MAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrC;QAEA,MAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;UACxC;UACA;UACA,IAAI,MAAM,KAAK,MAAM,EAAE;YACrB,MAAI,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC;YAClC,MAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YACtB;UACF;UAEA,MAAI,CAAC,OAAO,GAAG,MAAM;UACrB,MAAI,CAAC,cAAc,CAAC,CAAC;QACvB,CAAC,CAAC;MACJ,CAAC,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;QACd,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,8BAA8B,EAAE,GAAG,CAAC;MACrE,CAAC,CAAC;IACN;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA,GAAA;IAAA,KAAA,EAOA,SAAA,eAAA,EAAiB;MAAA,IAAA,MAAA;MACf;MACA;MACA;MACA,IAAI,IAAI,CAAC,QAAQ,EAAE;QACjB;MACF;MAEA,IAAI,GAAG;;MAEP;MACA;MACA;MACA,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE;QACpC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC;QACzC,GAAG,CAAC,SAAS,CAAC,wBAAwB,EAAE,OAAO,CAAC;MAClD,CAAC,MAAM;QACL,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC;MAC5C;MAEA,GAAG,CAAC,SAAS,CAAC,eAAe,KAAA,MAAA,CAAK,IAAI,CAAC,OAAO,CAAE,CAAC;MACjD,IAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC;MAE5C,OAAO,CACJ,IAAI,CAAC,UAAC,GAAG,EAAK;QACb,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;UAC3C,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,gDAAgD,CAAC;UAC/E;QACF;QAEA,MAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC;MACtC,CAAC,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;QACd;QACA,IAAI,MAAI,CAAC,QAAQ,EAAE;UACjB;QACF;QAEA,MAAI,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,2CAAA,MAAA,CAA2C,MAAI,CAAC,OAAO,GAAI,GAAG,CAAC;MAC9F,CAAC,CAAC;IACN;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA,GAAA;IAAA,KAAA,EAMA,SAAA,mBAAmB,GAAG,EAAE;MAAA,IAAA,MAAA;MACtB,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO;MAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;MAE/C,GAAG,CAAC,kBAAkB,CAAC,UAAC,SAAS,EAAK;QACpC,MAAI,CAAC,aAAa,CAAC,KAAK,GAAG,SAAS,EAAE,MAAI,CAAC,KAAK,CAAC;MACnD,CAAC,CAAC;MAEF,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,eAAe,EAAE;QAC7C,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,iCAAiC,CAAC;MAClE,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,sBAAsB,EAAE;QAC3D,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,4BAA4B,CAAC;MAC7D;;MAEA;MACA;MACA;MACA,IACE,CAAC,GAAG,KAAK,MAAM,CAAC,iBAAiB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,KACrD,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAClC;QACA,GAAG,GAAG,IAAI,CAAC,KAAK;MAClB;MAEA,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,UAAA,KAAA,EAAqB;QAAA,IAAlB,KAAK,GAAA,KAAA,CAAL,KAAK;UAAE,IAAI,GAAA,KAAA,CAAJ,IAAI;QACvD,IAAM,SAAS,GAAG,KAAK,aAAL,KAAK,eAAL,KAAK,CAAE,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC;;QAE9C;QACA;QACA;QACA,IAAI,MAAI,CAAC,SAAS,KAAK,CAAC,MAAI,CAAC,OAAO,CAAC,oBAAoB,IAAI,IAAI,CAAC,EAAE;UAClE,MAAI,CAAC,KAAK,GAAG,MAAI,CAAC,OAAO,GAAG,SAAS;UACrC,GAAG,CAAC,SAAS,CAAC,eAAe,KAAA,MAAA,CAAK,MAAI,CAAC,KAAK,CAAE,CAAC;UAC/C,MAAI,CAAC,SAAS,GAAG,KAAK;QACxB;;QAEA;QACA;QACA;QACA;QACA;QACA,IAAM,OAAO,GAAG,MAAI,CAAC,OAAO,GAAG,SAAS;QACxC,IAAI,CAAC,MAAI,CAAC,OAAO,CAAC,oBAAoB,IAAI,IAAI,IAAI,OAAO,KAAK,MAAI,CAAC,KAAK,EAAE;UACxE,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,yCAAA,MAAA,CACiC,MAAI,CAAC,KAAK,2CAAA,MAAA,CAAwC,OAAO,WACnG,CACF,CAAC;QACH;QAEA,IAAI,KAAK,KAAK,IAAI,EAAE;UAClB,OAAO,MAAI,CAAC,YAAY,CAAC,GAAG,CAAC;QAC/B;QAEA,IACE,MAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,sBAAsB,IAChD,MAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,sBAAsB,EAChD;UACA,GAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;QACtD;QACA,MAAI,CAAC,aAAa,CAAC,MAAI,CAAC,OAAO,EAAE,MAAI,CAAC,KAAK,CAAC;QAC5C,OAAO,MAAI,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC;MACtC,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA,GAAA;IAAA,KAAA,EAMA,SAAA,sBAAsB,GAAG,EAAE,GAAG,EAAE;MAC9B,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC;MAClE,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;QACxB,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,sCAAsC,CAAC;QACrE;MACF;MAEA,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;MACtC,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;MAElE,IAAI,CAAC,OAAO,GAAG,MAAM;MAErB,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE;QACzB;QACA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpB;MACF;MAEA,IAAI,CAAC,cAAc,CAAC,CAAC;IACvB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA,GAAA;IAAA,KAAA,EAKA,SAAA,aAAa,MAAM,EAAE,GAAG,EAAE;MACxB,IAAM,GAAG,GAAG,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC;MAClD,IAAI,CAAC,IAAI,GAAG,GAAG;MACf,OAAO,GAAG;IACZ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA,GAAA;IAAA,KAAA,EAKA,SAAA,sBAAA,EAAwB;MAAA,IAAA,OAAA;MACtB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;MAE1B,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,SAAM,CAAC,UAAC,GAAG,EAAK;QAChE,OAAI,CAAC,UAAU,CAAC,GAAG,CAAC;MACtB,CAAC,CAAC;MACF,IAAI,CAAC,cAAc,GAAG,IAAI;IAC5B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA,GAAA;IAAA,KAAA,EAKA,SAAA,wBAAA,EAA0B;MAAA,IAAA,OAAA;MACxB;MACA;MACA;MACA;MACA,IACE,CAAC,IAAI,CAAC,OAAO,CAAC,2BAA2B,IACzC,CAAC,IAAI,CAAC,YAAY,IAClB,IAAI,CAAC,cAAc,KAAK,IAAI,EAC5B;QACA,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;MAC1B;MAEA,IAAM,YAAY,GAAG;QACnB,IAAI,EAAE,IAAI,CAAC,KAAK;QAChB,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;QAC/B,YAAY,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC;MACpC,CAAC;MAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;QACzB;QACA,YAAY,CAAC,kBAAkB,GAAG,IAAI,CAAC,mBAAmB;MAC5D,CAAC,MAAM;QACL;QACA,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG;MACnC;MAEA,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa,EAAK;QACzF,OAAI,CAAC,cAAc,GAAG,aAAa;MACrC,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA,GAAA;IAAA,KAAA,EAKA,SAAA,aAAa,GAAG,EAAe;MAAA,IAAb,IAAI,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,IAAI;MAC3B,OAAO,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC;IAC7C;EAAC;IAAA,GAAA;IAAA,KAAA,EAx0BD,SAAA,UAAiB,GAAG,EAAgB;MAAA,IAAd,OAAO,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAC,CAAC;MAChC,IAAM,GAAG,GAAG,WAAW,CAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC;MAE/C,OAAO,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CACnC,IAAI,CAAC,UAAC,GAAG,EAAK;QACb;QACA,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,KAAK,GAAG,EAAE;UAC3B;QACF;QAEA,MAAM,IAAI,iBAAa,CAAC,mDAAmD,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC;MAC9F,CAAC,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;QACd,IAAI,EAAE,GAAG,YAAY,iBAAa,CAAC,EAAE;UACnC,GAAG,GAAG,IAAI,iBAAa,CAAC,iCAAiC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;QAC5E;QAEA,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO,CAAC,EAAE;UACjC,MAAM,GAAG;QACX;;QAEA;QACA;QACA;QACA,IAAM,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QACpC,IAAM,eAAe,GAAG,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,IAAM,UAAU,GAAA,aAAA,CAAA,aAAA,KACX,OAAO;UACV,WAAW,EAAE;QAAe,EAC7B;QACD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO;UAAA,OAAK,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC;QAAA,EAAC,CAAC,IAAI,CAAC;UAAA,OAC/D,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,UAAU,CAAC;QAAA,CACvC,CAAC;MACH,CAAC,CAAC;IACN;EAAC;AAAA;AAyyBH,SAAS,cAAc,CAAC,QAAQ,EAAE;EAChC,OAAO,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAC5B,GAAG,CAAC,UAAA,KAAA;IAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA;MAAE,GAAG,GAAA,KAAA;MAAE,KAAK,GAAA,KAAA;IAAA,UAAA,MAAA,CAAS,GAAG,OAAA,MAAA,CAAI,cAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;EAAA,CAAE,CAAC,CAC/D,IAAI,CAAC,GAAG,CAAC;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE;EAC1C,OAAO,MAAM,IAAI,QAAQ,IAAI,MAAM,GAAG,QAAQ,GAAG,GAAG;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE;EACzC,IAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC;EAExD,IAAI,OAAO,CAAC,QAAQ,KAAK,sBAAsB,EAAE;IAC/C,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,GAAG,CAAC;EACpD,CAAC,MAAM,IAAI,OAAO,CAAC,QAAQ,KAAK,sBAAsB,EAAE;IACtD,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,GAAG,CAAC;EACpD,CAAC,MAAM;IACL,GAAG,CAAC,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;EACzC;EACA,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC;EAErC,SAAA,GAAA,MAAA,eAAA,GAA4B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAA,GAAA,GAAA,eAAA,CAAA,MAAA,EAAA,GAAA,IAAE;IAAhD,IAAA,kBAAA,GAAA,cAAA,CAAA,eAAA,CAAA,GAAA;MAAO,IAAI,GAAA,kBAAA;MAAE,KAAK,GAAA,kBAAA;IACrB,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;EAC5B;EAEA,IAAI,OAAO,CAAC,YAAY,EAAE;IACxB,IAAM,SAAS,GAAG,IAAA,gBAAI,EAAC,CAAC;IACxB,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,SAAS,CAAC;EAC1C;EAEA,OAAO,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA,SAMe,WAAW,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA;EAAA,OAAA,aAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAc1B;AACA;AACA;AACA;AACA;AACA;AALA,SAAA,cAAA;EAAA,aAAA,GAAA,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAdA,SAAA,QAA2B,GAAG,EAAE,IAAI,EAAE,OAAO;IAAA,IAAA,GAAA;IAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;MAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA;UAAA,MACvC,OAAO,OAAO,CAAC,eAAe,KAAK,UAAU;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;UAAA,QAAA,CAAA,IAAA;UAAA,OACzC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC;QAAA;UAAA,QAAA,CAAA,IAAA;UAAA,OAGlB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;QAAA;UAA1B,GAAG,GAAA,QAAA,CAAA,IAAA;UAAA,MAEL,OAAO,OAAO,CAAC,eAAe,KAAK,UAAU;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;UAAA,QAAA,CAAA,IAAA;UAAA,OACzC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC;QAAA;UAAA,OAAA,QAAA,CAAA,MAAA,WAGlC,GAAG;QAAA;QAAA;UAAA,OAAA,QAAA,CAAA,IAAA;MAAA;IAAA,GAAA,OAAA;EAAA,CACX;EAAA,OAAA,aAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAQD,SAAS,QAAQ,CAAA,EAAG;EAClB,IAAI,MAAM,GAAG,IAAI;EACjB;EACA;EACA,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,MAAM,KAAK,KAAK,EAAE;IAClE,MAAM,GAAG,KAAK;EAChB;EAEA,OAAO,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE;EAC/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IACE,OAAO,CAAC,WAAW,IAAI,IAAI,IAC3B,YAAY,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,IAC1C,GAAG,CAAC,eAAe,IAAI,IAAI,EAC3B;IACA,OAAO,KAAK;EACd;EAEA,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,aAAa,KAAK,UAAU,EAAE;IAC1D,OAAO,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,YAAY,EAAE,OAAO,CAAC;EAC1D;EAEA,OAAO,oBAAoB,CAAC,GAAG,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB,CAAC,GAAG,EAAE;EACjC,IAAM,MAAM,GAAG,GAAG,CAAC,gBAAgB,GAAG,GAAG,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC;EAC1E,OAAO,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,KAAK,QAAQ,CAAC,CAAC;AAC3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE;EAChC,OAAO,IAAI,oBAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kBAAkB,CAAC,SAAS,EAAE,SAAS,EAAE;EAChD,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;EAClD,IAAM,KAAK,GAAG,EAAE;EAEhB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IAClC,KAAK,CAAC,IAAI,CAAC;MACT,KAAK,EAAE,QAAQ,GAAG,CAAC;MACnB,GAAG,EAAE,QAAQ,IAAI,CAAC,GAAG,CAAC;IACxB,CAAC,CAAC;EACJ;EAEA,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,SAAS;EAEpC,OAAO,KAAK;AACd;AAEA,UAAU,CAAC,cAAc,GAAG,cAAc;AAAA,IAAA,QAAA,GAAA,OAAA,cAE3B,UAAU;;;;;;;;;AC3mCzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,IAAI,CAAA,EAAG;EAC7B,OAAO,sCAAsC,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,CAAC,EAAK;IACpE,IAAM,CAAC,GAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAI,CAAC;IAClC,IAAM,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAI,CAAC,GAAG,GAAG,GAAI,GAAG;IACzC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;EACvB,CAAC,CAAC;AACJ;;;ACltjvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACt
   "file": "generated.js",
   "sourceRoot": "",
   "sourcesContent": [
@@ -46,7 +46,7 @@
     "class DetailedError extends Error {\n  constructor(message, causingErr = null, req = null, res = null) {\n    super(message)\n\n    this.originalRequest = req\n    this.originalResponse = res\n    this.causingError = causingErr\n\n    if (causingErr != null) {\n      message += `, caused by ${causingErr.toString()}`\n    }\n\n    if (req != null) {\n      const requestId = req.getHeader('X-Request-ID') || 'n/a'\n      const method = req.getMethod()\n      const url = req.getURL()\n      const status = res ? res.getStatus() : 'n/a'\n      const body = res ? res.getBody() || '' : 'n/a'\n      message += `, originated from request (method: ${method}, url: ${url}, response code: ${status}, response text: ${body}, request id: ${requestId})`\n    }\n    this.message = message\n  }\n}\n\nexport default DetailedError\n",
     "let isEnabled = false\n\nexport function enableDebugLog() {\n  isEnabled = true\n}\n\nexport function log(msg) {\n  if (!isEnabled) return\n  console.log(msg)\n}\n",
     "export default class NoopUrlStorage {\n  listAllUploads() {\n    return Promise.resolve([])\n  }\n\n  findUploadsByFingerprint(_fingerprint) {\n    return Promise.resolve([])\n  }\n\n  removeUpload(_urlStorageKey) {\n    return Promise.resolve()\n  }\n\n  addUpload(_fingerprint, _upload) {\n    return Promise.resolve(null)\n  }\n}\n",
-    "import { Base64 } from 'js-base64'\nimport URL from 'url-parse'\nimport DetailedError from './error.js'\nimport { log } from './logger.js'\nimport uuid from './uuid.js'\n\nconst PROTOCOL_TUS_V1 = 'tus-v1'\nconst PROTOCOL_IETF_DRAFT_03 = 'ietf-draft-03'\n\nconst defaultOptions = {\n  endpoint: null,\n\n  uploadUrl: null,\n  metadata: {},\n  metadataForPartialUploads: {},\n  fingerprint: null,\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n  onUploadUrlAvailable: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n  onBeforeRequest: null,\n  onAfterResponse: null,\n  onShouldRetry: defaultOnShouldRetry,\n\n  chunkSize: Number.POSITIVE_INFINITY,\n  retryDelays: [0, 1000, 3000, 5000],\n  parallelUploads: 1,\n  parallelUploadBoundaries: null,\n  storeFingerprintForResuming: true,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n\n  urlStorage: null,\n  fileReader: null,\n  httpStack: null,\n\n  protocol: PROTOCOL_TUS_V1,\n}\n\nclass BaseUpload {\n  constructor(file, options) {\n    // Warn about removed options from previous versions\n    if ('resume' in options) {\n      console.log(\n        'tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead.',\n      )\n    }\n\n    // The default options will already be added from the wrapper classes.\n    this.options = options\n\n    // Cast chunkSize to integer\n    this.options.chunkSize = Number(this.options.chunkSize)\n\n    // The storage module used to store URLs\n    this._urlStorage = this.options.urlStorage\n\n    // The underlying File/Blob object\n    this.file = file\n\n    // The URL against which the file will be uploaded\n    this.url = null\n\n    // The underlying request object for the current PATCH request\n    this._req = null\n\n    // The fingerpinrt for the current file (set after start())\n    this._fingerprint = null\n\n    // The key that the URL storage returned when saving an URL with a fingerprint,\n    this._urlStorageKey = null\n\n    // The offset used in the current PATCH request\n    this._offset = null\n\n    // True if the current PATCH request has been aborted\n    this._aborted = false\n\n    // The file's size in bytes\n    this._size = null\n\n    // The Source object which will wrap around the given file and provides us\n    // with a unified interface for getting its size and slice chunks from its\n    // content allowing us to easily handle Files, Blobs, Buffers and Streams.\n    this._source = null\n\n    // The current count of attempts which have been made. Zero indicates none.\n    this._retryAttempt = 0\n\n    // The timeout's ID which is used to delay the next retry\n    this._retryTimeout = null\n\n    // The offset of the remote upload before the latest attempt was started.\n    this._offsetBeforeRetry = 0\n\n    // An array of BaseUpload instances which are used for uploading the different\n    // parts, if the parallelUploads option is used.\n    this._parallelUploads = null\n\n    // An array of upload URLs which are used for uploading the different\n    // parts, if the parallelUploads option is used.\n    this._parallelUploadUrls = null\n  }\n\n  /**\n   * Use the Termination extension to delete an upload from the server by sending a DELETE\n   * request to the specified upload URL. This is only possible if the server supports the\n   * Termination extension. If the `options.retryDelays` property is set, the method will\n   * also retry if an error ocurrs.\n   *\n   * @param {String} url The upload's URL which will be terminated.\n   * @param {object} options Optional options for influencing HTTP requests.\n   * @return {Promise} The Promise will be resolved/rejected when the requests finish.\n   */\n  static terminate(url, options = {}) {\n    const req = openRequest('DELETE', url, options)\n\n    return sendRequest(req, null, options)\n      .then((res) => {\n        // A 204 response indicates a successfull request\n        if (res.getStatus() === 204) {\n          return\n        }\n\n        throw new DetailedError('tus: unexpected response while terminating upload', null, req, res)\n      })\n      .catch((err) => {\n        if (!(err instanceof DetailedError)) {\n          err = new DetailedError('tus: failed to terminate upload', err, req, null)\n        }\n\n        if (!shouldRetry(err, 0, options)) {\n          throw err\n        }\n\n        // Instead of keeping track of the retry attempts, we remove the first element from the delays\n        // array. If the array is empty, all retry attempts are used up and we will bubble up the error.\n        // We recursively call the terminate function will removing elements from the retryDelays array.\n        const delay = options.retryDelays[0]\n        const remainingDelays = options.retryDelays.slice(1)\n        const newOptions = {\n          ...options,\n          retryDelays: remainingDelays,\n        }\n        return new Promise((resolve) => setTimeout(resolve, delay)).then(() =>\n          BaseUpload.terminate(url, newOptions),\n        )\n      })\n  }\n\n  findPreviousUploads() {\n    return this.options\n      .fingerprint(this.file, this.options)\n      .then((fingerprint) => this._urlStorage.findUploadsByFingerprint(fingerprint))\n  }\n\n  resumeFromPreviousUpload(previousUpload) {\n    this.url = previousUpload.uploadUrl || null\n    this._parallelUploadUrls = previousUpload.parallelUploadUrls || null\n    this._urlStorageKey = previousUpload.urlStorageKey\n  }\n\n  start() {\n    const { file } = this\n\n    if (!file) {\n      this._emitError(new Error('tus: no file or stream to upload provided'))\n      return\n    }\n\n    if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03].includes(this.options.protocol)) {\n      this._emitError(new Error(`tus: unsupported protocol ${this.options.protocol}`))\n      return\n    }\n\n    if (!this.options.endpoint && !this.options.uploadUrl && !this.url) {\n      this._emitError(new Error('tus: neither an endpoint or an upload URL is provided'))\n      return\n    }\n\n    const { retryDelays } = this.options\n    if (retryDelays != null && Object.prototype.toString.call(retryDelays) !== '[object Array]') {\n      this._emitError(new Error('tus: the `retryDelays` option must either be an array or null'))\n      return\n    }\n\n    if (this.options.parallelUploads > 1) {\n      // Test which options are incompatible with parallel uploads.\n      for (const optionName of ['uploadUrl', 'uploadSize', 'uploadLengthDeferred']) {\n        if (this.options[optionName]) {\n          this._emitError(\n            new Error(`tus: cannot use the ${optionName} option when parallelUploads is enabled`),\n          )\n          return\n        }\n      }\n    }\n\n    if (this.options.parallelUploadBoundaries) {\n      if (this.options.parallelUploads <= 1) {\n        this._emitError(\n          new Error(\n            'tus: cannot use the `parallelUploadBoundaries` option when `parallelUploads` is disabled',\n          ),\n        )\n        return\n      }\n      if (this.options.parallelUploads !== this.options.parallelUploadBoundaries.length) {\n        this._emitError(\n          new Error(\n            'tus: the `parallelUploadBoundaries` must have the same length as the value of `parallelUploads`',\n          ),\n        )\n        return\n      }\n    }\n\n    this.options\n      .fingerprint(file, this.options)\n      .then((fingerprint) => {\n        if (fingerprint == null) {\n          log(\n            'No fingerprint was calculated meaning that the upload cannot be stored in the URL storage.',\n          )\n        } else {\n          log(`Calculated fingerprint: ${fingerprint}`)\n        }\n\n        this._fingerprint = fingerprint\n\n        if (this._source) {\n          return this._source\n        }\n        return this.options.fileReader.openFile(file, this.options.chunkSize)\n      })\n      .then((source) => {\n        this._source = source\n\n        // First, we look at the uploadLengthDeferred option.\n        // Next, we check if the caller has supplied a manual upload size.\n        // Finally, we try to use the calculated size from the source object.\n        if (this.options.uploadLengthDeferred) {\n          this._size = null\n        } else if (this.options.uploadSize != null) {\n          this._size = Number(this.options.uploadSize)\n          if (Number.isNaN(this._size)) {\n            this._emitError(new Error('tus: cannot convert `uploadSize` option into a number'))\n            return\n          }\n        } else {\n          this._size = this._source.size\n          if (this._size == null) {\n            this._emitError(\n              new Error(\n                \"tus: cannot automatically derive upload's size from input. Specify it manually using the `uploadSize` option or use the `uploadLengthDeferred` option\",\n              ),\n            )\n            return\n          }\n        }\n\n        // If the upload was configured to use multiple requests or if we resume from\n        // an upload which used multiple requests, we start a parallel upload.\n        if (this.options.parallelUploads > 1 || this._parallelUploadUrls != null) {\n          this._startParallelUpload()\n        } else {\n          this._startSingleUpload()\n        }\n      })\n      .catch((err) => {\n        this._emitError(err)\n      })\n  }\n\n  /**\n   * Initiate the uploading procedure for a parallelized upload, where one file is split into\n   * multiple request which are run in parallel.\n   *\n   * @api private\n   */\n  _startParallelUpload() {\n    const totalSize = this._size\n    let totalProgress = 0\n    this._parallelUploads = []\n\n    const partCount =\n      this._parallelUploadUrls != null\n        ? this._parallelUploadUrls.length\n        : this.options.parallelUploads\n\n    // The input file will be split into multiple slices which are uploaded in separate\n    // requests. Here we get the start and end position for the slices.\n    const parts =\n      this.options.parallelUploadBoundaries ?? splitSizeIntoParts(this._source.size, partCount)\n\n    // Attach URLs from previous uploads, if available.\n    if (this._parallelUploadUrls) {\n      parts.forEach((part, index) => {\n        part.uploadUrl = this._parallelUploadUrls[index] || null\n      })\n    }\n\n    // Create an empty list for storing the upload URLs\n    this._parallelUploadUrls = new Array(parts.length)\n\n    // Generate a promise for each slice that will be resolve if the respective\n    // upload is completed.\n    const uploads = parts.map((part, index) => {\n      let lastPartProgress = 0\n\n      return this._source.slice(part.start, part.end).then(\n        ({ value }) =>\n          new Promise((resolve, reject) => {\n            // Merge with the user supplied options but overwrite some values.\n            const options = {\n              ...this.options,\n              // If available, the partial upload should be resumed from a previous URL.\n              uploadUrl: part.uploadUrl || null,\n              // We take manually care of resuming for partial uploads, so they should\n              // not be stored in the URL storage.\n              storeFingerprintForResuming: false,\n              removeFingerprintOnSuccess: false,\n              // Reset the parallelUploads option to not cause recursion.\n              parallelUploads: 1,\n              // Reset this option as we are not doing a parallel upload.\n              parallelUploadBoundaries: null,\n              metadata: this.options.metadataForPartialUploads,\n              // Add the header to indicate the this is a partial upload.\n              headers: {\n                ...this.options.headers,\n                'Upload-Concat': 'partial',\n              },\n              // Reject or resolve the promise if the upload errors or completes.\n              onSuccess: resolve,\n              onError: reject,\n              // Based in the progress for this partial upload, calculate the progress\n              // for the entire final upload.\n              onProgress: (newPartProgress) => {\n                totalProgress = totalProgress - lastPartProgress + newPartProgress\n                lastPartProgress = newPartProgress\n                this._emitProgress(totalProgress, totalSize)\n              },\n              // Wait until every partial upload has an upload URL, so we can add\n              // them to the URL storage.\n              onUploadUrlAvailable: () => {\n                this._parallelUploadUrls[index] = upload.url\n                // Test if all uploads have received an URL\n                if (this._parallelUploadUrls.filter((u) => Boolean(u)).length === parts.length) {\n                  this._saveUploadInUrlStorage()\n                }\n              },\n            }\n\n            const upload = new BaseUpload(value, options)\n            upload.start()\n\n            // Store the upload in an array, so we can later abort them if necessary.\n            this._parallelUploads.push(upload)\n          }),\n      )\n    })\n\n    let req\n    // Wait until all partial uploads are finished and we can send the POST request for\n    // creating the final upload.\n    Promise.all(uploads)\n      .then(() => {\n        req = this._openRequest('POST', this.options.endpoint)\n        req.setHeader('Upload-Concat', `final;${this._parallelUploadUrls.join(' ')}`)\n\n        // Add metadata if values have been added\n        const metadata = encodeMetadata(this.options.metadata)\n        if (metadata !== '') {\n          req.setHeader('Upload-Metadata', metadata)\n        }\n\n        return this._sendRequest(req, null)\n      })\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while creating upload')\n          return\n        }\n\n        const location = res.getHeader('Location')\n        if (location == null) {\n          this._emitHttpError(req, res, 'tus: invalid or missing Location header')\n          return\n        }\n\n        this.url = resolveUrl(this.options.endpoint, location)\n        log(`Created upload at ${this.url}`)\n\n        this._emitSuccess(res)\n      })\n      .catch((err) => {\n        this._emitError(err)\n      })\n  }\n\n  /**\n   * Initiate the uploading procedure for a non-parallel upload. Here the entire file is\n   * uploaded in a sequential matter.\n   *\n   * @api private\n   */\n  _startSingleUpload() {\n    // Reset the aborted flag when the upload is started or else the\n    // _performUpload will stop before sending a request if the upload has been\n    // aborted previously.\n    this._aborted = false\n\n    // The upload had been started previously and we should reuse this URL.\n    if (this.url != null) {\n      log(`Resuming upload from previous URL: ${this.url}`)\n      this._resumeUpload()\n      return\n    }\n\n    // A URL has manually been specified, so we try to resume\n    if (this.options.uploadUrl != null) {\n      log(`Resuming upload from provided URL: ${this.options.uploadUrl}`)\n      this.url = this.options.uploadUrl\n      this._resumeUpload()\n      return\n    }\n\n    // An upload has not started for the file yet, so we start a new one\n    log('Creating a new upload')\n    this._createUpload()\n  }\n\n  /**\n   * Abort any running request and stop the current upload. After abort is called, no event\n   * handler will be invoked anymore. You can use the `start` method to resume the upload\n   * again.\n   * If `shouldTerminate` is true, the `terminate` function will be called to remove the\n   * current upload from the server.\n   *\n   * @param {boolean} shouldTerminate True if the upload should be deleted from the server.\n   * @return {Promise} The Promise will be resolved/rejected when the requests finish.\n   */\n  abort(shouldTerminate) {\n    // Stop any parallel partial uploads, that have been started in _startParallelUploads.\n    if (this._parallelUploads != null) {\n      for (const upload of this._parallelUploads) {\n        upload.abort(shouldTerminate)\n      }\n    }\n\n    // Stop any current running request.\n    if (this._req !== null) {\n      this._req.abort()\n      // Note: We do not close the file source here, so the user can resume in the future.\n    }\n    this._aborted = true\n\n    // Stop any timeout used for initiating a retry.\n    if (this._retryTimeout != null) {\n      clearTimeout(this._retryTimeout)\n      this._retryTimeout = null\n    }\n\n    if (!shouldTerminate || this.url == null) {\n      return Promise.resolve()\n    }\n\n    return (\n      BaseUpload.terminate(this.url, this.options)\n        // Remove entry from the URL storage since the upload URL is no longer valid.\n        .then(() => this._removeFromUrlStorage())\n    )\n  }\n\n  _emitHttpError(req, res, message, causingErr) {\n    this._emitError(new DetailedError(message, causingErr, req, res))\n  }\n\n  _emitError(err) {\n    // Do not emit errors, e.g. from aborted HTTP requests, if the upload has been stopped.\n    if (this._aborted) return\n\n    // Check if we should retry, when enabled, before sending the error to the user.\n    if (this.options.retryDelays != null) {\n      // We will reset the attempt counter if\n      // - we were already able to connect to the server (offset != null) and\n      // - we were able to upload a small chunk of data to the server\n      const shouldResetDelays = this._offset != null && this._offset > this._offsetBeforeRetry\n      if (shouldResetDelays) {\n        this._retryAttempt = 0\n      }\n\n      if (shouldRetry(err, this._retryAttempt, this.options)) {\n        const delay = this.options.retryDelays[this._retryAttempt++]\n\n        this._offsetBeforeRetry = this._offset\n\n        this._retryTimeout = setTimeout(() => {\n          this.start()\n        }, delay)\n        return\n      }\n    }\n\n    if (typeof this.options.onError === 'function') {\n      this.options.onError(err)\n    } else {\n      throw err\n    }\n  }\n\n  /**\n   * Publishes notification if the upload has been successfully completed.\n   *\n   * @param {object} lastResponse Last HTTP response.\n   * @api private\n   */\n  _emitSuccess(lastResponse) {\n    if (this.options.removeFingerprintOnSuccess) {\n      // Remove stored fingerprint and corresponding endpoint. This causes\n      // new uploads of the same file to be treated as a different file.\n      this._removeFromUrlStorage()\n    }\n\n    if (typeof this.options.onSuccess === 'function') {\n      this.options.onSuccess({ lastResponse })\n    }\n  }\n\n  /**\n   * Publishes notification when data has been sent to the server. This\n   * data may not have been accepted by the server yet.\n   *\n   * @param {number} bytesSent  Number of bytes sent to the server.\n   * @param {number} bytesTotal Total number of bytes to be sent to the server.\n   * @api private\n   */\n  _emitProgress(bytesSent, bytesTotal) {\n    if (typeof this.options.onProgress === 'function') {\n      this.options.onProgress(bytesSent, bytesTotal)\n    }\n  }\n\n  /**\n   * Publishes notification when a chunk of data has been sent to the server\n   * and accepted by the server.\n   * @param {number} chunkSize  Size of the chunk that was accepted by the server.\n   * @param {number} bytesAccepted Total number of bytes that have been\n   *                                accepted by the server.\n   * @param {number} bytesTotal Total number of bytes to be sent to the server.\n   * @api private\n   */\n  _emitChunkComplete(chunkSize, bytesAccepted, bytesTotal) {\n    if (typeof this.options.onChunkComplete === 'function') {\n      this.options.onChunkComplete(chunkSize, bytesAccepted, bytesTotal)\n    }\n  }\n\n  /**\n   * Create a new upload using the creation extension by sending a POST\n   * request to the endpoint. After successful creation the file will be\n   * uploaded\n   *\n   * @api private\n   */\n  _createUpload() {\n    if (!this.options.endpoint) {\n      this._emitError(new Error('tus: unable to create upload because no endpoint is provided'))\n      return\n    }\n\n    const req = this._openRequest('POST', this.options.endpoint)\n\n    if (this.options.uploadLengthDeferred) {\n      req.setHeader('Upload-Defer-Length', '1')\n    } else {\n      req.setHeader('Upload-Length', `${this._size}`)\n    }\n\n    // Add metadata if values have been added\n    const metadata = encodeMetadata(this.options.metadata)\n    if (metadata !== '') {\n      req.setHeader('Upload-Metadata', metadata)\n    }\n\n    let promise\n    if (this.options.uploadDataDuringCreation && !this.options.uploadLengthDeferred) {\n      this._offset = 0\n      promise = this._addChunkToRequest(req)\n    } else {\n      if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {\n        req.setHeader('Upload-Complete', '?0')\n      }\n      promise = this._sendRequest(req, null)\n    }\n\n    promise\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while creating upload')\n          return\n        }\n\n        const location = res.getHeader('Location')\n        if (location == null) {\n          this._emitHttpError(req, res, 'tus: invalid or missing Location header')\n          return\n        }\n\n        this.url = resolveUrl(this.options.endpoint, location)\n        log(`Created upload at ${this.url}`)\n\n        if (typeof this.options.onUploadUrlAvailable === 'function') {\n          this.options.onUploadUrlAvailable()\n        }\n\n        if (this._size === 0) {\n          // Nothing to upload and file was successfully created\n          this._emitSuccess(res)\n          this._source.close()\n          return\n        }\n\n        this._saveUploadInUrlStorage().then(() => {\n          if (this.options.uploadDataDuringCreation) {\n            this._handleUploadResponse(req, res)\n          } else {\n            this._offset = 0\n            this._performUpload()\n          }\n        })\n      })\n      .catch((err) => {\n        this._emitHttpError(req, null, 'tus: failed to create upload', err)\n      })\n  }\n\n  /*\n   * Try to resume an existing upload. First a HEAD request will be sent\n   * to retrieve the offset. If the request fails a new upload will be\n   * created. In the case of a successful response the file will be uploaded.\n   *\n   * @api private\n   */\n  _resumeUpload() {\n    const req = this._openRequest('HEAD', this.url)\n    const promise = this._sendRequest(req, null)\n\n    promise\n      .then((res) => {\n        const status = res.getStatus()\n        if (!inStatusCategory(status, 200)) {\n          // If the upload is locked (indicated by the 423 Locked status code), we\n          // emit an error instead of directly starting a new upload. This way the\n          // retry logic can catch the error and will retry the upload. An upload\n          // is usually locked for a short period of time and will be available\n          // afterwards.\n          if (status === 423) {\n            this._emitHttpError(req, res, 'tus: upload is currently locked; retry later')\n            return\n          }\n\n          if (inStatusCategory(status, 400)) {\n            // Remove stored fingerprint and corresponding endpoint,\n            // on client errors since the file can not be found\n            this._removeFromUrlStorage()\n          }\n\n          if (!this.options.endpoint) {\n            // Don't attempt to create a new upload if no endpoint is provided.\n            this._emitHttpError(\n              req,\n              res,\n              'tus: unable to resume upload (new upload cannot be created without an endpoint)',\n            )\n            return\n          }\n\n          // Try to create a new upload\n          this.url = null\n          this._createUpload()\n          return\n        }\n\n        const offset = Number.parseInt(res.getHeader('Upload-Offset'), 10)\n        if (Number.isNaN(offset)) {\n          this._emitHttpError(req, res, 'tus: invalid or missing offset value')\n          return\n        }\n\n        const length = Number.parseInt(res.getHeader('Upload-Length'), 10)\n        if (\n          Number.isNaN(length) &&\n          !this.options.uploadLengthDeferred &&\n          this.options.protocol === PROTOCOL_TUS_V1\n        ) {\n          this._emitHttpError(req, res, 'tus: invalid or missing length value')\n          return\n        }\n\n        if (typeof this.options.onUploadUrlAvailable === 'function') {\n          this.options.onUploadUrlAvailable()\n        }\n\n        this._saveUploadInUrlStorage().then(() => {\n          // Upload has already been completed and we do not need to send additional\n          // data to the server\n          if (offset === length) {\n            this._emitProgress(length, length)\n            this._emitSuccess(res)\n            return\n          }\n\n          this._offset = offset\n          this._performUpload()\n        })\n      })\n      .catch((err) => {\n        this._emitHttpError(req, null, 'tus: failed to resume upload', err)\n      })\n  }\n\n  /**\n   * Start uploading the file using PATCH requests. The file will be divided\n   * into chunks as specified in the chunkSize option. During the upload\n   * the onProgress event handler may be invoked multiple times.\n   *\n   * @api private\n   */\n  _performUpload() {\n    // If the upload has been aborted, we will not send the next PATCH request.\n    // This is important if the abort method was called during a callback, such\n    // as onChunkComplete or onProgress.\n    if (this._aborted) {\n      return\n    }\n\n    let req\n\n    // Some browser and servers may not support the PATCH method. For those\n    // cases, you can tell tus-js-client to use a POST request with the\n    // X-HTTP-Method-Override header for simulating a PATCH request.\n    if (this.options.overridePatchMethod) {\n      req = this._openRequest('POST', this.url)\n      req.setHeader('X-HTTP-Method-Override', 'PATCH')\n    } else {\n      req = this._openRequest('PATCH', this.url)\n    }\n\n    req.setHeader('Upload-Offset', `${this._offset}`)\n    const promise = this._addChunkToRequest(req)\n\n    promise\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while uploading chunk')\n          return\n        }\n\n        this._handleUploadResponse(req, res)\n      })\n      .catch((err) => {\n        // Don't emit an error if the upload was aborted manually\n        if (this._aborted) {\n          return\n        }\n\n        this._emitHttpError(req, null, `tus: failed to upload chunk at offset ${this._offset}`, err)\n      })\n  }\n\n  /**\n   * _addChunktoRequest reads a chunk from the source and sends it using the\n   * supplied request object. It will not handle the response.\n   *\n   * @api private\n   */\n  _addChunkToRequest(req) {\n    const start = this._offset\n    let end = this._offset + this.options.chunkSize\n\n    req.setProgressHandler((bytesSent) => {\n      this._emitProgress(start + bytesSent, this._size)\n    })\n\n    req.setHeader('Content-Type', 'application/offset+octet-stream')\n\n    // The specified chunkSize may be Infinity or the calcluated end position\n    // may exceed the file's size. In both cases, we limit the end position to\n    // the input's total size for simpler calculations and correctness.\n    if (\n      (end === Number.POSITIVE_INFINITY || end > this._size) &&\n      !this.options.uploadLengthDeferred\n    ) {\n      end = this._size\n    }\n\n    return this._source.slice(start, end).then(({ value, done }) => {\n      const valueSize = value?.size ? value.size : 0\n\n      // If the upload length is deferred, the upload size was not specified during\n      // upload creation. So, if the file reader is done reading, we know the total\n      // upload size and can tell the tus server.\n      if (this.options.uploadLengthDeferred && done) {\n        this._size = this._offset + valueSize\n        req.setHeader('Upload-Length', `${this._size}`)\n      }\n\n      // The specified uploadSize might not match the actual amount of data that a source\n      // provides. In these cases, we cannot successfully complete the upload, so we\n      // rather error out and let the user know. If not, tus-js-client will be stuck\n      // in a loop of repeating empty PATCH requests.\n      // See https://community.transloadit.com/t/how-to-abort-hanging-companion-uploads/16488/13\n      const newSize = this._offset + valueSize\n      if (!this.options.uploadLengthDeferred && done && newSize !== this._size) {\n        return Promise.reject(\n          new Error(\n            `upload was configured with a size of ${this._size} bytes, but the source is done after ${newSize} bytes`,\n          ),\n        )\n      }\n\n      if (value === null) {\n        return this._sendRequest(req)\n      }\n\n      if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {\n        req.setHeader('Upload-Complete', done ? '?1' : '?0')\n      }\n      this._emitProgress(this._offset, this._size)\n      return this._sendRequest(req, value)\n    })\n  }\n\n  /**\n   * _handleUploadResponse is used by requests that haven been sent using _addChunkToRequest\n   * and already have received a response.\n   *\n   * @api private\n   */\n  _handleUploadResponse(req, res) {\n    const offset = Number.parseInt(res.getHeader('Upload-Offset'), 10)\n    if (Number.isNaN(offset)) {\n      this._emitHttpError(req, res, 'tus: invalid or missing offset value')\n      return\n    }\n\n    this._emitProgress(offset, this._size)\n    this._emitChunkComplete(offset - this._offset, offset, this._size)\n\n    this._offset = offset\n\n    if (offset === this._size) {\n      // Yay, finally done :)\n      this._emitSuccess(res)\n      this._source.close()\n      return\n    }\n\n    this._performUpload()\n  }\n\n  /**\n   * Create a new HTTP request object with the given method and URL.\n   *\n   * @api private\n   */\n  _openRequest(method, url) {\n    const req = openRequest(method, url, this.options)\n    this._req = req\n    return req\n  }\n\n  /**\n   * Remove the entry in the URL storage, if it has been saved before.\n   *\n   * @api private\n   */\n  _removeFromUrlStorage() {\n    if (!this._urlStorageKey) return\n\n    this._urlStorage.removeUpload(this._urlStorageKey).catch((err) => {\n      this._emitError(err)\n    })\n    this._urlStorageKey = null\n  }\n\n  /**\n   * Add the upload URL to the URL storage, if possible.\n   *\n   * @api private\n   */\n  _saveUploadInUrlStorage() {\n    // We do not store the upload URL\n    // - if it was disabled in the option, or\n    // - if no fingerprint was calculated for the input (i.e. a stream), or\n    // - if the URL is already stored (i.e. key is set alread).\n    if (\n      !this.options.storeFingerprintForResuming ||\n      !this._fingerprint ||\n      this._urlStorageKey !== null\n    ) {\n      return Promise.resolve()\n    }\n\n    const storedUpload = {\n      size: this._size,\n      metadata: this.options.metadata,\n      creationTime: new Date().toString(),\n    }\n\n    if (this._parallelUploads) {\n      // Save multiple URLs if the parallelUploads option is used ...\n      storedUpload.parallelUploadUrls = this._parallelUploadUrls\n    } else {\n      // ... otherwise we just save the one available URL.\n      storedUpload.uploadUrl = this.url\n    }\n\n    return this._urlStorage.addUpload(this._fingerprint, storedUpload).then((urlStorageKey) => {\n      this._urlStorageKey = urlStorageKey\n    })\n  }\n\n  /**\n   * Send a request with the provided body.\n   *\n   * @api private\n   */\n  _sendRequest(req, body = null) {\n    return sendRequest(req, body, this.options)\n  }\n}\n\nfunction encodeMetadata(metadata) {\n  return Object.entries(metadata)\n    .map(([key, value]) => `${key} ${Base64.encode(String(value))}`)\n    .join(',')\n}\n\n/**\n * Checks whether a given status is in the range of the expected category.\n * For example, only a status between 200 and 299 will satisfy the category 200.\n *\n * @api private\n */\nfunction inStatusCategory(status, category) {\n  return status >= category && status < category + 100\n}\n\n/**\n * Create a new HTTP request with the specified method and URL.\n * The necessary headers that are included in every request\n * will be added, including the request ID.\n *\n * @api private\n */\nfunction openRequest(method, url, options) {\n  const req = options.httpStack.createRequest(method, url)\n\n  if (options.protocol === PROTOCOL_IETF_DRAFT_03) {\n    req.setHeader('Upload-Draft-Interop-Version', '5')\n  } else {\n    req.setHeader('Tus-Resumable', '1.0.0')\n  }\n  const headers = options.headers || {}\n\n  for (const [name, value] of Object.entries(headers)) {\n    req.setHeader(name, value)\n  }\n\n  if (options.addRequestId) {\n    const requestId = uuid()\n    req.setHeader('X-Request-ID', requestId)\n  }\n\n  return req\n}\n\n/**\n * Send a request with the provided body while invoking the onBeforeRequest\n * and onAfterResponse callbacks.\n *\n * @api private\n */\nasync function sendRequest(req, body, options) {\n  if (typeof options.onBeforeRequest === 'function') {\n    await options.onBeforeRequest(req)\n  }\n\n  const res = await req.send(body)\n\n  if (typeof options.onAfterResponse === 'function') {\n    await options.onAfterResponse(req, res)\n  }\n\n  return res\n}\n\n/**\n * Checks whether the browser running this code has internet access.\n * This function will always return true in the node.js environment\n *\n * @api private\n */\nfunction isOnline() {\n  let online = true\n  // Note: We don't reference `window` here because the navigator object also exists\n  // in a Web Worker's context.\n  if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n    online = false\n  }\n\n  return online\n}\n\n/**\n * Checks whether or not it is ok to retry a request.\n * @param {Error|DetailedError} err the error returned from the last request\n * @param {number} retryAttempt the number of times the request has already been retried\n * @param {object} options tus Upload options\n *\n * @api private\n */\nfunction shouldRetry(err, retryAttempt, options) {\n  // We only attempt a retry if\n  // - retryDelays option is set\n  // - we didn't exceed the maxium number of retries, yet, and\n  // - this error was caused by a request or it's response and\n  // - the error is server error (i.e. not a status 4xx except a 409 or 423) or\n  // a onShouldRetry is specified and returns true\n  // - the browser does not indicate that we are offline\n  if (\n    options.retryDelays == null ||\n    retryAttempt >= options.retryDelays.length ||\n    err.originalRequest == null\n  ) {\n    return false\n  }\n\n  if (options && typeof options.onShouldRetry === 'function') {\n    return options.onShouldRetry(err, retryAttempt, options)\n  }\n\n  return defaultOnShouldRetry(err)\n}\n\n/**\n * determines if the request should be retried. Will only retry if not a status 4xx except a 409 or 423\n * @param {DetailedError} err\n * @returns {boolean}\n */\nfunction defaultOnShouldRetry(err) {\n  const status = err.originalResponse ? err.originalResponse.getStatus() : 0\n  return (!inStatusCategory(status, 400) || status === 409 || status === 423) && isOnline()\n}\n\n/**\n * Resolve a relative link given the origin as source. For example,\n * if a HTTP request to http://example.com/files/ returns a Location\n * header with the value /upload/abc, the resolved URL will be:\n * http://example.com/upload/abc\n */\nfunction resolveUrl(origin, link) {\n  return new URL(link, origin).toString()\n}\n\n/**\n * Calculate the start and end positions for the parts if an upload\n * is split into multiple parallel requests.\n *\n * @param {number} totalSize The byte size of the upload, which will be split.\n * @param {number} partCount The number in how many parts the upload will be split.\n * @return {object[]}\n * @api private\n */\nfunction splitSizeIntoParts(totalSize, partCount) {\n  const partSize = Math.floor(totalSize / partCount)\n  const parts = []\n\n  for (let i = 0; i < partCount; i++) {\n    parts.push({\n      start: partSize * i,\n      end: partSize * (i + 1),\n    })\n  }\n\n  parts[partCount - 1].end = totalSize\n\n  return parts\n}\n\nBaseUpload.defaultOptions = defaultOptions\n\nexport default BaseUpload\n",
+    "import { Base64 } from 'js-base64'\nimport URL from 'url-parse'\nimport DetailedError from './error.js'\nimport { log } from './logger.js'\nimport uuid from './uuid.js'\n\nconst PROTOCOL_TUS_V1 = 'tus-v1'\nconst PROTOCOL_IETF_DRAFT_03 = 'ietf-draft-03'\nconst PROTOCOL_IETF_DRAFT_05 = 'ietf-draft-05'\n\nconst defaultOptions = {\n  endpoint: null,\n\n  uploadUrl: null,\n  metadata: {},\n  metadataForPartialUploads: {},\n  fingerprint: null,\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n  onUploadUrlAvailable: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n  onBeforeRequest: null,\n  onAfterResponse: null,\n  onShouldRetry: defaultOnShouldRetry,\n\n  chunkSize: Number.POSITIVE_INFINITY,\n  retryDelays: [0, 1000, 3000, 5000],\n  parallelUploads: 1,\n  parallelUploadBoundaries: null,\n  storeFingerprintForResuming: true,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n\n  urlStorage: null,\n  fileReader: null,\n  httpStack: null,\n\n  protocol: PROTOCOL_TUS_V1,\n}\n\nclass BaseUpload {\n  constructor(file, options) {\n    // Warn about removed options from previous versions\n    if ('resume' in options) {\n      console.log(\n        'tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead.',\n      )\n    }\n\n    // The default options will already be added from the wrapper classes.\n    this.options = options\n\n    // Cast chunkSize to integer\n    this.options.chunkSize = Number(this.options.chunkSize)\n\n    // The storage module used to store URLs\n    this._urlStorage = this.options.urlStorage\n\n    // The underlying File/Blob object\n    this.file = file\n\n    // The URL against which the file will be uploaded\n    this.url = null\n\n    // The underlying request object for the current PATCH request\n    this._req = null\n\n    // The fingerpinrt for the current file (set after start())\n    this._fingerprint = null\n\n    // The key that the URL storage returned when saving an URL with a fingerprint,\n    this._urlStorageKey = null\n\n    // The offset used in the current PATCH request\n    this._offset = null\n\n    // True if the current PATCH request has been aborted\n    this._aborted = false\n\n    // The file's size in bytes\n    this._size = null\n\n    // The Source object which will wrap around the given file and provides us\n    // with a unified interface for getting its size and slice chunks from its\n    // content allowing us to easily handle Files, Blobs, Buffers and Streams.\n    this._source = null\n\n    // The current count of attempts which have been made. Zero indicates none.\n    this._retryAttempt = 0\n\n    // The timeout's ID which is used to delay the next retry\n    this._retryTimeout = null\n\n    // The offset of the remote upload before the latest attempt was started.\n    this._offsetBeforeRetry = 0\n\n    // An array of BaseUpload instances which are used for uploading the different\n    // parts, if the parallelUploads option is used.\n    this._parallelUploads = null\n\n    // An array of upload URLs which are used for uploading the different\n    // parts, if the parallelUploads option is used.\n    this._parallelUploadUrls = null    \n\n    // The remote upload resource is deferred\n    this._deferred = false\n  }\n\n  /**\n   * Use the Termination extension to delete an upload from the server by sending a DELETE\n   * request to the specified upload URL. This is only possible if the server supports the\n   * Termination extension. If the `options.retryDelays` property is set, the method will\n   * also retry if an error ocurrs.\n   *\n   * @param {String} url The upload's URL which will be terminated.\n   * @param {object} options Optional options for influencing HTTP requests.\n   * @return {Promise} The Promise will be resolved/rejected when the requests finish.\n   */\n  static terminate(url, options = {}) {\n    const req = openRequest('DELETE', url, options)\n\n    return sendRequest(req, null, options)\n      .then((res) => {\n        // A 204 response indicates a successfull request\n        if (res.getStatus() === 204) {\n          return\n        }\n\n        throw new DetailedError('tus: unexpected response while terminating upload', null, req, res)\n      })\n      .catch((err) => {\n        if (!(err instanceof DetailedError)) {\n          err = new DetailedError('tus: failed to terminate upload', err, req, null)\n        }\n\n        if (!shouldRetry(err, 0, options)) {\n          throw err\n        }\n\n        // Instead of keeping track of the retry attempts, we remove the first element from the delays\n        // array. If the array is empty, all retry attempts are used up and we will bubble up the error.\n        // We recursively call the terminate function will removing elements from the retryDelays array.\n        const delay = options.retryDelays[0]\n        const remainingDelays = options.retryDelays.slice(1)\n        const newOptions = {\n          ...options,\n          retryDelays: remainingDelays,\n        }\n        return new Promise((resolve) => setTimeout(resolve, delay)).then(() =>\n          BaseUpload.terminate(url, newOptions),\n        )\n      })\n  }\n\n  findPreviousUploads() {\n    return this.options\n      .fingerprint(this.file, this.options)\n      .then((fingerprint) => this._urlStorage.findUploadsByFingerprint(fingerprint))\n  }\n\n  resumeFromPreviousUpload(previousUpload) {\n    this.url = previousUpload.uploadUrl || null\n    this._parallelUploadUrls = previousUpload.parallelUploadUrls || null\n    this._urlStorageKey = previousUpload.urlStorageKey\n  }\n\n  start() {\n    const { file } = this\n\n    if (!file) {\n      this._emitError(new Error('tus: no file or stream to upload provided'))\n      return\n    }\n\n    if (\n      ![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03, PROTOCOL_IETF_DRAFT_05].includes(\n        this.options.protocol,\n      )\n    ) {\n      this._emitError(new Error(`tus: unsupported protocol ${this.options.protocol}`))\n      return\n    }\n\n    if (!this.options.endpoint && !this.options.uploadUrl && !this.url) {\n      this._emitError(new Error('tus: neither an endpoint or an upload URL is provided'))\n      return\n    }\n\n    const { retryDelays } = this.options\n    if (retryDelays != null && Object.prototype.toString.call(retryDelays) !== '[object Array]') {\n      this._emitError(new Error('tus: the `retryDelays` option must either be an array or null'))\n      return\n    }\n\n    if (this.options.parallelUploads > 1) {\n      // Test which options are incompatible with parallel uploads.\n      for (const optionName of ['uploadUrl', 'uploadSize', 'uploadLengthDeferred']) {\n        if (this.options[optionName]) {\n          this._emitError(\n            new Error(`tus: cannot use the ${optionName} option when parallelUploads is enabled`),\n          )\n          return\n        }\n      }\n    }\n\n    if (this.options.parallelUploadBoundaries) {\n      if (this.options.parallelUploads <= 1) {\n        this._emitError(\n          new Error(\n            'tus: cannot use the `parallelUploadBoundaries` option when `parallelUploads` is disabled',\n          ),\n        )\n        return\n      }\n      if (this.options.parallelUploads !== this.options.parallelUploadBoundaries.length) {\n        this._emitError(\n          new Error(\n            'tus: the `parallelUploadBoundaries` must have the same length as the value of `parallelUploads`',\n          ),\n        )\n        return\n      }\n    }\n\n    this.options\n      .fingerprint(file, this.options)\n      .then((fingerprint) => {\n        if (fingerprint == null) {\n          log(\n            'No fingerprint was calculated meaning that the upload cannot be stored in the URL storage.',\n          )\n        } else {\n          log(`Calculated fingerprint: ${fingerprint}`)\n        }\n\n        this._fingerprint = fingerprint\n\n        if (this._source) {\n          return this._source\n        }\n        return this.options.fileReader.openFile(file, this.options.chunkSize)\n      })\n      .then((source) => {\n        this._source = source\n\n        // First, we look at the uploadLengthDeferred option.\n        // Next, we check if the caller has supplied a manual upload size.\n        // Finally, we try to use the calculated size from the source object.\n        if (this.options.uploadLengthDeferred) {\n          this._size = null\n        } else if (this.options.uploadSize != null) {\n          this._size = Number(this.options.uploadSize)\n          if (Number.isNaN(this._size)) {\n            this._emitError(new Error('tus: cannot convert `uploadSize` option into a number'))\n            return\n          }\n        } else {\n          this._size = this._source.size\n          if (this._size == null) {\n            this._emitError(\n              new Error(\n                \"tus: cannot automatically derive upload's size from input. Specify it manually using the `uploadSize` option or use the `uploadLengthDeferred` option\",\n              ),\n            )\n            return\n          }\n        }\n\n        // If the upload was configured to use multiple requests or if we resume from\n        // an upload which used multiple requests, we start a parallel upload.\n        if (this.options.parallelUploads > 1 || this._parallelUploadUrls != null) {\n          this._startParallelUpload()\n        } else {\n          this._startSingleUpload()\n        }\n      })\n      .catch((err) => {\n        this._emitError(err)\n      })\n  }\n\n  /**\n   * Initiate the uploading procedure for a parallelized upload, where one file is split into\n   * multiple request which are run in parallel.\n   *\n   * @api private\n   */\n  _startParallelUpload() {\n    const totalSize = this._size\n    let totalProgress = 0\n    this._parallelUploads = []\n\n    const partCount =\n      this._parallelUploadUrls != null\n        ? this._parallelUploadUrls.length\n        : this.options.parallelUploads\n\n    // The input file will be split into multiple slices which are uploaded in separate\n    // requests. Here we get the start and end position for the slices.\n    const parts =\n      this.options.parallelUploadBoundaries ?? splitSizeIntoParts(this._source.size, partCount)\n\n    // Attach URLs from previous uploads, if available.\n    if (this._parallelUploadUrls) {\n      parts.forEach((part, index) => {\n        part.uploadUrl = this._parallelUploadUrls[index] || null\n      })\n    }\n\n    // Create an empty list for storing the upload URLs\n    this._parallelUploadUrls = new Array(parts.length)\n\n    // Generate a promise for each slice that will be resolve if the respective\n    // upload is completed.\n    const uploads = parts.map((part, index) => {\n      let lastPartProgress = 0\n\n      return this._source.slice(part.start, part.end).then(\n        ({ value }) =>\n          new Promise((resolve, reject) => {\n            // Merge with the user supplied options but overwrite some values.\n            const options = {\n              ...this.options,\n              // If available, the partial upload should be resumed from a previous URL.\n              uploadUrl: part.uploadUrl || null,\n              // We take manually care of resuming for partial uploads, so they should\n              // not be stored in the URL storage.\n              storeFingerprintForResuming: false,\n              removeFingerprintOnSuccess: false,\n              // Reset the parallelUploads option to not cause recursion.\n              parallelUploads: 1,\n              // Reset this option as we are not doing a parallel upload.\n              parallelUploadBoundaries: null,\n              metadata: this.options.metadataForPartialUploads,\n              // Add the header to indicate the this is a partial upload.\n              headers: {\n                ...this.options.headers,\n                'Upload-Concat': 'partial',\n              },\n              // Reject or resolve the promise if the upload errors or completes.\n              onSuccess: resolve,\n              onError: reject,\n              // Based in the progress for this partial upload, calculate the progress\n              // for the entire final upload.\n              onProgress: (newPartProgress) => {\n                totalProgress = totalProgress - lastPartProgress + newPartProgress\n                lastPartProgress = newPartProgress\n                this._emitProgress(totalProgress, totalSize)\n              },\n              // Wait until every partial upload has an upload URL, so we can add\n              // them to the URL storage.\n              onUploadUrlAvailable: () => {\n                this._parallelUploadUrls[index] = upload.url\n                // Test if all uploads have received an URL\n                if (this._parallelUploadUrls.filter((u) => Boolean(u)).length === parts.length) {\n                  this._saveUploadInUrlStorage()\n                }\n              },\n            }\n\n            const upload = new BaseUpload(value, options)\n            upload.start()\n\n            // Store the upload in an array, so we can later abort them if necessary.\n            this._parallelUploads.push(upload)\n          }),\n      )\n    })\n\n    let req\n    // Wait until all partial uploads are finished and we can send the POST request for\n    // creating the final upload.\n    Promise.all(uploads)\n      .then(() => {\n        req = this._openRequest('POST', this.options.endpoint)\n        req.setHeader('Upload-Concat', `final;${this._parallelUploadUrls.join(' ')}`)\n\n        // Add metadata if values have been added\n        const metadata = encodeMetadata(this.options.metadata)\n        if (metadata !== '') {\n          req.setHeader('Upload-Metadata', metadata)\n        }\n\n        return this._sendRequest(req, null)\n      })\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while creating upload')\n          return\n        }\n\n        const location = res.getHeader('Location')\n        if (location == null) {\n          this._emitHttpError(req, res, 'tus: invalid or missing Location header')\n          return\n        }\n\n        this.url = resolveUrl(this.options.endpoint, location)\n        log(`Created upload at ${this.url}`)\n\n        this._emitSuccess(res)\n      })\n      .catch((err) => {\n        this._emitError(err)\n      })\n  }\n\n  /**\n   * Initiate the uploading procedure for a non-parallel upload. Here the entire file is\n   * uploaded in a sequential matter.\n   *\n   * @api private\n   */\n  _startSingleUpload() {\n    // Reset the aborted flag when the upload is started or else the\n    // _performUpload will stop before sending a request if the upload has been\n    // aborted previously.\n    this._aborted = false\n\n    // The upload had been started previously and we should reuse this URL.\n    if (this.url != null) {\n      log(`Resuming upload from previous URL: ${this.url}`)\n      this._resumeUpload()\n      return\n    }\n\n    // A URL has manually been specified, so we try to resume\n    if (this.options.uploadUrl != null) {\n      log(`Resuming upload from provided URL: ${this.options.uploadUrl}`)\n      this.url = this.options.uploadUrl\n      this._resumeUpload()\n      return\n    }\n\n    // An upload has not started for the file yet, so we start a new one\n    log('Creating a new upload')\n    this._createUpload()\n  }\n\n  /**\n   * Abort any running request and stop the current upload. After abort is called, no event\n   * handler will be invoked anymore. You can use the `start` method to resume the upload\n   * again.\n   * If `shouldTerminate` is true, the `terminate` function will be called to remove the\n   * current upload from the server.\n   *\n   * @param {boolean} shouldTerminate True if the upload should be deleted from the server.\n   * @return {Promise} The Promise will be resolved/rejected when the requests finish.\n   */\n  abort(shouldTerminate) {\n    // Stop any parallel partial uploads, that have been started in _startParallelUploads.\n    if (this._parallelUploads != null) {\n      for (const upload of this._parallelUploads) {\n        upload.abort(shouldTerminate)\n      }\n    }\n\n    // Stop any current running request.\n    if (this._req !== null) {\n      this._req.abort()\n      // Note: We do not close the file source here, so the user can resume in the future.\n    }\n    this._aborted = true\n\n    // Stop any timeout used for initiating a retry.\n    if (this._retryTimeout != null) {\n      clearTimeout(this._retryTimeout)\n      this._retryTimeout = null\n    }\n\n    if (!shouldTerminate || this.url == null) {\n      return Promise.resolve()\n    }\n\n    return (\n      BaseUpload.terminate(this.url, this.options)\n        // Remove entry from the URL storage since the upload URL is no longer valid.\n        .then(() => this._removeFromUrlStorage())\n    )\n  }\n\n  _emitHttpError(req, res, message, causingErr) {\n    this._emitError(new DetailedError(message, causingErr, req, res))\n  }\n\n  _emitError(err) {\n    // Do not emit errors, e.g. from aborted HTTP requests, if the upload has been stopped.\n    if (this._aborted) return\n\n    // Check if we should retry, when enabled, before sending the error to the user.\n    if (this.options.retryDelays != null) {\n      // We will reset the attempt counter if\n      // - we were already able to connect to the server (offset != null) and\n      // - we were able to upload a small chunk of data to the server\n      const shouldResetDelays = this._offset != null && this._offset > this._offsetBeforeRetry\n      if (shouldResetDelays) {\n        this._retryAttempt = 0\n      }\n\n      if (shouldRetry(err, this._retryAttempt, this.options)) {\n        const delay = this.options.retryDelays[this._retryAttempt++]\n\n        this._offsetBeforeRetry = this._offset\n\n        this._retryTimeout = setTimeout(() => {\n          this.start()\n        }, delay)\n        return\n      }\n    }\n\n    if (typeof this.options.onError === 'function') {\n      this.options.onError(err)\n    } else {\n      throw err\n    }\n  }\n\n  /**\n   * Publishes notification if the upload has been successfully completed.\n   *\n   * @param {object} lastResponse Last HTTP response.\n   * @api private\n   */\n  _emitSuccess(lastResponse) {\n    if (this.options.removeFingerprintOnSuccess) {\n      // Remove stored fingerprint and corresponding endpoint. This causes\n      // new uploads of the same file to be treated as a different file.\n      this._removeFromUrlStorage()\n    }\n\n    if (typeof this.options.onSuccess === 'function') {\n      this.options.onSuccess({ lastResponse })\n    }\n  }\n\n  /**\n   * Publishes notification when data has been sent to the server. This\n   * data may not have been accepted by the server yet.\n   *\n   * @param {number} bytesSent  Number of bytes sent to the server.\n   * @param {number} bytesTotal Total number of bytes to be sent to the server.\n   * @api private\n   */\n  _emitProgress(bytesSent, bytesTotal) {\n    if (typeof this.options.onProgress === 'function') {\n      this.options.onProgress(bytesSent, bytesTotal)\n    }\n  }\n\n  /**\n   * Publishes notification when a chunk of data has been sent to the server\n   * and accepted by the server.\n   * @param {number} chunkSize  Size of the chunk that was accepted by the server.\n   * @param {number} bytesAccepted Total number of bytes that have been\n   *                                accepted by the server.\n   * @param {number} bytesTotal Total number of bytes to be sent to the server.\n   * @api private\n   */\n  _emitChunkComplete(chunkSize, bytesAccepted, bytesTotal) {\n    if (typeof this.options.onChunkComplete === 'function') {\n      this.options.onChunkComplete(chunkSize, bytesAccepted, bytesTotal)\n    }\n  }\n\n  /**\n   * Create a new upload using the creation extension by sending a POST\n   * request to the endpoint. After successful creation the file will be\n   * uploaded\n   *\n   * @api private\n   */\n  _createUpload() {\n    if (!this.options.endpoint) {\n      this._emitError(new Error('tus: unable to create upload because no endpoint is provided'))\n      return\n    }\n\n    const req = this._openRequest('POST', this.options.endpoint)\n\n    if (this.options.uploadLengthDeferred) {\n      req.setHeader('Upload-Defer-Length', '1')\n      this._deferred = true\n    } else {\n      req.setHeader('Upload-Length', `${this._size}`)\n    }\n\n    // Add metadata if values have been added\n    const metadata = encodeMetadata(this.options.metadata)\n    if (metadata !== '') {\n      req.setHeader('Upload-Metadata', metadata)\n    }\n\n    let promise\n    if (this.options.uploadDataDuringCreation && !this.options.uploadLengthDeferred) {\n      this._offset = 0\n      promise = this._addChunkToRequest(req)\n    } else {\n      if (\n        this.options.protocol === PROTOCOL_IETF_DRAFT_03 ||\n        this.options.protocol === PROTOCOL_IETF_DRAFT_05\n      ) {\n        req.setHeader('Upload-Complete', '?0')\n      }\n      promise = this._sendRequest(req, null)\n    }\n\n    promise\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while creating upload')\n          return\n        }\n\n        const location = res.getHeader('Location')\n        if (location == null) {\n          this._emitHttpError(req, res, 'tus: invalid or missing Location header')\n          return\n        }\n\n        this.url = resolveUrl(this.options.endpoint, location)\n        log(`Created upload at ${this.url}`)\n\n        if (typeof this.options.onUploadUrlAvailable === 'function') {\n          this.options.onUploadUrlAvailable()\n        }\n\n        if (this._size === 0) {\n          // Nothing to upload and file was successfully created\n          this._emitSuccess(res)\n          this._source.close()\n          return\n        }\n\n        this._saveUploadInUrlStorage().then(() => {\n          if (this.options.uploadDataDuringCreation) {\n            this._handleUploadResponse(req, res)\n          } else {\n            this._offset = 0\n            this._performUpload()\n          }\n        })\n      })\n      .catch((err) => {\n        this._emitHttpError(req, null, 'tus: failed to create upload', err)\n      })\n  }\n\n  /*\n   * Try to resume an existing upload. First a HEAD request will be sent\n   * to retrieve the offset. If the request fails a new upload will be\n   * created. In the case of a successful response the file will be uploaded.\n   *\n   * @api private\n   */\n  _resumeUpload() {\n    const req = this._openRequest('HEAD', this.url)\n    const promise = this._sendRequest(req, null)\n\n    promise\n      .then((res) => {\n        const status = res.getStatus()\n        if (!inStatusCategory(status, 200)) {\n          // If the upload is locked (indicated by the 423 Locked status code), we\n          // emit an error instead of directly starting a new upload. This way the\n          // retry logic can catch the error and will retry the upload. An upload\n          // is usually locked for a short period of time and will be available\n          // afterwards.\n          if (status === 423) {\n            this._emitHttpError(req, res, 'tus: upload is currently locked; retry later')\n            return\n          }\n\n          if (inStatusCategory(status, 400)) {\n            // Remove stored fingerprint and corresponding endpoint,\n            // on client errors since the file can not be found\n            this._removeFromUrlStorage()\n          }\n\n          if (!this.options.endpoint) {\n            // Don't attempt to create a new upload if no endpoint is provided.\n            this._emitHttpError(\n              req,\n              res,\n              'tus: unable to resume upload (new upload cannot be created without an endpoint)',\n            )\n            return\n          }\n\n          // Try to create a new upload\n          this.url = null\n          this._createUpload()\n          return\n        }\n\n        const offset = Number.parseInt(res.getHeader('Upload-Offset'), 10)\n        if (Number.isNaN(offset)) {\n          this._emitHttpError(req, res, 'tus: invalid or missing offset value')\n          return\n        }\n\n        const deferLength = parseInt(\n          xhr.getResponseHeader(\"Upload-Defer-Length\"),\n          10\n        );\n        this._deferred = deferLength === 1;\n\n        const length = Number.parseInt(res.getHeader('Upload-Length'), 10)\n        if (\n          Number.isNaN(length) &&\n          !this._deferred &&\n          !this.options.uploadLengthDeferred &&\n          this.options.protocol === PROTOCOL_TUS_V1\n        ) {\n          this._emitHttpError(req, res, 'tus: invalid or missing length value')\n          return\n        }\n\n        if (typeof this.options.onUploadUrlAvailable === 'function') {\n          this.options.onUploadUrlAvailable()\n        }\n\n        this._saveUploadInUrlStorage().then(() => {\n          // Upload has already been completed and we do not need to send additional\n          // data to the server\n          if (offset === length) {\n            this._emitProgress(length, length)\n            this._emitSuccess(res)\n            return\n          }\n\n          this._offset = offset\n          this._performUpload()\n        })\n      })\n      .catch((err) => {\n        this._emitHttpError(req, null, 'tus: failed to resume upload', err)\n      })\n  }\n\n  /**\n   * Start uploading the file using PATCH requests. The file will be divided\n   * into chunks as specified in the chunkSize option. During the upload\n   * the onProgress event handler may be invoked multiple times.\n   *\n   * @api private\n   */\n  _performUpload() {\n    // If the upload has been aborted, we will not send the next PATCH request.\n    // This is important if the abort method was called during a callback, such\n    // as onChunkComplete or onProgress.\n    if (this._aborted) {\n      return\n    }\n\n    let req\n\n    // Some browser and servers may not support the PATCH method. For those\n    // cases, you can tell tus-js-client to use a POST request with the\n    // X-HTTP-Method-Override header for simulating a PATCH request.\n    if (this.options.overridePatchMethod) {\n      req = this._openRequest('POST', this.url)\n      req.setHeader('X-HTTP-Method-Override', 'PATCH')\n    } else {\n      req = this._openRequest('PATCH', this.url)\n    }\n\n    req.setHeader('Upload-Offset', `${this._offset}`)\n    const promise = this._addChunkToRequest(req)\n\n    promise\n      .then((res) => {\n        if (!inStatusCategory(res.getStatus(), 200)) {\n          this._emitHttpError(req, res, 'tus: unexpected response while uploading chunk')\n          return\n        }\n\n        this._handleUploadResponse(req, res)\n      })\n      .catch((err) => {\n        // Don't emit an error if the upload was aborted manually\n        if (this._aborted) {\n          return\n        }\n\n        this._emitHttpError(req, null, `tus: failed to upload chunk at offset ${this._offset}`, err)\n      })\n  }\n\n  /**\n   * _addChunktoRequest reads a chunk from the source and sends it using the\n   * supplied request object. It will not handle the response.\n   *\n   * @api private\n   */\n  _addChunkToRequest(req) {\n    const start = this._offset\n    let end = this._offset + this.options.chunkSize\n\n    req.setProgressHandler((bytesSent) => {\n      this._emitProgress(start + bytesSent, this._size)\n    })\n\n    if (this.options.protocol === PROTOCOL_TUS_V1) {\n      req.setHeader('Content-Type', 'application/offset+octet-stream')\n    } else if (this.options.protocol === PROTOCOL_IETF_DRAFT_05) {\n      req.setHeader('Content-Type', 'application/partial-upload')\n    }\n\n    // The specified chunkSize may be Infinity or the calcluated end position\n    // may exceed the file's size. In both cases, we limit the end position to\n    // the input's total size for simpler calculations and correctness.\n    if (\n      (end === Number.POSITIVE_INFINITY || end > this._size) &&\n      !this.options.uploadLengthDeferred\n    ) {\n      end = this._size\n    }\n\n    return this._source.slice(start, end).then(({ value, done }) => {\n      const valueSize = value?.size ? value.size : 0\n\n      // If the upload length is deferred, the upload size was not specified during\n      // upload creation. So, if the file reader is done reading, we know the total\n      // upload size and can tell the tus server.\n      if (this._deferred && (!this.options.uploadLengthDeferred || done)) {\n        this._size = this._offset + valueSize;\n        req.setHeader(\"Upload-Length\", `${this._size}`);\n        this._deferred = false;\n      }\n\n      // The specified uploadSize might not match the actual amount of data that a source\n      // provides. In these cases, we cannot successfully complete the upload, so we\n      // rather error out and let the user know. If not, tus-js-client will be stuck\n      // in a loop of repeating empty PATCH requests.\n      // See https://community.transloadit.com/t/how-to-abort-hanging-companion-uploads/16488/13\n      const newSize = this._offset + valueSize\n      if (!this.options.uploadLengthDeferred && done && newSize !== this._size) {\n        return Promise.reject(\n          new Error(\n            `upload was configured with a size of ${this._size} bytes, but the source is done after ${newSize} bytes`,\n          ),\n        )\n      }\n\n      if (value === null) {\n        return this._sendRequest(req)\n      }\n\n      if (\n        this.options.protocol === PROTOCOL_IETF_DRAFT_03 ||\n        this.options.protocol === PROTOCOL_IETF_DRAFT_05\n      ) {\n        req.setHeader('Upload-Complete', done ? '?1' : '?0')\n      }\n      this._emitProgress(this._offset, this._size)\n      return this._sendRequest(req, value)\n    })\n  }\n\n  /**\n   * _handleUploadResponse is used by requests that haven been sent using _addChunkToRequest\n   * and already have received a response.\n   *\n   * @api private\n   */\n  _handleUploadResponse(req, res) {\n    const offset = Number.parseInt(res.getHeader('Upload-Offset'), 10)\n    if (Number.isNaN(offset)) {\n      this._emitHttpError(req, res, 'tus: invalid or missing offset value')\n      return\n    }\n\n    this._emitProgress(offset, this._size)\n    this._emitChunkComplete(offset - this._offset, offset, this._size)\n\n    this._offset = offset\n\n    if (offset === this._size) {\n      // Yay, finally done :)\n      this._emitSuccess(res)\n      this._source.close()\n      return\n    }\n\n    this._performUpload()\n  }\n\n  /**\n   * Create a new HTTP request object with the given method and URL.\n   *\n   * @api private\n   */\n  _openRequest(method, url) {\n    const req = openRequest(method, url, this.options)\n    this._req = req\n    return req\n  }\n\n  /**\n   * Remove the entry in the URL storage, if it has been saved before.\n   *\n   * @api private\n   */\n  _removeFromUrlStorage() {\n    if (!this._urlStorageKey) return\n\n    this._urlStorage.removeUpload(this._urlStorageKey).catch((err) => {\n      this._emitError(err)\n    })\n    this._urlStorageKey = null\n  }\n\n  /**\n   * Add the upload URL to the URL storage, if possible.\n   *\n   * @api private\n   */\n  _saveUploadInUrlStorage() {\n    // We do not store the upload URL\n    // - if it was disabled in the option, or\n    // - if no fingerprint was calculated for the input (i.e. a stream), or\n    // - if the URL is already stored (i.e. key is set alread).\n    if (\n      !this.options.storeFingerprintForResuming ||\n      !this._fingerprint ||\n      this._urlStorageKey !== null\n    ) {\n      return Promise.resolve()\n    }\n\n    const storedUpload = {\n      size: this._size,\n      metadata: this.options.metadata,\n      creationTime: new Date().toString(),\n    }\n\n    if (this._parallelUploads) {\n      // Save multiple URLs if the parallelUploads option is used ...\n      storedUpload.parallelUploadUrls = this._parallelUploadUrls\n    } else {\n      // ... otherwise we just save the one available URL.\n      storedUpload.uploadUrl = this.url\n    }\n\n    return this._urlStorage.addUpload(this._fingerprint, storedUpload).then((urlStorageKey) => {\n      this._urlStorageKey = urlStorageKey\n    })\n  }\n\n  /**\n   * Send a request with the provided body.\n   *\n   * @api private\n   */\n  _sendRequest(req, body = null) {\n    return sendRequest(req, body, this.options)\n  }\n}\n\nfunction encodeMetadata(metadata) {\n  return Object.entries(metadata)\n    .map(([key, value]) => `${key} ${Base64.encode(String(value))}`)\n    .join(',')\n}\n\n/**\n * Checks whether a given status is in the range of the expected category.\n * For example, only a status between 200 and 299 will satisfy the category 200.\n *\n * @api private\n */\nfunction inStatusCategory(status, category) {\n  return status >= category && status < category + 100\n}\n\n/**\n * Create a new HTTP request with the specified method and URL.\n * The necessary headers that are included in every request\n * will be added, including the request ID.\n *\n * @api private\n */\nfunction openRequest(method, url, options) {\n  const req = options.httpStack.createRequest(method, url)\n\n  if (options.protocol === PROTOCOL_IETF_DRAFT_03) {\n    req.setHeader('Upload-Draft-Interop-Version', '5')\n  } else if (options.protocol === PROTOCOL_IETF_DRAFT_05) {\n    req.setHeader('Upload-Draft-Interop-Version', '6')\n  } else {\n    req.setHeader('Tus-Resumable', '1.0.0')\n  }\n  const headers = options.headers || {}\n\n  for (const [name, value] of Object.entries(headers)) {\n    req.setHeader(name, value)\n  }\n\n  if (options.addRequestId) {\n    const requestId = uuid()\n    req.setHeader('X-Request-ID', requestId)\n  }\n\n  return req\n}\n\n/**\n * Send a request with the provided body while invoking the onBeforeRequest\n * and onAfterResponse callbacks.\n *\n * @api private\n */\nasync function sendRequest(req, body, options) {\n  if (typeof options.onBeforeRequest === 'function') {\n    await options.onBeforeRequest(req)\n  }\n\n  const res = await req.send(body)\n\n  if (typeof options.onAfterResponse === 'function') {\n    await options.onAfterResponse(req, res)\n  }\n\n  return res\n}\n\n/**\n * Checks whether the browser running this code has internet access.\n * This function will always return true in the node.js environment\n *\n * @api private\n */\nfunction isOnline() {\n  let online = true\n  // Note: We don't reference `window` here because the navigator object also exists\n  // in a Web Worker's context.\n  if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n    online = false\n  }\n\n  return online\n}\n\n/**\n * Checks whether or not it is ok to retry a request.\n * @param {Error|DetailedError} err the error returned from the last request\n * @param {number} retryAttempt the number of times the request has already been retried\n * @param {object} options tus Upload options\n *\n * @api private\n */\nfunction shouldRetry(err, retryAttempt, options) {\n  // We only attempt a retry if\n  // - retryDelays option is set\n  // - we didn't exceed the maxium number of retries, yet, and\n  // - this error was caused by a request or it's response and\n  // - the error is server error (i.e. not a status 4xx except a 409 or 423) or\n  // a onShouldRetry is specified and returns true\n  // - the browser does not indicate that we are offline\n  if (\n    options.retryDelays == null ||\n    retryAttempt >= options.retryDelays.length ||\n    err.originalRequest == null\n  ) {\n    return false\n  }\n\n  if (options && typeof options.onShouldRetry === 'function') {\n    return options.onShouldRetry(err, retryAttempt, options)\n  }\n\n  return defaultOnShouldRetry(err)\n}\n\n/**\n * determines if the request should be retried. Will only retry if not a status 4xx except a 409 or 423\n * @param {DetailedError} err\n * @returns {boolean}\n */\nfunction defaultOnShouldRetry(err) {\n  const status = err.originalResponse ? err.originalResponse.getStatus() : 0\n  return (!inStatusCategory(status, 400) || status === 409 || status === 423) && isOnline()\n}\n\n/**\n * Resolve a relative link given the origin as source. For example,\n * if a HTTP request to http://example.com/files/ returns a Location\n * header with the value /upload/abc, the resolved URL will be:\n * http://example.com/upload/abc\n */\nfunction resolveUrl(origin, link) {\n  return new URL(link, origin).toString()\n}\n\n/**\n * Calculate the start and end positions for the parts if an upload\n * is split into multiple parallel requests.\n *\n * @param {number} totalSize The byte size of the upload, which will be split.\n * @param {number} partCount The number in how many parts the upload will be split.\n * @return {object[]}\n * @api private\n */\nfunction splitSizeIntoParts(totalSize, partCount) {\n  const partSize = Math.floor(totalSize / partCount)\n  const parts = []\n\n  for (let i = 0; i < partCount; i++) {\n    parts.push({\n      start: partSize * i,\n      end: partSize * (i + 1),\n    })\n  }\n\n  parts[partCount - 1].end = totalSize\n\n  return parts\n}\n\nBaseUpload.defaultOptions = defaultOptions\n\nexport default BaseUpload\n",
     "/**\n * Generate a UUID v4 based on random numbers. We intentioanlly use the less\n * secure Math.random function here since the more secure crypto.getRandomNumbers\n * is not available on all platforms.\n * This is not a problem for us since we use the UUID only for generating a\n * request ID, so we can correlate server logs to client errors.\n *\n * This function is taken from following site:\n * https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n *\n * @return {string} The generate UUID\n */\nexport default function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0\n    const v = c === 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n",
     "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n",
     "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n",
diff --git a/node_modules/tus-js-client/dist/tus.min.js b/node_modules/tus-js-client/dist/tus.min.js
index ac7152b..ddac266 100644
--- a/node_modules/tus-js-client/dist/tus.min.js
+++ b/node_modules/tus-js-client/dist/tus.min.js
@@ -1,2 +1,2 @@
-!function(t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).tus=t()}(function(){return function n(o,i,u){function a(e,t){if(!i[e]){if(!o[e]){var r="function"==typeof require&&require;if(!t&&r)return r(e,!0);if(s)return s(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}r=i[e]={exports:{}},o[e][0].call(r.exports,function(t){return a(o[e][1][t]||t)},r,r.exports,n,o,i,u)}return i[e].exports}for(var s="function"==typeof require&&require,t=0;t<u.length;t++)a(u[t]);return a}({1:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var i=n(t("./isReactNative.js")),u=n(t("./uriToBlob.js")),s=n(t("./sources/FileSource.js")),l=n(t("./sources/StreamSource.js"));function n(t){return t&&t.__esModule?t:{default:t}}function P(t){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function A(){A=function(){return u};var s,u={},t=Object.prototype,l=t.hasOwnProperty,f=Object.defineProperty||function(t,e,r){t[e]=r.value},e="function"==typeof Symbol?Symbol:{},n=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag";function i(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{i({},"")}catch(s){i=function(t,e,r){return t[e]=r}}function a(t,e,r,n){var o,i,u,a,e=e&&e.prototype instanceof v?e:v,e=Object.create(e.prototype),n=new O(n||[]);return f(e,"_invoke",{value:(o=t,i=r,u=n,a=p,function(t,e){if(a===d)throw Error("Generator is already running");if(a===y){if("throw"===t)throw e;return{value:s,done:!0}}for(u.method=t,u.arg=e;;){var r=u.delegate;if(r){r=function t(e,r){var n=r.method,o=e.iterator[n];if(o===s)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=s,t(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),g;n=c(o,e.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,g;o=n.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=s),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}(r,u);if(r){if(r===g)continue;return r}}if("next"===u.method)u.sent=u._sent=u.arg;else if("throw"===u.method){if(a===p)throw a=y,u.arg;u.dispatchException(u.arg)}else"return"===u.method&&u.abrupt("return",u.arg);a=d;r=c(o,i,u);if("normal"===r.type){if(a=u.done?y:h,r.arg===g)continue;return{value:r.arg,done:u.done}}"throw"===r.type&&(a=y,u.method="throw",u.arg=r.arg)}})}),e}function c(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}u.wrap=a;var p="suspendedStart",h="suspendedYield",d="executing",y="completed",g={};function v(){}function m(){}function b(){}var e={},w=(i(e,n,function(){return this}),Object.getPrototypeOf),w=w&&w(w(x([]))),_=(w&&w!==t&&l.call(w,n)&&(e=w),b.prototype=v.prototype=Object.create(e));function S(t){["next","throw","return"].forEach(function(e){i(t,e,function(t){return this._invoke(e,t)})})}function E(u,a){var e;f(this,"_invoke",{value:function(r,n){function t(){return new a(function(t,e){!function e(t,r,n,o){var i,t=c(u[t],u,r);if("throw"!==t.type)return(r=(i=t.arg).value)&&"object"==P(r)&&l.call(r,"__await")?a.resolve(r.__await).then(function(t){e("next",t,n,o)},function(t){e("throw",t,n,o)}):a.resolve(r).then(function(t){i.value=t,n(i)},function(t){return e("throw",t,n,o)});o(t.arg)}(r,n,t,e)})}return e=e?e.then(t,t):t()}})}function U(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(U,this),this.reset(!0)}function x(e){if(e||""===e){var r,t=e[n];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return r=-1,(t=function t(){for(;++r<e.length;)if(l.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=s,t.done=!0,t}).next=t}throw new TypeError(P(e)+" is not iterable")}return f(_,"constructor",{value:m.prototype=b,configurable:!0}),f(b,"constructor",{value:m,configurable:!0}),m.displayName=i(b,o,"GeneratorFunction"),u.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},u.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,i(t,o,"GeneratorFunction")),t.prototype=Object.create(_),t},u.awrap=function(t){return{__await:t}},S(E.prototype),i(E.prototype,r,function(){return this}),u.AsyncIterator=E,u.async=function(t,e,r,n,o){void 0===o&&(o=Promise);var i=new E(a(t,e,r,n),o);return u.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},S(_),i(_,o,"Generator"),i(_,n,function(){return this}),i(_,"toString",function(){return"[object Generator]"}),u.keys=function(t){var e,r=Object(t),n=[];for(e in r)n.push(e);return n.reverse(),function t(){for(;n.length;){var e=n.pop();if(e in r)return t.value=e,t.done=!1,t}return t.done=!0,t}},u.values=x,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=s,this.done=!1,this.delegate=null,this.method="next",this.arg=s,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&l.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=s)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(t,e){return i.type="throw",i.arg=r,n.next=t,e&&(n.method="next",n.arg=s),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var u=l.call(o,"catchLoc"),a=l.call(o,"finallyLoc");if(u&&a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!a)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}var i=(o=o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc?null:o)?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r,n,o=this.tryEntries[e];if(o.tryLoc===t)return"throw"===(r=o.completion).type&&(n=r.arg,j(o)),n}throw Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:x(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=s),g}},u}function f(t,e,r,n,o,i,u){try{var a=t[i](u),s=a.value}catch(t){return void r(t)}a.done?e(s):Promise.resolve(s).then(n,o)}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=P(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=P(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==P(t)?t:t+""}(n.key),n)}}r.default=function(){function t(){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function")}return e=t,(r=[{key:"openFile",value:(a=A().mark(function t(e,r){var n;return A().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if((0,i.default)()&&e&&void 0!==e.uri)return t.prev=1,t.next=4,(0,u.default)(e.uri);t.next=11;break;case 4:return n=t.sent,t.abrupt("return",new s.default(n));case 8:throw t.prev=8,t.t0=t.catch(1),new Error("tus: cannot fetch `file.uri` as Blob, make sure the uri is correct and accessible. ".concat(t.t0));case 11:if("function"==typeof e.slice&&void 0!==e.size)return t.abrupt("return",Promise.resolve(new s.default(e)));t.next=13;break;case 13:if("function"!=typeof e.read){t.next=18;break}if(r=Number(r),Number.isFinite(r)){t.next=17;break}return t.abrupt("return",Promise.reject(new Error("cannot create source for stream without a finite value for the `chunkSize` option")));case 17:return t.abrupt("return",Promise.resolve(new l.default(e,r)));case 18:return t.abrupt("return",Promise.reject(new Error("source object may only be an instance of File, Blob, or Reader in this environment")));case 19:case"end":return t.stop()}},t,null,[[1,8]])}),o=function(){var t=this,u=arguments;return new Promise(function(e,r){var n=a.apply(t,u);function o(t){f(n,e,r,o,i,"next",t)}function i(t){f(n,e,r,o,i,"throw",t)}o(void 0)})},function(t,e){return o.apply(this,arguments)})}])&&c(e.prototype,r),n&&c(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r,n,a,o}()},{"./isReactNative.js":5,"./sources/FileSource.js":6,"./sources/StreamSource.js":7,"./uriToBlob.js":10}],2:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(t,e){if((0,n.default)())return Promise.resolve(function(t,e){var r=t.exif?function(t){var e=0;if(0!==t.length)for(var r=0;r<t.length;r++){var n=t.charCodeAt(r);e=(e<<5)-e+n,e&=e}return e}(JSON.stringify(t.exif)):"noexif";return["tus-rn",t.name||"noname",t.size||"nosize",r,e.endpoint].join("/")}(t,e));return Promise.resolve(["tus-br",t.name,t.type,t.size,t.lastModified,e.endpoint].join("-"))};var n=(r=t("./isReactNative.js"))&&r.__esModule?r:{default:r}},{"./isReactNative.js":5}],3:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}function u(t,e,r){return e&&i(t.prototype,e),r&&i(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){return u(function t(){n(this,t)},[{key:"createRequest",value:function(t,e){return new a(t,e)}},{key:"getName",value:function(){return"XHRHttpStack"}}])}();var a=function(){return u(function t(e,r){n(this,t),this._xhr=new XMLHttpRequest,this._xhr.open(e,r,!0),this._method=e,this._url=r,this._headers={}},[{key:"getMethod",value:function(){return this._method}},{key:"getURL",value:function(){return this._url}},{key:"setHeader",value:function(t,e){this._xhr.setRequestHeader(t,e),this._headers[t]=e}},{key:"getHeader",value:function(t){return this._headers[t]}},{key:"setProgressHandler",value:function(e){"upload"in this._xhr&&(this._xhr.upload.onprogress=function(t){t.lengthComputable&&e(t.loaded)})}},{key:"send",value:function(){var r=this,n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return new Promise(function(t,e){r._xhr.onload=function(){t(new s(r._xhr))},r._xhr.onerror=function(t){e(t)},r._xhr.send(n)})}},{key:"abort",value:function(){return this._xhr.abort(),Promise.resolve()}},{key:"getUnderlyingObject",value:function(){return this._xhr}}])}(),s=function(){return u(function t(e){n(this,t),this._xhr=e},[{key:"getStatus",value:function(){return this._xhr.status}},{key:"getHeader",value:function(t){return this._xhr.getResponseHeader(t)}},{key:"getBody",value:function(){return this._xhr.responseText}},{key:"getUnderlyingObject",value:function(){return this._xhr}}])}()},{}],4:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"DefaultHttpStack",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(r,"DetailedError",{enumerable:!0,get:function(){return n.default}}),r.Upload=void 0,Object.defineProperty(r,"canStoreURLs",{enumerable:!0,get:function(){return f.canStoreURLs}}),r.defaultOptions=void 0,Object.defineProperty(r,"enableDebugLog",{enumerable:!0,get:function(){return o.enableDebugLog}}),r.isSupported=void 0;var n=c(t("../error.js")),o=t("../logger.js"),i=c(t("../noopUrlStorage.js")),u=c(t("../upload.js")),a=c(t("./fileReader.js")),s=c(t("./fileSignature.js")),l=c(t("./httpStack.js")),f=t("./urlStorage.js");function c(t){return t&&t.__esModule?t:{default:t}}function p(t){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function h(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,w(n.key),n)}}function d(t,e,r){e=g(e);var n=t,e=y()?Reflect.construct(e,r||[],g(t).constructor):e.apply(t,r);if(e&&("object"===p(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");t=n;if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}function y(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(y=function(){return!!t})()}function g(t){return(g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function v(t,e){return(v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function m(e,t){var r,n=Object.keys(e);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(e),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)),n}function b(n){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?m(Object(o),!0).forEach(function(t){var e,r;e=n,r=o[t=t],(t=w(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):m(Object(o)).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(o,t))})}return n}function w(t){t=function(t,e){if("object"!=p(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=p(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==p(t)?t:t+""}var _=r.defaultOptions=b(b({},u.default.defaultOptions),{},{httpStack:new l.default,fileReader:new a.default,urlStorage:new(f.canStoreURLs?f.WebStorageUrlStorage:i.default),fingerprint:s.default});r.Upload=function(t){function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=this,n=o;if(r instanceof n)return d(this,o,[t,b(b({},_),e)]);throw new TypeError("Cannot call a class as a function")}var e,r=o;if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");return r.prototype=Object.create(t&&t.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),Object.defineProperty(r,"prototype",{writable:!1}),t&&v(r,t),r=o,t=[{key:"terminate",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},e=b(b({},_),e);return u.default.terminate(t,e)}}],(e=null)&&h(r.prototype,e),t&&h(r,t),Object.defineProperty(r,"prototype",{writable:!1}),r}(u.default),r.isSupported="function"==typeof XMLHttpRequest&&"function"==typeof Blob&&"function"==typeof Blob.prototype.slice},{"../error.js":12,"../logger.js":13,"../noopUrlStorage.js":14,"../upload.js":15,"./fileReader.js":1,"./fileSignature.js":2,"./httpStack.js":3,"./urlStorage.js":11}],5:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase()}},{}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(t("./isCordova.js")),i=n(t("./readAsByteArray.js"));function n(t){return t&&t.__esModule?t:{default:t}}function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=u(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=u(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==u(t)?t:t+""}(n.key),n)}}r.default=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this._file=t,this.size=t.size}return t=e,(r=[{key:"slice",value:function(t,e){return(0,o.default)()?(0,i.default)(this._file.slice(t,e)):(t=this._file.slice(t,e),e=e>=this.size,Promise.resolve({value:t,done:e}))}},{key:"close",value:function(){}}])&&a(t.prototype,r),n&&a(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,r,n}()},{"./isCordova.js":8,"./readAsByteArray.js":9}],7:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}function u(t){return void 0===t?0:void 0!==t.size?t.size:t.length}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this._buffer=void 0,this._bufferOffset=0,this._reader=t,this._done=!1}return t=e,(r=[{key:"slice",value:function(t,e){return t<this._bufferOffset?Promise.reject(new Error("Requested data is before the reader's current offset")):this._readUntilEnoughDataOrDone(t,e)}},{key:"_readUntilEnoughDataOrDone",value:function(r,n){var t,o=this,e=n<=this._bufferOffset+u(this._buffer);return this._done||e?(t=null==(e=this._getDataFromBuffer(r,n))&&this._done,Promise.resolve({value:e,done:t})):this._reader.read().then(function(t){var e=t.value;return t.done?o._done=!0:void 0===o._buffer?o._buffer=e:o._buffer=function(t,e){if(t.concat)return t.concat(e);if(t instanceof Blob)return new Blob([t,e],{type:t.type});var r;if(t.set)return(r=new t.constructor(t.length+e.length)).set(t),r.set(e,t.length),r;throw new Error("Unknown data type")}(o._buffer,e),o._readUntilEnoughDataOrDone(r,n)})}},{key:"_getDataFromBuffer",value:function(t,e){t>this._bufferOffset&&(this._buffer=this._buffer.slice(t-this._bufferOffset),this._bufferOffset=t);var r=0===u(this._buffer);return this._done&&r?null:this._buffer.slice(0,e-t)}},{key:"close",value:function(){this._reader.cancel&&this._reader.cancel()}}])&&i(t.prototype,r),n&&i(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,r,n}()},{}],8:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){return"undefined"!=typeof window&&(void 0!==window.PhoneGap||void 0!==window.Cordova||void 0!==window.cordova)}},{}],9:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(t){return new Promise(function(e,r){var n=new FileReader;n.onload=function(){var t=new Uint8Array(n.result);e({value:t})},n.onerror=function(t){r(t)},n.readAsArrayBuffer(t)})}},{}],10:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(t){return new Promise(function(e,r){var n=new XMLHttpRequest;n.responseType="blob",n.onload=function(){var t=n.response;e(t)},n.onerror=function(t){r(t)},n.open("GET",t),n.send()})}},{}],11:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}Object.defineProperty(r,"__esModule",{value:!0}),r.canStoreURLs=r.WebStorageUrlStorage=void 0;var n=!1;try{var n="localStorage"in window,u="tusSupport",a=localStorage.getItem(u);localStorage.setItem(u,a),null===a&&localStorage.removeItem(u)}catch(t){if(t.code!==t.SECURITY_ERR&&t.code!==t.QUOTA_EXCEEDED_ERR)throw t;n=!1}r.canStoreURLs=n,r.WebStorageUrlStorage=function(){function t(){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function")}return e=t,(r=[{key:"findAllUploads",value:function(){var t=this._findEntries("tus::");return Promise.resolve(t)}},{key:"findUploadsByFingerprint",value:function(t){t=this._findEntries("tus::".concat(t,"::"));return Promise.resolve(t)}},{key:"removeUpload",value:function(t){return localStorage.removeItem(t),Promise.resolve()}},{key:"addUpload",value:function(t,e){var r=Math.round(1e12*Math.random()),t="tus::".concat(t,"::").concat(r);return localStorage.setItem(t,JSON.stringify(e)),Promise.resolve(t)}},{key:"_findEntries",value:function(t){for(var e=[],r=0;r<localStorage.length;r++){var n=localStorage.key(r);if(0===n.indexOf(t))try{var o=JSON.parse(localStorage.getItem(n));o.urlStorageKey=n,e.push(o)}catch(t){}}return e}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r,n}()},{}],12:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}function s(t,e,r){e=a(e);var n=t,e=u()?Reflect.construct(e,r||[],a(t).constructor):e.apply(t,r);if(e&&("object"===o(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");t=n;if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}function n(t){var r="function"==typeof Map?new Map:void 0;return function(t){if(null===t||!function(e){try{return-1!==Function.toString.call(e).indexOf("[native code]")}catch(t){return"function"==typeof e}}(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return function(t,e,r){var n;return u()?Reflect.construct.apply(null,arguments):((n=[null]).push.apply(n,e),e=new(t.bind.apply(t,n)),r&&l(e,r.prototype),e)}(t,arguments,a(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),l(e,t)}(t)}function u(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(u=function(){return!!t})()}function l(t,e){return(l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var f=function(t){function a(t){var e,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,i=this,u=a;if(i instanceof u)return(i=s(this,a,[t])).originalRequest=n,i.originalResponse=o,null!=(i.causingError=r)&&(t+=", caused by ".concat(r.toString())),null!=n&&(u=n.getHeader("X-Request-ID")||"n/a",r=n.getMethod(),n=n.getURL(),e=o?o.getStatus():"n/a",o=o?o.getBody()||"":"n/a",t+=", originated from request (method: ".concat(r,", url: ").concat(n,", response code: ").concat(e,", response text: ").concat(o,", request id: ").concat(u,")")),i.message=t,i;throw new TypeError("Cannot call a class as a function")}var e,r,n=a;if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),t&&l(n,t),n=a,e&&i(n.prototype,e),r&&i(n,r),Object.defineProperty(n,"prototype",{writable:!1}),n}(n(Error));r.default=f},{}],13:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.enableDebugLog=function(){n=!0};var n=!(r.log=function(t){n&&console.log(t)})},{}],14:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){function t(){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function")}return e=t,(r=[{key:"listAllUploads",value:function(){return Promise.resolve([])}},{key:"findUploadsByFingerprint",value:function(t){return Promise.resolve([])}},{key:"removeUpload",value:function(t){return Promise.resolve()}},{key:"addUpload",value:function(t,e){return Promise.resolve(null)}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r,n}()},{}],15:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=t("js-base64"),o=i(t("url-parse")),a=i(t("./error.js")),u=t("./logger.js"),s=i(t("./uuid.js"));function i(t){return t&&t.__esModule?t:{default:t}}function P(){P=function(){return u};var s,u={},t=Object.prototype,l=t.hasOwnProperty,f=Object.defineProperty||function(t,e,r){t[e]=r.value},e="function"==typeof Symbol?Symbol:{},n=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag";function i(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{i({},"")}catch(s){i=function(t,e,r){return t[e]=r}}function a(t,e,r,n){var o,i,u,a,e=e&&e.prototype instanceof v?e:v,e=Object.create(e.prototype),n=new O(n||[]);return f(e,"_invoke",{value:(o=t,i=r,u=n,a=p,function(t,e){if(a===d)throw Error("Generator is already running");if(a===y){if("throw"===t)throw e;return{value:s,done:!0}}for(u.method=t,u.arg=e;;){var r=u.delegate;if(r){r=function t(e,r){var n=r.method,o=e.iterator[n];if(o===s)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=s,t(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),g;n=c(o,e.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,g;o=n.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=s),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}(r,u);if(r){if(r===g)continue;return r}}if("next"===u.method)u.sent=u._sent=u.arg;else if("throw"===u.method){if(a===p)throw a=y,u.arg;u.dispatchException(u.arg)}else"return"===u.method&&u.abrupt("return",u.arg);a=d;r=c(o,i,u);if("normal"===r.type){if(a=u.done?y:h,r.arg===g)continue;return{value:r.arg,done:u.done}}"throw"===r.type&&(a=y,u.method="throw",u.arg=r.arg)}})}),e}function c(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}u.wrap=a;var p="suspendedStart",h="suspendedYield",d="executing",y="completed",g={};function v(){}function m(){}function b(){}var e={},w=(i(e,n,function(){return this}),Object.getPrototypeOf),w=w&&w(w(x([]))),_=(w&&w!==t&&l.call(w,n)&&(e=w),b.prototype=v.prototype=Object.create(e));function S(t){["next","throw","return"].forEach(function(e){i(t,e,function(t){return this._invoke(e,t)})})}function E(u,a){var e;f(this,"_invoke",{value:function(r,n){function t(){return new a(function(t,e){!function e(t,r,n,o){var i,t=c(u[t],u,r);if("throw"!==t.type)return(r=(i=t.arg).value)&&"object"==A(r)&&l.call(r,"__await")?a.resolve(r.__await).then(function(t){e("next",t,n,o)},function(t){e("throw",t,n,o)}):a.resolve(r).then(function(t){i.value=t,n(i)},function(t){return e("throw",t,n,o)});o(t.arg)}(r,n,t,e)})}return e=e?e.then(t,t):t()}})}function U(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(U,this),this.reset(!0)}function x(e){if(e||""===e){var r,t=e[n];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return r=-1,(t=function t(){for(;++r<e.length;)if(l.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=s,t.done=!0,t}).next=t}throw new TypeError(A(e)+" is not iterable")}return f(_,"constructor",{value:m.prototype=b,configurable:!0}),f(b,"constructor",{value:m,configurable:!0}),m.displayName=i(b,o,"GeneratorFunction"),u.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},u.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,i(t,o,"GeneratorFunction")),t.prototype=Object.create(_),t},u.awrap=function(t){return{__await:t}},S(E.prototype),i(E.prototype,r,function(){return this}),u.AsyncIterator=E,u.async=function(t,e,r,n,o){void 0===o&&(o=Promise);var i=new E(a(t,e,r,n),o);return u.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},S(_),i(_,o,"Generator"),i(_,n,function(){return this}),i(_,"toString",function(){return"[object Generator]"}),u.keys=function(t){var e,r=Object(t),n=[];for(e in r)n.push(e);return n.reverse(),function t(){for(;n.length;){var e=n.pop();if(e in r)return t.value=e,t.done=!1,t}return t.done=!0,t}},u.values=x,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=s,this.done=!1,this.delegate=null,this.method="next",this.arg=s,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&l.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=s)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(t,e){return i.type="throw",i.arg=r,n.next=t,e&&(n.method="next",n.arg=s),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var u=l.call(o,"catchLoc"),a=l.call(o,"finallyLoc");if(u&&a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!a)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}var i=(o=o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc?null:o)?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r,n,o=this.tryEntries[e];if(o.tryLoc===t)return"throw"===(r=o.completion).type&&(n=r.arg,j(o)),n}throw Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:x(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=s),g}},u}function l(t,e,r,n,o,i,u){try{var a=t[i](u),s=a.value}catch(t){return void r(t)}a.done?e(s):Promise.resolve(s).then(n,o)}function f(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,u,a=[],s=!0,l=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(a.push(n.value),a.length!==e);s=!0);}catch(t){l=!0,o=t}finally{try{if(!s&&null!=r.return&&(u=r.return(),Object(u)!==u))return}finally{if(l)throw o}}return a}}(t,e)||p(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(t){return(A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t,e){var r;if(t)return"string"==typeof t?c(t,e):"Map"===(r="Object"===(r=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:r)||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(t,e):void 0}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function h(e,t){var r,n=Object.keys(e);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(e),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)),n}function d(n){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?h(Object(o),!0).forEach(function(t){var e,r;e=n,r=o[t=t],(t=g(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):h(Object(o)).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(o,t))})}return n}function y(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,g(n.key),n)}}function g(t){t=function(t,e){if("object"!=A(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=A(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==A(t)?t:t+""}var v="tus-v1",m="ietf-draft-03",t={endpoint:null,uploadUrl:null,metadata:{},metadataForPartialUploads:{},fingerprint:null,uploadSize:null,onProgress:null,onChunkComplete:null,onSuccess:null,onError:null,onUploadUrlAvailable:null,overridePatchMethod:!1,headers:{},addRequestId:!1,onBeforeRequest:null,onAfterResponse:null,onShouldRetry:O,chunkSize:Number.POSITIVE_INFINITY,retryDelays:[0,1e3,3e3,5e3],parallelUploads:1,parallelUploadBoundaries:null,storeFingerprintForResuming:!0,removeFingerprintOnSuccess:!1,uploadLengthDeferred:!1,uploadDataDuringCreation:!1,urlStorage:null,fileReader:null,httpStack:null,protocol:v},b=function(){function c(t,e){if(!(this instanceof c))throw new TypeError("Cannot call a class as a function");"resume"in e&&console.log("tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead."),this.options=e,this.options.chunkSize=Number(this.options.chunkSize),this._urlStorage=this.options.urlStorage,this.file=t,this.url=null,this._req=null,this._fingerprint=null,this._urlStorageKey=null,this._offset=null,this._aborted=!1,this._size=null,this._source=null,this._retryAttempt=0,this._retryTimeout=null,this._offsetBeforeRetry=0,this._parallelUploads=null,this._parallelUploadUrls=null}return t=c,r=[{key:"terminate",value:function(o){var i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},u=S("DELETE",o,i);return E(u,null,i).then(function(t){if(204!==t.getStatus())throw new a.default("tus: unexpected response while terminating upload",null,u,t)}).catch(function(t){var e,r,n;if(j(t=t instanceof a.default?t:new a.default("tus: failed to terminate upload",t,u,null),0,i))return e=i.retryDelays[0],r=i.retryDelays.slice(1),n=d(d({},i),{},{retryDelays:r}),new Promise(function(t){return setTimeout(t,e)}).then(function(){return c.terminate(o,n)});throw t})}}],(e=[{key:"findPreviousUploads",value:function(){var e=this;return this.options.fingerprint(this.file,this.options).then(function(t){return e._urlStorage.findUploadsByFingerprint(t)})}},{key:"resumeFromPreviousUpload",value:function(t){this.url=t.uploadUrl||null,this._parallelUploadUrls=t.parallelUploadUrls||null,this._urlStorageKey=t.urlStorageKey}},{key:"start",value:function(){var e=this,r=this.file;if(r)if([v,m].includes(this.options.protocol))if(this.options.endpoint||this.options.uploadUrl||this.url){var t=this.options.retryDelays;if(null!=t&&"[object Array]"!==Object.prototype.toString.call(t))this._emitError(new Error("tus: the `retryDelays` option must either be an array or null"));else{if(1<this.options.parallelUploads)for(var n=0,o=["uploadUrl","uploadSize","uploadLengthDeferred"];n<o.length;n++){var i=o[n];if(this.options[i])return void this._emitError(new Error("tus: cannot use the ".concat(i," option when parallelUploads is enabled")))}if(this.options.parallelUploadBoundaries){if(this.options.parallelUploads<=1)return void this._emitError(new Error("tus: cannot use the `parallelUploadBoundaries` option when `parallelUploads` is disabled"));if(this.options.parallelUploads!==this.options.parallelUploadBoundaries.length)return void this._emitError(new Error("tus: the `parallelUploadBoundaries` must have the same length as the value of `parallelUploads`"))}this.options.fingerprint(r,this.options).then(function(t){return null==t?(0,u.log)("No fingerprint was calculated meaning that the upload cannot be stored in the URL storage."):(0,u.log)("Calculated fingerprint: ".concat(t)),e._fingerprint=t,e._source||e.options.fileReader.openFile(r,e.options.chunkSize)}).then(function(t){if(e._source=t,e.options.uploadLengthDeferred)e._size=null;else if(null!=e.options.uploadSize){if(e._size=Number(e.options.uploadSize),Number.isNaN(e._size))return void e._emitError(new Error("tus: cannot convert `uploadSize` option into a number"))}else if(e._size=e._source.size,null==e._size)return void e._emitError(new Error("tus: cannot automatically derive upload's size from input. Specify it manually using the `uploadSize` option or use the `uploadLengthDeferred` option"));1<e.options.parallelUploads||null!=e._parallelUploadUrls?e._startParallelUpload():e._startSingleUpload()}).catch(function(t){e._emitError(t)})}}else this._emitError(new Error("tus: neither an endpoint or an upload URL is provided"));else this._emitError(new Error("tus: unsupported protocol ".concat(this.options.protocol)));else this._emitError(new Error("tus: no file or stream to upload provided"))}},{key:"_startParallelUpload",value:function(){var r,a=this,s=this._size,l=0,t=(this._parallelUploads=[],null!=this._parallelUploadUrls?this._parallelUploadUrls.length:this.options.parallelUploads),f=null!=(e=this.options.parallelUploadBoundaries)?e:function(t,e){for(var r=Math.floor(t/e),n=[],o=0;o<e;o++)n.push({start:r*o,end:r*(o+1)});return n[e-1].end=t,n}(this._source.size,t),e=(this._parallelUploadUrls&&f.forEach(function(t,e){t.uploadUrl=a._parallelUploadUrls[e]||null}),this._parallelUploadUrls=new Array(f.length),f.map(function(o,i){var u=0;return a._source.slice(o.start,o.end).then(function(t){var n=t.value;return new Promise(function(t,e){var t=d(d({},a.options),{},{uploadUrl:o.uploadUrl||null,storeFingerprintForResuming:!1,removeFingerprintOnSuccess:!1,parallelUploads:1,parallelUploadBoundaries:null,metadata:a.options.metadataForPartialUploads,headers:d(d({},a.options.headers),{},{"Upload-Concat":"partial"}),onSuccess:t,onError:e,onProgress:function(t){l=l-u+t,u=t,a._emitProgress(l,s)},onUploadUrlAvailable:function(){a._parallelUploadUrls[i]=r.url,a._parallelUploadUrls.filter(function(t){return Boolean(t)}).length===f.length&&a._saveUploadInUrlStorage()}}),r=new c(n,t);r.start(),a._parallelUploads.push(r)})})}));Promise.all(e).then(function(){(r=a._openRequest("POST",a.options.endpoint)).setHeader("Upload-Concat","final;".concat(a._parallelUploadUrls.join(" ")));var t=w(a.options.metadata);return""!==t&&r.setHeader("Upload-Metadata",t),a._sendRequest(r,null)}).then(function(t){var e;_(t.getStatus(),200)?null==(e=t.getHeader("Location"))?a._emitHttpError(r,t,"tus: invalid or missing Location header"):(a.url=x(a.options.endpoint,e),(0,u.log)("Created upload at ".concat(a.url)),a._emitSuccess(t)):a._emitHttpError(r,t,"tus: unexpected response while creating upload")}).catch(function(t){a._emitError(t)})}},{key:"_startSingleUpload",value:function(){this._aborted=!1,null!=this.url?((0,u.log)("Resuming upload from previous URL: ".concat(this.url)),this._resumeUpload()):null!=this.options.uploadUrl?((0,u.log)("Resuming upload from provided URL: ".concat(this.options.uploadUrl)),this.url=this.options.uploadUrl,this._resumeUpload()):((0,u.log)("Creating a new upload"),this._createUpload())}},{key:"abort",value:function(t){var e=this;if(null!=this._parallelUploads){var r,n=function(t,e){var r,n,o,i,u="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(u)return n=!(r=!0),{s:function(){u=u.call(t)},n:function(){var t=u.next();return r=t.done,t},e:function(t){n=!0,o=t},f:function(){try{r||null==u.return||u.return()}finally{if(n)throw o}}};if(Array.isArray(t)||(u=p(t))||e&&t&&"number"==typeof t.length)return u&&(t=u),i=0,{s:e=function(){},n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:e};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(this._parallelUploads);try{for(n.s();!(r=n.n()).done;)r.value.abort(t)}catch(t){n.e(t)}finally{n.f()}}return null!==this._req&&this._req.abort(),this._aborted=!0,null!=this._retryTimeout&&(clearTimeout(this._retryTimeout),this._retryTimeout=null),t&&null!=this.url?c.terminate(this.url,this.options).then(function(){return e._removeFromUrlStorage()}):Promise.resolve()}},{key:"_emitHttpError",value:function(t,e,r,n){this._emitError(new a.default(r,n,t,e))}},{key:"_emitError",value:function(t){var e,r=this;if(!this._aborted){if(null!=this.options.retryDelays)if(null!=this._offset&&this._offset>this._offsetBeforeRetry&&(this._retryAttempt=0),j(t,this._retryAttempt,this.options))return e=this.options.retryDelays[this._retryAttempt++],this._offsetBeforeRetry=this._offset,void(this._retryTimeout=setTimeout(function(){r.start()},e));if("function"!=typeof this.options.onError)throw t;this.options.onError(t)}}},{key:"_emitSuccess",value:function(t){this.options.removeFingerprintOnSuccess&&this._removeFromUrlStorage(),"function"==typeof this.options.onSuccess&&this.options.onSuccess({lastResponse:t})}},{key:"_emitProgress",value:function(t,e){"function"==typeof this.options.onProgress&&this.options.onProgress(t,e)}},{key:"_emitChunkComplete",value:function(t,e,r){"function"==typeof this.options.onChunkComplete&&this.options.onChunkComplete(t,e,r)}},{key:"_createUpload",value:function(){var r,t,n=this;this.options.endpoint?(r=this._openRequest("POST",this.options.endpoint),this.options.uploadLengthDeferred?r.setHeader("Upload-Defer-Length","1"):r.setHeader("Upload-Length","".concat(this._size)),""!==(t=w(this.options.metadata))&&r.setHeader("Upload-Metadata",t),(this.options.uploadDataDuringCreation&&!this.options.uploadLengthDeferred?(this._offset=0,this._addChunkToRequest(r)):(this.options.protocol===m&&r.setHeader("Upload-Complete","?0"),this._sendRequest(r,null))).then(function(t){var e;_(t.getStatus(),200)?null==(e=t.getHeader("Location"))?n._emitHttpError(r,t,"tus: invalid or missing Location header"):(n.url=x(n.options.endpoint,e),(0,u.log)("Created upload at ".concat(n.url)),"function"==typeof n.options.onUploadUrlAvailable&&n.options.onUploadUrlAvailable(),0===n._size?(n._emitSuccess(t),n._source.close()):n._saveUploadInUrlStorage().then(function(){n.options.uploadDataDuringCreation?n._handleUploadResponse(r,t):(n._offset=0,n._performUpload())})):n._emitHttpError(r,t,"tus: unexpected response while creating upload")}).catch(function(t){n._emitHttpError(r,null,"tus: failed to create upload",t)})):this._emitError(new Error("tus: unable to create upload because no endpoint is provided"))}},{key:"_resumeUpload",value:function(){var o=this,i=this._openRequest("HEAD",this.url);this._sendRequest(i,null).then(function(t){var e=t.getStatus();if(!_(e,200))return 423===e?void o._emitHttpError(i,t,"tus: upload is currently locked; retry later"):(_(e,400)&&o._removeFromUrlStorage(),o.options.endpoint?(o.url=null,void o._createUpload()):void o._emitHttpError(i,t,"tus: unable to resume upload (new upload cannot be created without an endpoint)"));var r,n=Number.parseInt(t.getHeader("Upload-Offset"),10);Number.isNaN(n)?o._emitHttpError(i,t,"tus: invalid or missing offset value"):(r=Number.parseInt(t.getHeader("Upload-Length"),10),Number.isNaN(r)&&!o.options.uploadLengthDeferred&&o.options.protocol===v?o._emitHttpError(i,t,"tus: invalid or missing length value"):("function"==typeof o.options.onUploadUrlAvailable&&o.options.onUploadUrlAvailable(),o._saveUploadInUrlStorage().then(function(){n===r?(o._emitProgress(r,r),o._emitSuccess(t)):(o._offset=n,o._performUpload())})))}).catch(function(t){o._emitHttpError(i,null,"tus: failed to resume upload",t)})}},{key:"_performUpload",value:function(){var e,r=this;this._aborted||(this.options.overridePatchMethod?(e=this._openRequest("POST",this.url)).setHeader("X-HTTP-Method-Override","PATCH"):e=this._openRequest("PATCH",this.url),e.setHeader("Upload-Offset","".concat(this._offset)),this._addChunkToRequest(e).then(function(t){_(t.getStatus(),200)?r._handleUploadResponse(e,t):r._emitHttpError(e,t,"tus: unexpected response while uploading chunk")}).catch(function(t){r._aborted||r._emitHttpError(e,null,"tus: failed to upload chunk at offset ".concat(r._offset),t)}))}},{key:"_addChunkToRequest",value:function(n){var o=this,e=this._offset,t=this._offset+this.options.chunkSize;return n.setProgressHandler(function(t){o._emitProgress(e+t,o._size)}),n.setHeader("Content-Type","application/offset+octet-stream"),(t===Number.POSITIVE_INFINITY||t>this._size)&&!this.options.uploadLengthDeferred&&(t=this._size),this._source.slice(e,t).then(function(t){var e=t.value,t=t.done,r=null!=e&&e.size?e.size:0,r=(o.options.uploadLengthDeferred&&t&&(o._size=o._offset+r,n.setHeader("Upload-Length","".concat(o._size))),o._offset+r);return!o.options.uploadLengthDeferred&&t&&r!==o._size?Promise.reject(new Error("upload was configured with a size of ".concat(o._size," bytes, but the source is done after ").concat(r," bytes"))):null===e?o._sendRequest(n):(o.options.protocol===m&&n.setHeader("Upload-Complete",t?"?1":"?0"),o._emitProgress(o._offset,o._size),o._sendRequest(n,e))})}},{key:"_handleUploadResponse",value:function(t,e){var r=Number.parseInt(e.getHeader("Upload-Offset"),10);Number.isNaN(r)?this._emitHttpError(t,e,"tus: invalid or missing offset value"):(this._emitProgress(r,this._size),this._emitChunkComplete(r-this._offset,r,this._size),(this._offset=r)===this._size?(this._emitSuccess(e),this._source.close()):this._performUpload())}},{key:"_openRequest",value:function(t,e){t=S(t,e,this.options);return this._req=t}},{key:"_removeFromUrlStorage",value:function(){var e=this;this._urlStorageKey&&(this._urlStorage.removeUpload(this._urlStorageKey).catch(function(t){e._emitError(t)}),this._urlStorageKey=null)}},{key:"_saveUploadInUrlStorage",value:function(){var t,e=this;return this.options.storeFingerprintForResuming&&this._fingerprint&&null===this._urlStorageKey?(t={size:this._size,metadata:this.options.metadata,creationTime:(new Date).toString()},this._parallelUploads?t.parallelUploadUrls=this._parallelUploadUrls:t.uploadUrl=this.url,this._urlStorage.addUpload(this._fingerprint,t).then(function(t){e._urlStorageKey=t})):Promise.resolve()}},{key:"_sendRequest",value:function(t){return E(t,1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,this.options)}}])&&y(t.prototype,e),r&&y(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}();function w(t){return Object.entries(t).map(function(t){var t=f(t,2),e=t[0],t=t[1];return"".concat(e," ").concat(n.Base64.encode(String(t)))}).join(",")}function _(t,e){return e<=t&&t<e+100}function S(t,e,r){for(var n=r.httpStack.createRequest(t,e),t=(r.protocol===m?n.setHeader("Upload-Draft-Interop-Version","5"):n.setHeader("Tus-Resumable","1.0.0"),r.headers||{}),o=0,i=Object.entries(t);o<i.length;o++){var u=f(i[o],2),a=u[0],u=u[1];n.setHeader(a,u)}return r.addRequestId&&(e=(0,s.default)(),n.setHeader("X-Request-ID",e)),n}function E(){return U.apply(this,arguments)}function U(){var a;return a=P().mark(function t(e,r,n){var o;return P().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if("function"==typeof n.onBeforeRequest)return t.next=3,n.onBeforeRequest(e);t.next=3;break;case 3:return t.next=5,e.send(r);case 5:if(o=t.sent,"function"==typeof n.onAfterResponse)return t.next=9,n.onAfterResponse(e,o);t.next=9;break;case 9:return t.abrupt("return",o);case 10:case"end":return t.stop()}},t)}),(U=function(){var t=this,u=arguments;return new Promise(function(e,r){var n=a.apply(t,u);function o(t){l(n,e,r,o,i,"next",t)}function i(t){l(n,e,r,o,i,"throw",t)}o(void 0)})}).apply(this,arguments)}function j(t,e,r){return!(null==r.retryDelays||e>=r.retryDelays.length||null==t.originalRequest)&&(r&&"function"==typeof r.onShouldRetry?r.onShouldRetry(t,e,r):O(t))}function O(t){var t=t.originalResponse?t.originalResponse.getStatus():0;return(!_(t,400)||409===t||423===t)&&(t=!0,t=("undefined"==typeof navigator||!1!==navigator.onLine)&&t)}function x(t,e){return new o.default(e,t).toString()}b.defaultOptions=t;r.default=b},{"./error.js":12,"./logger.js":13,"./uuid.js":16,"js-base64":20,"url-parse":23}],16:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})}},{}],17:[function(t,e,r){"use strict";r.byteLength=function(t){var t=f(t),e=t[0],t=t[1];return 3*(e+t)/4-t},r.toByteArray=function(t){var e,r,n=f(t),o=n[0],n=n[1],i=new l(function(t,e){return 3*(t+e)/4-e}(o,n)),u=0,a=0<n?o-4:o;for(r=0;r<a;r+=4)e=s[t.charCodeAt(r)]<<18|s[t.charCodeAt(r+1)]<<12|s[t.charCodeAt(r+2)]<<6|s[t.charCodeAt(r+3)],i[u++]=e>>16&255,i[u++]=e>>8&255,i[u++]=255&e;2===n&&(e=s[t.charCodeAt(r)]<<2|s[t.charCodeAt(r+1)]>>4,i[u++]=255&e);1===n&&(e=s[t.charCodeAt(r)]<<10|s[t.charCodeAt(r+1)]<<4|s[t.charCodeAt(r+2)]>>2,i[u++]=e>>8&255,i[u++]=255&e);return i},r.fromByteArray=function(t){for(var e,r=t.length,n=r%3,o=[],i=0,u=r-n;i<u;i+=16383)o.push(function(t,e,r){for(var n,o=[],i=e;i<r;i+=3)n=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),o.push(function(t){return a[t>>18&63]+a[t>>12&63]+a[t>>6&63]+a[63&t]}(n));return o.join("")}(t,i,u<i+16383?u:i+16383));1==n?(e=t[r-1],o.push(a[e>>2]+a[e<<4&63]+"==")):2==n&&(e=(t[r-2]<<8)+t[r-1],o.push(a[e>>10]+a[e>>4&63]+a[e<<2&63]+"="));return o.join("")};for(var a=[],s=[],l="undefined"!=typeof Uint8Array?Uint8Array:Array,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,i=n.length;o<i;++o)a[o]=n[o],s[n.charCodeAt(o)]=o;function f(t){var e=t.length;if(0<e%4)throw new Error("Invalid string. Length must be a multiple of 4");t=t.indexOf("="),e=(t=-1===t?e:t)===e?0:4-t%4;return[t,e]}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},{}],18:[function(k,t,L){!function(t){!function(){"use strict";var U=k("base64-js"),i=k("ieee754"),e=(L.Buffer=c,L.SlowBuffer=function(t){+t!=t&&(t=0);return c.alloc(+t)},L.INSPECT_MAX_BYTES=50,2147483647);function s(t){if(e<t)throw new RangeError('The value "'+t+'" is invalid for option "size"');t=new Uint8Array(t);return t.__proto__=c.prototype,t}function c(t,e,r){if("number"!=typeof t)return n(t,e,r);if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return u(t)}function n(t,e,r){if("string"==typeof t){var n=t,o=e;if(c.isEncoding(o="string"==typeof o&&""!==o?o:"utf8"))return i=0|p(n,o),u=s(i),u=(n=u.write(n,o))!==i?u.slice(0,n):u;throw new TypeError("Unknown encoding: "+o)}if(ArrayBuffer.isView(t))return l(t);if(null==t)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(A(t,ArrayBuffer)||t&&A(t.buffer,ArrayBuffer)){var i=t,n=e,u=r;if(n<0||i.byteLength<n)throw new RangeError('"offset" is outside of buffer bounds');if(i.byteLength<n+(u||0))throw new RangeError('"length" is outside of buffer bounds');return(i=void 0===n&&void 0===u?new Uint8Array(i):void 0===u?new Uint8Array(i,n):new Uint8Array(i,n,u)).__proto__=c.prototype,i}if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');o=t.valueOf&&t.valueOf();if(null!=o&&o!==t)return c.from(o,e,r);var a=function(t){{var e,r;if(c.isBuffer(t))return e=0|f(t.length),0!==(r=s(e)).length&&t.copy(r,0,0,e),r}if(void 0!==t.length)return"number"!=typeof t.length||R(t.length)?s(0):l(t);if("Buffer"===t.type&&Array.isArray(t.data))return l(t.data)}(t);if(a)return a;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return c.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function o(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function u(t){return o(t),s(t<0?0:0|f(t))}function l(t){for(var e=t.length<0?0:0|f(t.length),r=s(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function f(t){if(e<=t)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+e.toString(16)+" bytes");return 0|t}function p(t,e){if(c.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||A(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=2<arguments.length&&!0===arguments[2];if(!n&&0===r)return 0;for(var o=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return O(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return x(t).length;default:if(o)return n?-1:O(t).length;e=(""+e).toLowerCase(),o=!0}}function r(t,e,r){var n,o=!1;if((e=void 0===e||e<0?0:e)>this.length)return"";if((r=void 0===r||r>this.length?this.length:r)<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t=t||"utf8";;)switch(t){case"hex":var i=this,u=e,a=r,s=i.length;(!a||a<0||s<a)&&(a=s);for(var l="",f=u=!u||u<0?0:u;f<a;++f)l+=function(t){return t<16?"0"+t.toString(16):t.toString(16)}(i[f]);return l;case"utf8":case"utf-8":return j(this,e,r);case"ascii":var c=this,s=e,p=r,h="";p=Math.min(c.length,p);for(var d=s;d<p;++d)h+=String.fromCharCode(127&c[d]);return h;case"latin1":case"binary":var y=this,u=e,g=r,v="";g=Math.min(y.length,g);for(var m=u;m<g;++m)v+=String.fromCharCode(y[m]);return v;case"base64":return b=this,n=r,0===(w=e)&&n===b.length?U.fromByteArray(b):U.fromByteArray(b.slice(w,n));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":for(var b=e,w=r,_=this.slice(b,w),S="",E=0;E<_.length;E+=2)S+=String.fromCharCode(_[E]+256*_[E+1]);return S;default:if(o)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),o=!0}}function a(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function h(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):2147483647<r?r=2147483647:r<-2147483648&&(r=-2147483648),(r=(r=R(r=+r)?o?0:t.length-1:r)<0?t.length+r:r)>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=c.from(e,n)),c.isBuffer(e))return 0===e.length?-1:d(t,e,r,n,o);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?(o?Uint8Array.prototype.indexOf:Uint8Array.prototype.lastIndexOf).call(t,e,r):d(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function d(t,e,r,n,o){var i=1,u=t.length,a=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;u/=i=2,a/=2,r/=2}function s(t,e){return 1===i?t[e]:t.readUInt16BE(e*i)}if(o)for(var l=-1,f=r;f<u;f++)if(s(t,f)===s(e,-1===l?0:f-l)){if(f-(l=-1===l?f:l)+1===a)return l*i}else-1!==l&&(f-=f-l),l=-1;else for(f=r=u<r+a?u-a:r;0<=f;f--){for(var c=!0,p=0;p<a;p++)if(s(t,f+p)!==s(e,p)){c=!1;break}if(c)return f}return-1}function g(t,e,r,n){return P(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function v(t,e,r,n){return P(function(t,e){for(var r,n,o=[],i=0;i<t.length&&!((e-=2)<0);++i)r=t.charCodeAt(i),n=r>>8,o.push(r%256),o.push(n);return o}(e,t.length-r),t,r,n)}function j(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,u,a,s,l=t[o],f=null,c=239<l?4:223<l?3:191<l?2:1;if(o+c<=r)switch(c){case 1:l<128&&(f=l);break;case 2:128==(192&(i=t[o+1]))&&127<(s=(31&l)<<6|63&i)&&(f=s);break;case 3:i=t[o+1],u=t[o+2],128==(192&i)&&128==(192&u)&&2047<(s=(15&l)<<12|(63&i)<<6|63&u)&&(s<55296||57343<s)&&(f=s);break;case 4:i=t[o+1],u=t[o+2],a=t[o+3],128==(192&i)&&128==(192&u)&&128==(192&a)&&65535<(s=(15&l)<<18|(63&i)<<12|(63&u)<<6|63&a)&&s<1114112&&(f=s)}null===f?(f=65533,c=1):65535<f&&(n.push((f-=65536)>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=c}var p=n,h=p.length;if(h<=m)return String.fromCharCode.apply(String,p);for(var d="",y=0;y<h;)d+=String.fromCharCode.apply(String,p.slice(y,y+=m));return d}L.kMaxLength=e,(c.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()}catch(t){return!1}}())||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),c.poolSize=8192,c.from=n,c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,c.alloc=function(t,e,r){return e=e,r=r,o(t=t),!(t<=0)&&void 0!==e?"string"==typeof r?s(t).fill(e,r):s(t).fill(e):s(t)},c.allocUnsafe=u,c.allocUnsafeSlow=u,c.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==c.prototype},c.compare=function(t,e){if(A(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),A(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);if(void 0===e)for(o=e=0;o<t.length;++o)e+=t[o].length;for(var r=c.allocUnsafe(e),n=0,o=0;o<t.length;++o){var i=t[o];if(A(i,Uint8Array)&&(i=c.from(i)),!c.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,n),n+=i.length}return r},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)a(this,e,e+1);return this},c.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)a(this,e,e+3),a(this,e+1,e+2);return this},c.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)a(this,e,e+7),a(this,e+1,e+6),a(this,e+2,e+5),a(this,e+3,e+4);return this},c.prototype.toLocaleString=c.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?j(this,0,t):r.apply(this,arguments)},c.prototype.equals=function(t){if(c.isBuffer(t))return this===t||0===c.compare(this,t);throw new TypeError("Argument must be a Buffer")},c.prototype.inspect=function(){var t="",e=L.INSPECT_MAX_BYTES,t=this.toString("hex",0,e).replace(/(.{2})/g,"$1 ").trim();return this.length>e&&(t+=" ... "),"<Buffer "+t+">"},c.prototype.compare=function(t,e,r,n,o){if(A(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),(e=void 0===e?0:e)<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(o<=n&&r<=e)return 0;if(o<=n)return-1;if(r<=e)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),u=(r>>>=0)-(e>>>=0),a=Math.min(i,u),s=this.slice(n,o),l=t.slice(e,r),f=0;f<a;++f)if(s[f]!==l[f]){i=s[f],u=l[f];break}return i<u?-1:u<i?1:0},c.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},c.prototype.indexOf=function(t,e,r){return h(this,t,e,r,!0)},c.prototype.lastIndexOf=function(t,e,r){return h(this,t,e,r,!1)},c.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||o<r)&&(r=o),0<t.length&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n=n||"utf8";for(var i,u,a,s=!1;;)switch(n){case"hex":var l=this,f=t,c=e,p=r,h=(c=Number(c)||0,l.length-c);(!p||h<(p=Number(p)))&&(p=h),(h=f.length)/2<p&&(p=h/2);for(var d=0;d<p;++d){var y=parseInt(f.substr(2*d,2),16);if(R(y))return d;l[c+d]=y}return d;case"utf8":case"utf-8":return h=e,a=r,P(O(t,(u=this).length-h),u,h,a);case"ascii":return g(this,t,e,r);case"latin1":case"binary":return g(this,t,e,r);case"base64":return u=this,a=e,i=r,P(x(t),u,a,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var m=4096;function y(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(r<t+e)throw new RangeError("Trying to access beyond buffer length")}function b(t,e,r,n,o,i){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(o<e||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function w(t,e,r,n){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function _(t,e,r,n,o){return e=+e,r>>>=0,o||w(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function S(t,e,r,n,o){return e=+e,r>>>=0,o||w(t,0,r,8),i.write(t,e,r,n,52,8),r+8}c.prototype.slice=function(t,e){var r=this.length,r=((t=~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),e<t&&(e=t),this.subarray(t,e));return r.__proto__=c.prototype,r},c.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||y(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},c.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||y(t,e,this.length);for(var n=this[t+--e],o=1;0<e&&(o*=256);)n+=this[t+--e]*o;return n},c.prototype.readUInt8=function(t,e){return t>>>=0,e||y(t,1,this.length),this[t]},c.prototype.readUInt16LE=function(t,e){return t>>>=0,e||y(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUInt16BE=function(t,e){return t>>>=0,e||y(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUInt32LE=function(t,e){return t>>>=0,e||y(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUInt32BE=function(t,e){return t>>>=0,e||y(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||y(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return(o*=128)<=n&&(n-=Math.pow(2,8*e)),n},c.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||y(t,e,this.length);for(var n=e,o=1,i=this[t+--n];0<n&&(o*=256);)i+=this[t+--n]*o;return(o*=128)<=i&&(i-=Math.pow(2,8*e)),i},c.prototype.readInt8=function(t,e){return t>>>=0,e||y(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){t>>>=0,e||y(t,2,this.length);e=this[t]|this[t+1]<<8;return 32768&e?4294901760|e:e},c.prototype.readInt16BE=function(t,e){t>>>=0,e||y(t,2,this.length);e=this[t+1]|this[t]<<8;return 32768&e?4294901760|e:e},c.prototype.readInt32LE=function(t,e){return t>>>=0,e||y(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return t>>>=0,e||y(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readFloatLE=function(t,e){return t>>>=0,e||y(t,4,this.length),i.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return t>>>=0,e||y(t,4,this.length),i.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return t>>>=0,e||y(t,8,this.length),i.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return t>>>=0,e||y(t,8,this.length),i.read(this,t,!1,52,8)},c.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||b(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},c.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||b(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;0<=--o&&(i*=256);)this[e+o]=t/i&255;return e+r},c.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,1,255,0),this[e]=255&t,e+1},c.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},c.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeIntLE=function(t,e,r,n){t=+t,e>>>=0,n||b(this,t,e,r,(n=Math.pow(2,8*r-1))-1,-n);var o=0,i=1,u=0;for(this[e]=255&t;++o<r&&(i*=256);)t<0&&0===u&&0!==this[e+o-1]&&(u=1),this[e+o]=(t/i>>0)-u&255;return e+r},c.prototype.writeIntBE=function(t,e,r,n){t=+t,e>>>=0,n||b(this,t,e,r,(n=Math.pow(2,8*r-1))-1,-n);var o=r-1,i=1,u=0;for(this[e+o]=255&t;0<=--o&&(i*=256);)t<0&&0===u&&0!==this[e+o+1]&&(u=1),this[e+o]=(t/i>>0)-u&255;return e+r},c.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,1,127,-128),this[e]=255&(t=t<0?255+t+1:t),e+1},c.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},c.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,4,2147483647,-2147483648),this[e]=(t=t<0?4294967295+t+1:t)>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeFloatLE=function(t,e,r){return _(this,t,e,!0,r)},c.prototype.writeFloatBE=function(t,e,r){return _(this,t,e,!1,r)},c.prototype.writeDoubleLE=function(t,e,r){return S(this,t,e,!0,r)},c.prototype.writeDoubleBE=function(t,e,r){return S(this,t,e,!1,r)},c.prototype.copy=function(t,e,r,n){if(!c.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r=r||0,n||0===n||(n=this.length),e>=t.length&&(e=t.length),(n=0<n&&n<r?r:n)===r)return 0;if(0===t.length||0===this.length)return 0;if((e=e||0)<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length);var o=(n=t.length-e<n-r?t.length-e+r:n)-r;if(this===t&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(e,r,n);else if(this===t&&r<e&&e<n)for(var i=o-1;0<=i;--i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,n),e);return o},c.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);var o;1===t.length&&(o=t.charCodeAt(0),"utf8"===n&&o<128||"latin1"===n)&&(t=o)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");var i;if(!(r<=e))if(e>>>=0,r=void 0===r?this.length:r>>>0,"number"==typeof(t=t||0))for(i=e;i<r;++i)this[i]=t;else{var u=c.isBuffer(t)?t:c.from(t,n),a=u.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<r-e;++i)this[i+e]=u[i%a]}return this};var E=/[^+/0-9A-Za-z-_]/g;function O(t,e){e=e||1/0;for(var r,n=t.length,o=null,i=[],u=0;u<n;++u){if(55295<(r=t.charCodeAt(u))&&r<57344){if(!o){if(56319<r){-1<(e-=3)&&i.push(239,191,189);continue}if(u+1===n){-1<(e-=3)&&i.push(239,191,189);continue}o=r;continue}if(r<56320){-1<(e-=3)&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&-1<(e-=3)&&i.push(239,191,189);if(o=null,r<128){if(--e<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function x(t){return U.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(E,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function P(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}function A(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function R(t){return t!=t}}.call(this)}.call(this,k("buffer").Buffer)},{"base64-js":17,buffer:18,ieee754:19}],19:[function(t,e,r){r.read=function(t,e,r,n,o){var i,u,a=8*o-n-1,s=(1<<a)-1,l=s>>1,f=-7,c=r?o-1:0,p=r?-1:1,o=t[e+c];for(c+=p,i=o&(1<<-f)-1,o>>=-f,f+=a;0<f;i=256*i+t[e+c],c+=p,f-=8);for(u=i&(1<<-f)-1,i>>=-f,f+=n;0<f;u=256*u+t[e+c],c+=p,f-=8);if(0===i)i=1-l;else{if(i===s)return u?NaN:1/0*(o?-1:1);u+=Math.pow(2,n),i-=l}return(o?-1:1)*u*Math.pow(2,i-n)},r.write=function(t,e,r,n,o,i){var u,a,s=8*i-o-1,l=(1<<s)-1,f=l>>1,c=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,h=n?1:-1,i=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,u=l):(u=Math.floor(Math.log(e)/Math.LN2),e*(n=Math.pow(2,-u))<1&&(u--,n*=2),2<=(e+=1<=u+f?c/n:c*Math.pow(2,1-f))*n&&(u++,n/=2),l<=u+f?(a=0,u=l):1<=u+f?(a=(e*n-1)*Math.pow(2,o),u+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,o),u=0));8<=o;t[r+p]=255&a,p+=h,a/=256,o-=8);for(u=u<<o|a,s+=o;0<s;t[r+p]=255&u,p+=h,u/=256,s-=8);t[r+p-h]|=128*i}},{}],20:[function(t,i,u){!function(o,T){!function(){var t,e,r,n;t="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==o?o:this,e=function(){"use strict";function r(t){return t.replace(/=/g,"").replace(/[+\/]/g,function(t){return"+"==t?"-":"_"})}function t(t){for(var e,r,n,o="",i=t.length%3,u=0;u<t.length;){if(255<(e=t.charCodeAt(u++))||255<(r=t.charCodeAt(u++))||255<(n=t.charCodeAt(u++)))throw new TypeError("invalid character found");o+=w[(e=e<<16|r<<8|n)>>18&63]+w[e>>12&63]+w[e>>6&63]+w[63&e]}return i?o.slice(0,i-3)+"===".substring(i):o}function e(t,e){return(e=void 0===e?!1:e)?r(x(t)):x(t)}function n(t){var e;return t.length<2?(e=t.charCodeAt(0))<128?t:e<2048?E(192|e>>>6)+E(128|63&e):E(224|e>>>12&15)+E(128|e>>>6&63)+E(128|63&e):(e=65536+1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320),E(240|e>>>18&7)+E(128|e>>>12&63)+E(128|e>>>6&63)+E(128|63&e))}function o(t){return t.replace(P,n)}function i(t,e){return(e=void 0===e?!1:e)?r(A(t)):A(t)}function u(t){return i(t,!0)}function a(t){switch(t.length){case 4:var e=((7&t.charCodeAt(0))<<18|(63&t.charCodeAt(1))<<12|(63&t.charCodeAt(2))<<6|63&t.charCodeAt(3))-65536;return E(55296+(e>>>10))+E(56320+(1023&e));case 3:return E((15&t.charCodeAt(0))<<12|(63&t.charCodeAt(1))<<6|63&t.charCodeAt(2));default:return E((31&t.charCodeAt(0))<<6|63&t.charCodeAt(1))}}function s(t){return t.replace(R,a)}function l(t){if(t=t.replace(/\s+/g,""),!S.test(t))throw new TypeError("malformed base64.");t+="==".slice(2-(3&t.length));for(var e,r,n,o="",i=0;i<t.length;)e=_[t.charAt(i++)]<<18|_[t.charAt(i++)]<<12|(r=_[t.charAt(i++)])<<6|(n=_[t.charAt(i++)]),o+=64===r?E(e>>16&255):64===n?E(e>>16&255,e>>8&255):E(e>>16&255,e>>8&255,255&e);return o}function f(t){return L(c(t))}function c(t){return j(t.replace(/[-_]/g,function(t){return"-"==t?"+":"/"}))}function p(t){return B(c(t))}function h(t){return{value:t,enumerable:!1,writable:!0,configurable:!0}}function d(){function t(t,e){Object.defineProperty(String.prototype,t,h(e))}t("fromBase64",function(){return p(this)}),t("toBase64",function(t){return i(this,t)}),t("toBase64URI",function(){return i(this,!0)}),t("toBase64URL",function(){return i(this,!0)}),t("toUint8Array",function(){return f(this)})}function y(){function t(t,e){Object.defineProperty(Uint8Array.prototype,t,h(e))}t("toBase64",function(t){return e(this,t)}),t("toBase64URI",function(){return e(this,!0)}),t("toBase64URL",function(){return e(this,!0)})}var g,v="function"==typeof T,m="function"==typeof TextDecoder?new TextDecoder:void 0,b="function"==typeof TextEncoder?new TextEncoder:void 0,w=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="),_=(g={},w.forEach(function(t,e){return g[t]=e}),g),S=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,E=String.fromCharCode.bind(String),U="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(t){return new Uint8Array(Array.prototype.slice.call(t,0))},j=function(t){return t.replace(/[^A-Za-z0-9\+\/]/g,"")},O="function"==typeof btoa?function(t){return btoa(t)}:v?function(t){return T.from(t,"binary").toString("base64")}:t,x=v?function(t){return T.from(t).toString("base64")}:function(t){for(var e=[],r=0,n=t.length;r<n;r+=4096)e.push(E.apply(null,t.subarray(r,r+4096)));return O(e.join(""))},P=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,A=v?function(t){return T.from(t,"utf8").toString("base64")}:b?function(t){return x(b.encode(t))}:function(t){return O(o(t))},R=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,k="function"==typeof atob?function(t){return atob(j(t))}:v?function(t){return T.from(t,"base64").toString("binary")}:l,L=v?function(t){return U(T.from(t,"base64"))}:function(t){return U(k(t).split("").map(function(t){return t.charCodeAt(0)}))},B=v?function(t){return T.from(t,"base64").toString("utf8")}:m?function(t){return m.decode(L(t))}:function(t){return s(k(t))},C={version:"3.7.7",VERSION:"3.7.7",atob:k,atobPolyfill:l,btoa:O,btoaPolyfill:t,fromBase64:p,toBase64:i,encode:i,encodeURI:u,encodeURL:u,utob:o,btou:s,decode:p,isValid:function(t){return"string"==typeof t&&(t=t.replace(/\s+/g,"").replace(/={0,2}$/,""),!/[^\s0-9a-zA-Z\+/]/.test(t)||!/[^\s0-9a-zA-Z\-_]/.test(t))},fromUint8Array:e,toUint8Array:f,extendString:d,extendUint8Array:y,extendBuiltins:function(){d(),y()},Base64:{}};return Object.keys(C).forEach(function(t){return C.Base64[t]=C[t]}),C},"object"==typeof u&&void 0!==i?i.exports=e():(r=t.Base64,(n=e()).noConflict=function(){return t.Base64=r,n},t.Meteor&&(Base64=n),t.Base64=n)}.call(this)}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer)},{buffer:18}],21:[function(t,e,r){"use strict";var i=Object.prototype.hasOwnProperty;function u(t){try{return decodeURIComponent(t.replace(/\+/g," "))}catch(t){return null}}function a(t){try{return encodeURIComponent(t)}catch(t){return null}}r.stringify=function(t,e){var r,n,o=[];for(n in"string"!=typeof(e=e||"")&&(e="?"),t)i.call(t,n)&&((r=t[n])||null!=r&&!isNaN(r)||(r=""),n=a(n),r=a(r),null!==n)&&null!==r&&o.push(n+"="+r);return o.length?e+o.join("&"):""},r.parse=function(t){for(var e=/([^=?#&]+)=?([^&]*)/g,r={};o=e.exec(t);){var n=u(o[1]),o=u(o[2]);null===n||null===o||n in r||(r[n]=o)}return r}},{}],22:[function(t,e,r){"use strict";e.exports=function(t,e){if(e=e.split(":")[0],!(t=+t))return!1;switch(e){case"http":case"ws":return 80!==t;case"https":case"wss":return 443!==t;case"ftp":return 21!==t;case"gopher":return 70!==t;case"file":return!1}return 0!==t}},{}],23:[function(t,r,e){!function(u){!function(){"use strict";var p=t("requires-port"),h=t("querystringify"),e=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,d=/[\n\r\t]/g,o=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,a=/:\d+$/,s=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,y=/^[a-zA-Z]:/;function g(t){return(t||"").toString().replace(e,"")}var v=[["#","hash"],["?","query"],function(t,e){return b(e.protocol)?t.replace(/\\/g,"/"):t},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],i={hash:1,query:1};function m(t){var e,r="undefined"!=typeof window?window:void 0!==u?u:"undefined"!=typeof self?self:{},r=r.location||{},n={},r=typeof(t=t||r);if("blob:"===t.protocol)n=new _(unescape(t.pathname),{});else if("string"==r)for(e in n=new _(t,{}),i)delete n[e];else if("object"==r){for(e in t)e in i||(n[e]=t[e]);void 0===n.slashes&&(n.slashes=o.test(t.href))}return n}function b(t){return"file:"===t||"ftp:"===t||"http:"===t||"https:"===t||"ws:"===t||"wss:"===t}function w(t,e){t=(t=g(t)).replace(d,""),e=e||{};var r,t=s.exec(t),n=t[1]?t[1].toLowerCase():"",o=!!t[2],i=!!t[3],u=0;return o?u=i?(r=t[2]+t[3]+t[4],t[2].length+t[3].length):(r=t[2]+t[4],t[2].length):i?(r=t[3]+t[4],u=t[3].length):r=t[4],"file:"===n?2<=u&&(r=r.slice(2)):b(n)?r=t[4]:n?o&&(r=r.slice(2)):2<=u&&b(e.protocol)&&(r=t[4]),{protocol:n,slashes:o||b(n),slashesCount:u,rest:r}}function _(t,e,r){if(t=(t=g(t)).replace(d,""),!(this instanceof _))return new _(t,e,r);var n,o,i,u,a,s=v.slice(),l=typeof e,f=this,c=0;for("object"!=l&&"string"!=l&&(r=e,e=null),r&&"function"!=typeof r&&(r=h.parse),n=!(l=w(t||"",e=m(e))).protocol&&!l.slashes,f.slashes=l.slashes||n&&e.slashes,f.protocol=l.protocol||e.protocol||"",t=l.rest,("file:"===l.protocol&&(2!==l.slashesCount||y.test(t))||!l.slashes&&(l.protocol||l.slashesCount<2||!b(f.protocol)))&&(s[3]=[/(.*)/,"pathname"]);c<s.length;c++)"function"==typeof(i=s[c])?t=i(t,f):(o=i[0],a=i[1],o!=o?f[a]=t:"string"==typeof o?~(u="@"===o?t.lastIndexOf(o):t.indexOf(o))&&(t="number"==typeof i[2]?(f[a]=t.slice(0,u),t.slice(u+i[2])):(f[a]=t.slice(u),t.slice(0,u))):(u=o.exec(t))&&(f[a]=u[1],t=t.slice(0,u.index)),f[a]=f[a]||n&&i[3]&&e[a]||"",i[4]&&(f[a]=f[a].toLowerCase()));r&&(f.query=r(f.query)),n&&e.slashes&&"/"!==f.pathname.charAt(0)&&(""!==f.pathname||""!==e.pathname)&&(f.pathname=function(t,e){if(""===t)return e;for(var r=(e||"/").split("/").slice(0,-1).concat(t.split("/")),n=r.length,e=r[n-1],o=!1,i=0;n--;)"."===r[n]?r.splice(n,1):".."===r[n]?(r.splice(n,1),i++):i&&(0===n&&(o=!0),r.splice(n,1),i--);return o&&r.unshift(""),"."!==e&&".."!==e||r.push(""),r.join("/")}(f.pathname,e.pathname)),"/"!==f.pathname.charAt(0)&&b(f.protocol)&&(f.pathname="/"+f.pathname),p(f.port,f.protocol)||(f.host=f.hostname,f.port=""),f.username=f.password="",f.auth&&(~(u=f.auth.indexOf(":"))?(f.username=f.auth.slice(0,u),f.username=encodeURIComponent(decodeURIComponent(f.username)),f.password=f.auth.slice(u+1),f.password=encodeURIComponent(decodeURIComponent(f.password))):f.username=encodeURIComponent(decodeURIComponent(f.auth)),f.auth=f.password?f.username+":"+f.password:f.username),f.origin="file:"!==f.protocol&&b(f.protocol)&&f.host?f.protocol+"//"+f.host:"null",f.href=f.toString()}_.prototype={set:function(t,e,r){var n=this;switch(t){case"query":"string"==typeof e&&e.length&&(e=(r||h.parse)(e)),n[t]=e;break;case"port":n[t]=e,p(e,n.protocol)?e&&(n.host=n.hostname+":"+e):(n.host=n.hostname,n[t]="");break;case"hostname":n[t]=e,n.port&&(e+=":"+n.port),n.host=e;break;case"host":n[t]=e,a.test(e)?(e=e.split(":"),n.port=e.pop(),n.hostname=e.join(":")):(n.hostname=e,n.port="");break;case"protocol":n.protocol=e.toLowerCase(),n.slashes=!r;break;case"pathname":case"hash":e?(o="pathname"===t?"/":"#",n[t]=e.charAt(0)!==o?o+e:e):n[t]=e;break;case"username":case"password":n[t]=encodeURIComponent(e);break;case"auth":var o=e.indexOf(":");~o?(n.username=e.slice(0,o),n.username=encodeURIComponent(decodeURIComponent(n.username)),n.password=e.slice(o+1),n.password=encodeURIComponent(decodeURIComponent(n.password))):n.username=encodeURIComponent(decodeURIComponent(e))}for(var i=0;i<v.length;i++){var u=v[i];u[4]&&(n[u[1]]=n[u[1]].toLowerCase())}return n.auth=n.password?n.username+":"+n.password:n.username,n.origin="file:"!==n.protocol&&b(n.protocol)&&n.host?n.protocol+"//"+n.host:"null",n.href=n.toString(),n},toString:function(t){t&&"function"==typeof t||(t=h.stringify);var e=this,r=e.host,n=((n=e.protocol)&&":"!==n.charAt(n.length-1)&&(n+=":"),n+(e.protocol&&e.slashes||b(e.protocol)?"//":""));return e.username?(n+=e.username,e.password&&(n+=":"+e.password),n+="@"):e.password?n=n+(":"+e.password)+"@":"file:"!==e.protocol&&b(e.protocol)&&!r&&"/"!==e.pathname&&(n+="@"),(":"===r[r.length-1]||a.test(e.hostname)&&!e.port)&&(r+=":"),n+=r+e.pathname,(r="object"==typeof e.query?t(e.query):e.query)&&(n+="?"!==r.charAt(0)?"?"+r:r),e.hash&&(n+=e.hash),n}},_.extractProtocol=w,_.location=m,_.trimLeft=g,_.qs=h,r.exports=_}.call(this)}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:21,"requires-port":22}]},{},[4])(4)});
+!function(t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).tus=t()}(function(){return function n(o,i,u){function a(e,t){if(!i[e]){if(!o[e]){var r="function"==typeof require&&require;if(!t&&r)return r(e,!0);if(s)return s(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}r=i[e]={exports:{}},o[e][0].call(r.exports,function(t){return a(o[e][1][t]||t)},r,r.exports,n,o,i,u)}return i[e].exports}for(var s="function"==typeof require&&require,t=0;t<u.length;t++)a(u[t]);return a}({1:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var i=n(t("./isReactNative.js")),u=n(t("./uriToBlob.js")),s=n(t("./sources/FileSource.js")),l=n(t("./sources/StreamSource.js"));function n(t){return t&&t.__esModule?t:{default:t}}function P(t){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function A(){A=function(){return u};var s,u={},t=Object.prototype,l=t.hasOwnProperty,f=Object.defineProperty||function(t,e,r){t[e]=r.value},e="function"==typeof Symbol?Symbol:{},n=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag";function i(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{i({},"")}catch(s){i=function(t,e,r){return t[e]=r}}function a(t,e,r,n){var o,i,u,a,e=e&&e.prototype instanceof v?e:v,e=Object.create(e.prototype),n=new O(n||[]);return f(e,"_invoke",{value:(o=t,i=r,u=n,a=p,function(t,e){if(a===d)throw Error("Generator is already running");if(a===y){if("throw"===t)throw e;return{value:s,done:!0}}for(u.method=t,u.arg=e;;){var r=u.delegate;if(r){r=function t(e,r){var n=r.method,o=e.iterator[n];if(o===s)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=s,t(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),g;n=c(o,e.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,g;o=n.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=s),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}(r,u);if(r){if(r===g)continue;return r}}if("next"===u.method)u.sent=u._sent=u.arg;else if("throw"===u.method){if(a===p)throw a=y,u.arg;u.dispatchException(u.arg)}else"return"===u.method&&u.abrupt("return",u.arg);a=d;r=c(o,i,u);if("normal"===r.type){if(a=u.done?y:h,r.arg===g)continue;return{value:r.arg,done:u.done}}"throw"===r.type&&(a=y,u.method="throw",u.arg=r.arg)}})}),e}function c(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}u.wrap=a;var p="suspendedStart",h="suspendedYield",d="executing",y="completed",g={};function v(){}function m(){}function b(){}var e={},w=(i(e,n,function(){return this}),Object.getPrototypeOf),w=w&&w(w(x([]))),_=(w&&w!==t&&l.call(w,n)&&(e=w),b.prototype=v.prototype=Object.create(e));function S(t){["next","throw","return"].forEach(function(e){i(t,e,function(t){return this._invoke(e,t)})})}function E(u,a){var e;f(this,"_invoke",{value:function(r,n){function t(){return new a(function(t,e){!function e(t,r,n,o){var i,t=c(u[t],u,r);if("throw"!==t.type)return(r=(i=t.arg).value)&&"object"==P(r)&&l.call(r,"__await")?a.resolve(r.__await).then(function(t){e("next",t,n,o)},function(t){e("throw",t,n,o)}):a.resolve(r).then(function(t){i.value=t,n(i)},function(t){return e("throw",t,n,o)});o(t.arg)}(r,n,t,e)})}return e=e?e.then(t,t):t()}})}function U(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(U,this),this.reset(!0)}function x(e){if(e||""===e){var r,t=e[n];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return r=-1,(t=function t(){for(;++r<e.length;)if(l.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=s,t.done=!0,t}).next=t}throw new TypeError(P(e)+" is not iterable")}return f(_,"constructor",{value:m.prototype=b,configurable:!0}),f(b,"constructor",{value:m,configurable:!0}),m.displayName=i(b,o,"GeneratorFunction"),u.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},u.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,i(t,o,"GeneratorFunction")),t.prototype=Object.create(_),t},u.awrap=function(t){return{__await:t}},S(E.prototype),i(E.prototype,r,function(){return this}),u.AsyncIterator=E,u.async=function(t,e,r,n,o){void 0===o&&(o=Promise);var i=new E(a(t,e,r,n),o);return u.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},S(_),i(_,o,"Generator"),i(_,n,function(){return this}),i(_,"toString",function(){return"[object Generator]"}),u.keys=function(t){var e,r=Object(t),n=[];for(e in r)n.push(e);return n.reverse(),function t(){for(;n.length;){var e=n.pop();if(e in r)return t.value=e,t.done=!1,t}return t.done=!0,t}},u.values=x,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=s,this.done=!1,this.delegate=null,this.method="next",this.arg=s,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&l.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=s)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(t,e){return i.type="throw",i.arg=r,n.next=t,e&&(n.method="next",n.arg=s),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var u=l.call(o,"catchLoc"),a=l.call(o,"finallyLoc");if(u&&a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!a)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}var i=(o=o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc?null:o)?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r,n,o=this.tryEntries[e];if(o.tryLoc===t)return"throw"===(r=o.completion).type&&(n=r.arg,j(o)),n}throw Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:x(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=s),g}},u}function f(t,e,r,n,o,i,u){try{var a=t[i](u),s=a.value}catch(t){return void r(t)}a.done?e(s):Promise.resolve(s).then(n,o)}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=P(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=P(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==P(t)?t:t+""}(n.key),n)}}r.default=function(){function t(){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function")}return e=t,(r=[{key:"openFile",value:(a=A().mark(function t(e,r){var n;return A().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if((0,i.default)()&&e&&void 0!==e.uri)return t.prev=1,t.next=4,(0,u.default)(e.uri);t.next=11;break;case 4:return n=t.sent,t.abrupt("return",new s.default(n));case 8:throw t.prev=8,t.t0=t.catch(1),new Error("tus: cannot fetch `file.uri` as Blob, make sure the uri is correct and accessible. ".concat(t.t0));case 11:if("function"==typeof e.slice&&void 0!==e.size)return t.abrupt("return",Promise.resolve(new s.default(e)));t.next=13;break;case 13:if("function"!=typeof e.read){t.next=18;break}if(r=Number(r),Number.isFinite(r)){t.next=17;break}return t.abrupt("return",Promise.reject(new Error("cannot create source for stream without a finite value for the `chunkSize` option")));case 17:return t.abrupt("return",Promise.resolve(new l.default(e,r)));case 18:return t.abrupt("return",Promise.reject(new Error("source object may only be an instance of File, Blob, or Reader in this environment")));case 19:case"end":return t.stop()}},t,null,[[1,8]])}),o=function(){var t=this,u=arguments;return new Promise(function(e,r){var n=a.apply(t,u);function o(t){f(n,e,r,o,i,"next",t)}function i(t){f(n,e,r,o,i,"throw",t)}o(void 0)})},function(t,e){return o.apply(this,arguments)})}])&&c(e.prototype,r),n&&c(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r,n,a,o}()},{"./isReactNative.js":5,"./sources/FileSource.js":6,"./sources/StreamSource.js":7,"./uriToBlob.js":10}],2:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(t,e){if((0,n.default)())return Promise.resolve(function(t,e){var r=t.exif?function(t){var e=0;if(0!==t.length)for(var r=0;r<t.length;r++){var n=t.charCodeAt(r);e=(e<<5)-e+n,e&=e}return e}(JSON.stringify(t.exif)):"noexif";return["tus-rn",t.name||"noname",t.size||"nosize",r,e.endpoint].join("/")}(t,e));return Promise.resolve(["tus-br",t.name,t.type,t.size,t.lastModified,e.endpoint].join("-"))};var n=(r=t("./isReactNative.js"))&&r.__esModule?r:{default:r}},{"./isReactNative.js":5}],3:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}function u(t,e,r){return e&&i(t.prototype,e),r&&i(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){return u(function t(){n(this,t)},[{key:"createRequest",value:function(t,e){return new a(t,e)}},{key:"getName",value:function(){return"XHRHttpStack"}}])}();var a=function(){return u(function t(e,r){n(this,t),this._xhr=new XMLHttpRequest,this._xhr.open(e,r,!0),this._method=e,this._url=r,this._headers={}},[{key:"getMethod",value:function(){return this._method}},{key:"getURL",value:function(){return this._url}},{key:"setHeader",value:function(t,e){this._xhr.setRequestHeader(t,e),this._headers[t]=e}},{key:"getHeader",value:function(t){return this._headers[t]}},{key:"setProgressHandler",value:function(e){"upload"in this._xhr&&(this._xhr.upload.onprogress=function(t){t.lengthComputable&&e(t.loaded)})}},{key:"send",value:function(){var r=this,n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return new Promise(function(t,e){r._xhr.onload=function(){t(new s(r._xhr))},r._xhr.onerror=function(t){e(t)},r._xhr.send(n)})}},{key:"abort",value:function(){return this._xhr.abort(),Promise.resolve()}},{key:"getUnderlyingObject",value:function(){return this._xhr}}])}(),s=function(){return u(function t(e){n(this,t),this._xhr=e},[{key:"getStatus",value:function(){return this._xhr.status}},{key:"getHeader",value:function(t){return this._xhr.getResponseHeader(t)}},{key:"getBody",value:function(){return this._xhr.responseText}},{key:"getUnderlyingObject",value:function(){return this._xhr}}])}()},{}],4:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"DefaultHttpStack",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(r,"DetailedError",{enumerable:!0,get:function(){return n.default}}),r.Upload=void 0,Object.defineProperty(r,"canStoreURLs",{enumerable:!0,get:function(){return f.canStoreURLs}}),r.defaultOptions=void 0,Object.defineProperty(r,"enableDebugLog",{enumerable:!0,get:function(){return o.enableDebugLog}}),r.isSupported=void 0;var n=c(t("../error.js")),o=t("../logger.js"),i=c(t("../noopUrlStorage.js")),u=c(t("../upload.js")),a=c(t("./fileReader.js")),s=c(t("./fileSignature.js")),l=c(t("./httpStack.js")),f=t("./urlStorage.js");function c(t){return t&&t.__esModule?t:{default:t}}function p(t){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function h(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,w(n.key),n)}}function d(t,e,r){e=g(e);var n=t,e=y()?Reflect.construct(e,r||[],g(t).constructor):e.apply(t,r);if(e&&("object"===p(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");t=n;if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}function y(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(y=function(){return!!t})()}function g(t){return(g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function v(t,e){return(v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function m(e,t){var r,n=Object.keys(e);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(e),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)),n}function b(n){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?m(Object(o),!0).forEach(function(t){var e,r;e=n,r=o[t=t],(t=w(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):m(Object(o)).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(o,t))})}return n}function w(t){t=function(t,e){if("object"!=p(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=p(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==p(t)?t:t+""}var _=r.defaultOptions=b(b({},u.default.defaultOptions),{},{httpStack:new l.default,fileReader:new a.default,urlStorage:new(f.canStoreURLs?f.WebStorageUrlStorage:i.default),fingerprint:s.default});r.Upload=function(t){function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=this,n=o;if(r instanceof n)return d(this,o,[t,b(b({},_),e)]);throw new TypeError("Cannot call a class as a function")}var e,r=o;if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");return r.prototype=Object.create(t&&t.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),Object.defineProperty(r,"prototype",{writable:!1}),t&&v(r,t),r=o,t=[{key:"terminate",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},e=b(b({},_),e);return u.default.terminate(t,e)}}],(e=null)&&h(r.prototype,e),t&&h(r,t),Object.defineProperty(r,"prototype",{writable:!1}),r}(u.default),r.isSupported="function"==typeof XMLHttpRequest&&"function"==typeof Blob&&"function"==typeof Blob.prototype.slice},{"../error.js":12,"../logger.js":13,"../noopUrlStorage.js":14,"../upload.js":15,"./fileReader.js":1,"./fileSignature.js":2,"./httpStack.js":3,"./urlStorage.js":11}],5:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase()}},{}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(t("./isCordova.js")),i=n(t("./readAsByteArray.js"));function n(t){return t&&t.__esModule?t:{default:t}}function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=u(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=u(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==u(t)?t:t+""}(n.key),n)}}r.default=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this._file=t,this.size=t.size}return t=e,(r=[{key:"slice",value:function(t,e){return(0,o.default)()?(0,i.default)(this._file.slice(t,e)):(t=this._file.slice(t,e),e=e>=this.size,Promise.resolve({value:t,done:e}))}},{key:"close",value:function(){}}])&&a(t.prototype,r),n&&a(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,r,n}()},{"./isCordova.js":8,"./readAsByteArray.js":9}],7:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}function u(t){return void 0===t?0:void 0!==t.size?t.size:t.length}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this._buffer=void 0,this._bufferOffset=0,this._reader=t,this._done=!1}return t=e,(r=[{key:"slice",value:function(t,e){return t<this._bufferOffset?Promise.reject(new Error("Requested data is before the reader's current offset")):this._readUntilEnoughDataOrDone(t,e)}},{key:"_readUntilEnoughDataOrDone",value:function(r,n){var t,o=this,e=n<=this._bufferOffset+u(this._buffer);return this._done||e?(t=null==(e=this._getDataFromBuffer(r,n))&&this._done,Promise.resolve({value:e,done:t})):this._reader.read().then(function(t){var e=t.value;return t.done?o._done=!0:void 0===o._buffer?o._buffer=e:o._buffer=function(t,e){if(t.concat)return t.concat(e);if(t instanceof Blob)return new Blob([t,e],{type:t.type});var r;if(t.set)return(r=new t.constructor(t.length+e.length)).set(t),r.set(e,t.length),r;throw new Error("Unknown data type")}(o._buffer,e),o._readUntilEnoughDataOrDone(r,n)})}},{key:"_getDataFromBuffer",value:function(t,e){t>this._bufferOffset&&(this._buffer=this._buffer.slice(t-this._bufferOffset),this._bufferOffset=t);var r=0===u(this._buffer);return this._done&&r?null:this._buffer.slice(0,e-t)}},{key:"close",value:function(){this._reader.cancel&&this._reader.cancel()}}])&&i(t.prototype,r),n&&i(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,r,n}()},{}],8:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){return"undefined"!=typeof window&&(void 0!==window.PhoneGap||void 0!==window.Cordova||void 0!==window.cordova)}},{}],9:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(t){return new Promise(function(e,r){var n=new FileReader;n.onload=function(){var t=new Uint8Array(n.result);e({value:t})},n.onerror=function(t){r(t)},n.readAsArrayBuffer(t)})}},{}],10:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(t){return new Promise(function(e,r){var n=new XMLHttpRequest;n.responseType="blob",n.onload=function(){var t=n.response;e(t)},n.onerror=function(t){r(t)},n.open("GET",t),n.send()})}},{}],11:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}Object.defineProperty(r,"__esModule",{value:!0}),r.canStoreURLs=r.WebStorageUrlStorage=void 0;var n=!1;try{var n="localStorage"in window,u="tusSupport",a=localStorage.getItem(u);localStorage.setItem(u,a),null===a&&localStorage.removeItem(u)}catch(t){if(t.code!==t.SECURITY_ERR&&t.code!==t.QUOTA_EXCEEDED_ERR)throw t;n=!1}r.canStoreURLs=n,r.WebStorageUrlStorage=function(){function t(){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function")}return e=t,(r=[{key:"findAllUploads",value:function(){var t=this._findEntries("tus::");return Promise.resolve(t)}},{key:"findUploadsByFingerprint",value:function(t){t=this._findEntries("tus::".concat(t,"::"));return Promise.resolve(t)}},{key:"removeUpload",value:function(t){return localStorage.removeItem(t),Promise.resolve()}},{key:"addUpload",value:function(t,e){var r=Math.round(1e12*Math.random()),t="tus::".concat(t,"::").concat(r);return localStorage.setItem(t,JSON.stringify(e)),Promise.resolve(t)}},{key:"_findEntries",value:function(t){for(var e=[],r=0;r<localStorage.length;r++){var n=localStorage.key(r);if(0===n.indexOf(t))try{var o=JSON.parse(localStorage.getItem(n));o.urlStorageKey=n,e.push(o)}catch(t){}}return e}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r,n}()},{}],12:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}function s(t,e,r){e=a(e);var n=t,e=u()?Reflect.construct(e,r||[],a(t).constructor):e.apply(t,r);if(e&&("object"===o(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");t=n;if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}function n(t){var r="function"==typeof Map?new Map:void 0;return function(t){if(null===t||!function(e){try{return-1!==Function.toString.call(e).indexOf("[native code]")}catch(t){return"function"==typeof e}}(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return function(t,e,r){var n;return u()?Reflect.construct.apply(null,arguments):((n=[null]).push.apply(n,e),e=new(t.bind.apply(t,n)),r&&l(e,r.prototype),e)}(t,arguments,a(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),l(e,t)}(t)}function u(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(u=function(){return!!t})()}function l(t,e){return(l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var f=function(t){function a(t){var e,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,i=this,u=a;if(i instanceof u)return(i=s(this,a,[t])).originalRequest=n,i.originalResponse=o,null!=(i.causingError=r)&&(t+=", caused by ".concat(r.toString())),null!=n&&(u=n.getHeader("X-Request-ID")||"n/a",r=n.getMethod(),n=n.getURL(),e=o?o.getStatus():"n/a",o=o?o.getBody()||"":"n/a",t+=", originated from request (method: ".concat(r,", url: ").concat(n,", response code: ").concat(e,", response text: ").concat(o,", request id: ").concat(u,")")),i.message=t,i;throw new TypeError("Cannot call a class as a function")}var e,r,n=a;if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");return n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),t&&l(n,t),n=a,e&&i(n.prototype,e),r&&i(n,r),Object.defineProperty(n,"prototype",{writable:!1}),n}(n(Error));r.default=f},{}],13:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.enableDebugLog=function(){n=!0};var n=!(r.log=function(t){n&&console.log(t)})},{}],14:[function(t,e,r){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,function(t){t=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==o(t)?t:t+""}(n.key),n)}}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(){function t(){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function")}return e=t,(r=[{key:"listAllUploads",value:function(){return Promise.resolve([])}},{key:"findUploadsByFingerprint",value:function(t){return Promise.resolve([])}},{key:"removeUpload",value:function(t){return Promise.resolve()}},{key:"addUpload",value:function(t,e){return Promise.resolve(null)}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r,n}()},{}],15:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=t("js-base64"),o=i(t("url-parse")),a=i(t("./error.js")),u=t("./logger.js"),s=i(t("./uuid.js"));function i(t){return t&&t.__esModule?t:{default:t}}function P(){P=function(){return u};var s,u={},t=Object.prototype,l=t.hasOwnProperty,f=Object.defineProperty||function(t,e,r){t[e]=r.value},e="function"==typeof Symbol?Symbol:{},n=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag";function i(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{i({},"")}catch(s){i=function(t,e,r){return t[e]=r}}function a(t,e,r,n){var o,i,u,a,e=e&&e.prototype instanceof v?e:v,e=Object.create(e.prototype),n=new O(n||[]);return f(e,"_invoke",{value:(o=t,i=r,u=n,a=p,function(t,e){if(a===d)throw Error("Generator is already running");if(a===y){if("throw"===t)throw e;return{value:s,done:!0}}for(u.method=t,u.arg=e;;){var r=u.delegate;if(r){r=function t(e,r){var n=r.method,o=e.iterator[n];if(o===s)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=s,t(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),g;n=c(o,e.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,g;o=n.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=s),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}(r,u);if(r){if(r===g)continue;return r}}if("next"===u.method)u.sent=u._sent=u.arg;else if("throw"===u.method){if(a===p)throw a=y,u.arg;u.dispatchException(u.arg)}else"return"===u.method&&u.abrupt("return",u.arg);a=d;r=c(o,i,u);if("normal"===r.type){if(a=u.done?y:h,r.arg===g)continue;return{value:r.arg,done:u.done}}"throw"===r.type&&(a=y,u.method="throw",u.arg=r.arg)}})}),e}function c(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}u.wrap=a;var p="suspendedStart",h="suspendedYield",d="executing",y="completed",g={};function v(){}function m(){}function b(){}var e={},w=(i(e,n,function(){return this}),Object.getPrototypeOf),w=w&&w(w(x([]))),_=(w&&w!==t&&l.call(w,n)&&(e=w),b.prototype=v.prototype=Object.create(e));function S(t){["next","throw","return"].forEach(function(e){i(t,e,function(t){return this._invoke(e,t)})})}function E(u,a){var e;f(this,"_invoke",{value:function(r,n){function t(){return new a(function(t,e){!function e(t,r,n,o){var i,t=c(u[t],u,r);if("throw"!==t.type)return(r=(i=t.arg).value)&&"object"==A(r)&&l.call(r,"__await")?a.resolve(r.__await).then(function(t){e("next",t,n,o)},function(t){e("throw",t,n,o)}):a.resolve(r).then(function(t){i.value=t,n(i)},function(t){return e("throw",t,n,o)});o(t.arg)}(r,n,t,e)})}return e=e?e.then(t,t):t()}})}function U(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(U,this),this.reset(!0)}function x(e){if(e||""===e){var r,t=e[n];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return r=-1,(t=function t(){for(;++r<e.length;)if(l.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=s,t.done=!0,t}).next=t}throw new TypeError(A(e)+" is not iterable")}return f(_,"constructor",{value:m.prototype=b,configurable:!0}),f(b,"constructor",{value:m,configurable:!0}),m.displayName=i(b,o,"GeneratorFunction"),u.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},u.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,i(t,o,"GeneratorFunction")),t.prototype=Object.create(_),t},u.awrap=function(t){return{__await:t}},S(E.prototype),i(E.prototype,r,function(){return this}),u.AsyncIterator=E,u.async=function(t,e,r,n,o){void 0===o&&(o=Promise);var i=new E(a(t,e,r,n),o);return u.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},S(_),i(_,o,"Generator"),i(_,n,function(){return this}),i(_,"toString",function(){return"[object Generator]"}),u.keys=function(t){var e,r=Object(t),n=[];for(e in r)n.push(e);return n.reverse(),function t(){for(;n.length;){var e=n.pop();if(e in r)return t.value=e,t.done=!1,t}return t.done=!0,t}},u.values=x,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=s,this.done=!1,this.delegate=null,this.method="next",this.arg=s,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&l.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=s)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(t,e){return i.type="throw",i.arg=r,n.next=t,e&&(n.method="next",n.arg=s),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var u=l.call(o,"catchLoc"),a=l.call(o,"finallyLoc");if(u&&a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!a)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}var i=(o=o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc?null:o)?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r,n,o=this.tryEntries[e];if(o.tryLoc===t)return"throw"===(r=o.completion).type&&(n=r.arg,j(o)),n}throw Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:x(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=s),g}},u}function l(t,e,r,n,o,i,u){try{var a=t[i](u),s=a.value}catch(t){return void r(t)}a.done?e(s):Promise.resolve(s).then(n,o)}function f(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,u,a=[],s=!0,l=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(a.push(n.value),a.length!==e);s=!0);}catch(t){l=!0,o=t}finally{try{if(!s&&null!=r.return&&(u=r.return(),Object(u)!==u))return}finally{if(l)throw o}}return a}}(t,e)||p(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(t){return(A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t,e){var r;if(t)return"string"==typeof t?c(t,e):"Map"===(r="Object"===(r=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:r)||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(t,e):void 0}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function h(e,t){var r,n=Object.keys(e);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(e),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)),n}function d(n){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?h(Object(o),!0).forEach(function(t){var e,r;e=n,r=o[t=t],(t=g(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):h(Object(o)).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(o,t))})}return n}function y(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,g(n.key),n)}}function g(t){t=function(t,e){if("object"!=A(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!=A(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==A(t)?t:t+""}var v="tus-v1",m="ietf-draft-03",b="ietf-draft-05",t={endpoint:null,uploadUrl:null,metadata:{},metadataForPartialUploads:{},fingerprint:null,uploadSize:null,onProgress:null,onChunkComplete:null,onSuccess:null,onError:null,onUploadUrlAvailable:null,overridePatchMethod:!1,headers:{},addRequestId:!1,onBeforeRequest:null,onAfterResponse:null,onShouldRetry:x,chunkSize:Number.POSITIVE_INFINITY,retryDelays:[0,1e3,3e3,5e3],parallelUploads:1,parallelUploadBoundaries:null,storeFingerprintForResuming:!0,removeFingerprintOnSuccess:!1,uploadLengthDeferred:!1,uploadDataDuringCreation:!1,urlStorage:null,fileReader:null,httpStack:null,protocol:v},w=function(){function c(t,e){if(!(this instanceof c))throw new TypeError("Cannot call a class as a function");"resume"in e&&console.log("tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead."),this.options=e,this.options.chunkSize=Number(this.options.chunkSize),this._urlStorage=this.options.urlStorage,this.file=t,this.url=null,this._req=null,this._fingerprint=null,this._urlStorageKey=null,this._offset=null,this._aborted=!1,this._size=null,this._source=null,this._retryAttempt=0,this._retryTimeout=null,this._offsetBeforeRetry=0,this._parallelUploads=null,this._parallelUploadUrls=null,this._deferred=!1}return t=c,r=[{key:"terminate",value:function(o){var i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},u=E("DELETE",o,i);return U(u,null,i).then(function(t){if(204!==t.getStatus())throw new a.default("tus: unexpected response while terminating upload",null,u,t)}).catch(function(t){var e,r,n;if(O(t=t instanceof a.default?t:new a.default("tus: failed to terminate upload",t,u,null),0,i))return e=i.retryDelays[0],r=i.retryDelays.slice(1),n=d(d({},i),{},{retryDelays:r}),new Promise(function(t){return setTimeout(t,e)}).then(function(){return c.terminate(o,n)});throw t})}}],(e=[{key:"findPreviousUploads",value:function(){var e=this;return this.options.fingerprint(this.file,this.options).then(function(t){return e._urlStorage.findUploadsByFingerprint(t)})}},{key:"resumeFromPreviousUpload",value:function(t){this.url=t.uploadUrl||null,this._parallelUploadUrls=t.parallelUploadUrls||null,this._urlStorageKey=t.urlStorageKey}},{key:"start",value:function(){var e=this,r=this.file;if(r)if([v,m,b].includes(this.options.protocol))if(this.options.endpoint||this.options.uploadUrl||this.url){var t=this.options.retryDelays;if(null!=t&&"[object Array]"!==Object.prototype.toString.call(t))this._emitError(new Error("tus: the `retryDelays` option must either be an array or null"));else{if(1<this.options.parallelUploads)for(var n=0,o=["uploadUrl","uploadSize","uploadLengthDeferred"];n<o.length;n++){var i=o[n];if(this.options[i])return void this._emitError(new Error("tus: cannot use the ".concat(i," option when parallelUploads is enabled")))}if(this.options.parallelUploadBoundaries){if(this.options.parallelUploads<=1)return void this._emitError(new Error("tus: cannot use the `parallelUploadBoundaries` option when `parallelUploads` is disabled"));if(this.options.parallelUploads!==this.options.parallelUploadBoundaries.length)return void this._emitError(new Error("tus: the `parallelUploadBoundaries` must have the same length as the value of `parallelUploads`"))}this.options.fingerprint(r,this.options).then(function(t){return null==t?(0,u.log)("No fingerprint was calculated meaning that the upload cannot be stored in the URL storage."):(0,u.log)("Calculated fingerprint: ".concat(t)),e._fingerprint=t,e._source||e.options.fileReader.openFile(r,e.options.chunkSize)}).then(function(t){if(e._source=t,e.options.uploadLengthDeferred)e._size=null;else if(null!=e.options.uploadSize){if(e._size=Number(e.options.uploadSize),Number.isNaN(e._size))return void e._emitError(new Error("tus: cannot convert `uploadSize` option into a number"))}else if(e._size=e._source.size,null==e._size)return void e._emitError(new Error("tus: cannot automatically derive upload's size from input. Specify it manually using the `uploadSize` option or use the `uploadLengthDeferred` option"));1<e.options.parallelUploads||null!=e._parallelUploadUrls?e._startParallelUpload():e._startSingleUpload()}).catch(function(t){e._emitError(t)})}}else this._emitError(new Error("tus: neither an endpoint or an upload URL is provided"));else this._emitError(new Error("tus: unsupported protocol ".concat(this.options.protocol)));else this._emitError(new Error("tus: no file or stream to upload provided"))}},{key:"_startParallelUpload",value:function(){var r,a=this,s=this._size,l=0,t=(this._parallelUploads=[],null!=this._parallelUploadUrls?this._parallelUploadUrls.length:this.options.parallelUploads),f=null!=(e=this.options.parallelUploadBoundaries)?e:function(t,e){for(var r=Math.floor(t/e),n=[],o=0;o<e;o++)n.push({start:r*o,end:r*(o+1)});return n[e-1].end=t,n}(this._source.size,t),e=(this._parallelUploadUrls&&f.forEach(function(t,e){t.uploadUrl=a._parallelUploadUrls[e]||null}),this._parallelUploadUrls=new Array(f.length),f.map(function(o,i){var u=0;return a._source.slice(o.start,o.end).then(function(t){var n=t.value;return new Promise(function(t,e){var t=d(d({},a.options),{},{uploadUrl:o.uploadUrl||null,storeFingerprintForResuming:!1,removeFingerprintOnSuccess:!1,parallelUploads:1,parallelUploadBoundaries:null,metadata:a.options.metadataForPartialUploads,headers:d(d({},a.options.headers),{},{"Upload-Concat":"partial"}),onSuccess:t,onError:e,onProgress:function(t){l=l-u+t,u=t,a._emitProgress(l,s)},onUploadUrlAvailable:function(){a._parallelUploadUrls[i]=r.url,a._parallelUploadUrls.filter(function(t){return Boolean(t)}).length===f.length&&a._saveUploadInUrlStorage()}}),r=new c(n,t);r.start(),a._parallelUploads.push(r)})})}));Promise.all(e).then(function(){(r=a._openRequest("POST",a.options.endpoint)).setHeader("Upload-Concat","final;".concat(a._parallelUploadUrls.join(" ")));var t=_(a.options.metadata);return""!==t&&r.setHeader("Upload-Metadata",t),a._sendRequest(r,null)}).then(function(t){var e;S(t.getStatus(),200)?null==(e=t.getHeader("Location"))?a._emitHttpError(r,t,"tus: invalid or missing Location header"):(a.url=R(a.options.endpoint,e),(0,u.log)("Created upload at ".concat(a.url)),a._emitSuccess(t)):a._emitHttpError(r,t,"tus: unexpected response while creating upload")}).catch(function(t){a._emitError(t)})}},{key:"_startSingleUpload",value:function(){this._aborted=!1,null!=this.url?((0,u.log)("Resuming upload from previous URL: ".concat(this.url)),this._resumeUpload()):null!=this.options.uploadUrl?((0,u.log)("Resuming upload from provided URL: ".concat(this.options.uploadUrl)),this.url=this.options.uploadUrl,this._resumeUpload()):((0,u.log)("Creating a new upload"),this._createUpload())}},{key:"abort",value:function(t){var e=this;if(null!=this._parallelUploads){var r,n=function(t,e){var r,n,o,i,u="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(u)return n=!(r=!0),{s:function(){u=u.call(t)},n:function(){var t=u.next();return r=t.done,t},e:function(t){n=!0,o=t},f:function(){try{r||null==u.return||u.return()}finally{if(n)throw o}}};if(Array.isArray(t)||(u=p(t))||e&&t&&"number"==typeof t.length)return u&&(t=u),i=0,{s:e=function(){},n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:e};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(this._parallelUploads);try{for(n.s();!(r=n.n()).done;)r.value.abort(t)}catch(t){n.e(t)}finally{n.f()}}return null!==this._req&&this._req.abort(),this._aborted=!0,null!=this._retryTimeout&&(clearTimeout(this._retryTimeout),this._retryTimeout=null),t&&null!=this.url?c.terminate(this.url,this.options).then(function(){return e._removeFromUrlStorage()}):Promise.resolve()}},{key:"_emitHttpError",value:function(t,e,r,n){this._emitError(new a.default(r,n,t,e))}},{key:"_emitError",value:function(t){var e,r=this;if(!this._aborted){if(null!=this.options.retryDelays)if(null!=this._offset&&this._offset>this._offsetBeforeRetry&&(this._retryAttempt=0),O(t,this._retryAttempt,this.options))return e=this.options.retryDelays[this._retryAttempt++],this._offsetBeforeRetry=this._offset,void(this._retryTimeout=setTimeout(function(){r.start()},e));if("function"!=typeof this.options.onError)throw t;this.options.onError(t)}}},{key:"_emitSuccess",value:function(t){this.options.removeFingerprintOnSuccess&&this._removeFromUrlStorage(),"function"==typeof this.options.onSuccess&&this.options.onSuccess({lastResponse:t})}},{key:"_emitProgress",value:function(t,e){"function"==typeof this.options.onProgress&&this.options.onProgress(t,e)}},{key:"_emitChunkComplete",value:function(t,e,r){"function"==typeof this.options.onChunkComplete&&this.options.onChunkComplete(t,e,r)}},{key:"_createUpload",value:function(){var r,t,n=this;this.options.endpoint?(r=this._openRequest("POST",this.options.endpoint),this.options.uploadLengthDeferred?(r.setHeader("Upload-Defer-Length","1"),this._deferred=!0):r.setHeader("Upload-Length","".concat(this._size)),""!==(t=_(this.options.metadata))&&r.setHeader("Upload-Metadata",t),(this.options.uploadDataDuringCreation&&!this.options.uploadLengthDeferred?(this._offset=0,this._addChunkToRequest(r)):(this.options.protocol!==m&&this.options.protocol!==b||r.setHeader("Upload-Complete","?0"),this._sendRequest(r,null))).then(function(t){var e;S(t.getStatus(),200)?null==(e=t.getHeader("Location"))?n._emitHttpError(r,t,"tus: invalid or missing Location header"):(n.url=R(n.options.endpoint,e),(0,u.log)("Created upload at ".concat(n.url)),"function"==typeof n.options.onUploadUrlAvailable&&n.options.onUploadUrlAvailable(),0===n._size?(n._emitSuccess(t),n._source.close()):n._saveUploadInUrlStorage().then(function(){n.options.uploadDataDuringCreation?n._handleUploadResponse(r,t):(n._offset=0,n._performUpload())})):n._emitHttpError(r,t,"tus: unexpected response while creating upload")}).catch(function(t){n._emitHttpError(r,null,"tus: failed to create upload",t)})):this._emitError(new Error("tus: unable to create upload because no endpoint is provided"))}},{key:"_resumeUpload",value:function(){var o=this,i=this._openRequest("HEAD",this.url);this._sendRequest(i,null).then(function(t){var e=t.getStatus();if(!S(e,200))return 423===e?void o._emitHttpError(i,t,"tus: upload is currently locked; retry later"):(S(e,400)&&o._removeFromUrlStorage(),o.options.endpoint?(o.url=null,void o._createUpload()):void o._emitHttpError(i,t,"tus: unable to resume upload (new upload cannot be created without an endpoint)"));var r,n=Number.parseInt(t.getHeader("Upload-Offset"),10);Number.isNaN(n)?o._emitHttpError(i,t,"tus: invalid or missing offset value"):(e=parseInt(xhr.getResponseHeader("Upload-Defer-Length"),10),o._deferred=1===e,r=Number.parseInt(t.getHeader("Upload-Length"),10),!Number.isNaN(r)||o._deferred||o.options.uploadLengthDeferred||o.options.protocol!==v?("function"==typeof o.options.onUploadUrlAvailable&&o.options.onUploadUrlAvailable(),o._saveUploadInUrlStorage().then(function(){n===r?(o._emitProgress(r,r),o._emitSuccess(t)):(o._offset=n,o._performUpload())})):o._emitHttpError(i,t,"tus: invalid or missing length value"))}).catch(function(t){o._emitHttpError(i,null,"tus: failed to resume upload",t)})}},{key:"_performUpload",value:function(){var e,r=this;this._aborted||(this.options.overridePatchMethod?(e=this._openRequest("POST",this.url)).setHeader("X-HTTP-Method-Override","PATCH"):e=this._openRequest("PATCH",this.url),e.setHeader("Upload-Offset","".concat(this._offset)),this._addChunkToRequest(e).then(function(t){S(t.getStatus(),200)?r._handleUploadResponse(e,t):r._emitHttpError(e,t,"tus: unexpected response while uploading chunk")}).catch(function(t){r._aborted||r._emitHttpError(e,null,"tus: failed to upload chunk at offset ".concat(r._offset),t)}))}},{key:"_addChunkToRequest",value:function(n){var o=this,e=this._offset,t=this._offset+this.options.chunkSize;return n.setProgressHandler(function(t){o._emitProgress(e+t,o._size)}),this.options.protocol===v?n.setHeader("Content-Type","application/offset+octet-stream"):this.options.protocol===b&&n.setHeader("Content-Type","application/partial-upload"),(t===Number.POSITIVE_INFINITY||t>this._size)&&!this.options.uploadLengthDeferred&&(t=this._size),this._source.slice(e,t).then(function(t){var e=t.value,t=t.done,r=null!=e&&e.size?e.size:0,r=(!o._deferred||o.options.uploadLengthDeferred&&!t||(o._size=o._offset+r,n.setHeader("Upload-Length","".concat(o._size)),o._deferred=!1),o._offset+r);return!o.options.uploadLengthDeferred&&t&&r!==o._size?Promise.reject(new Error("upload was configured with a size of ".concat(o._size," bytes, but the source is done after ").concat(r," bytes"))):null===e?o._sendRequest(n):(o.options.protocol!==m&&o.options.protocol!==b||n.setHeader("Upload-Complete",t?"?1":"?0"),o._emitProgress(o._offset,o._size),o._sendRequest(n,e))})}},{key:"_handleUploadResponse",value:function(t,e){var r=Number.parseInt(e.getHeader("Upload-Offset"),10);Number.isNaN(r)?this._emitHttpError(t,e,"tus: invalid or missing offset value"):(this._emitProgress(r,this._size),this._emitChunkComplete(r-this._offset,r,this._size),(this._offset=r)===this._size?(this._emitSuccess(e),this._source.close()):this._performUpload())}},{key:"_openRequest",value:function(t,e){t=E(t,e,this.options);return this._req=t}},{key:"_removeFromUrlStorage",value:function(){var e=this;this._urlStorageKey&&(this._urlStorage.removeUpload(this._urlStorageKey).catch(function(t){e._emitError(t)}),this._urlStorageKey=null)}},{key:"_saveUploadInUrlStorage",value:function(){var t,e=this;return this.options.storeFingerprintForResuming&&this._fingerprint&&null===this._urlStorageKey?(t={size:this._size,metadata:this.options.metadata,creationTime:(new Date).toString()},this._parallelUploads?t.parallelUploadUrls=this._parallelUploadUrls:t.uploadUrl=this.url,this._urlStorage.addUpload(this._fingerprint,t).then(function(t){e._urlStorageKey=t})):Promise.resolve()}},{key:"_sendRequest",value:function(t){return U(t,1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,this.options)}}])&&y(t.prototype,e),r&&y(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}();function _(t){return Object.entries(t).map(function(t){var t=f(t,2),e=t[0],t=t[1];return"".concat(e," ").concat(n.Base64.encode(String(t)))}).join(",")}function S(t,e){return e<=t&&t<e+100}function E(t,e,r){for(var n=r.httpStack.createRequest(t,e),t=(r.protocol===m?n.setHeader("Upload-Draft-Interop-Version","5"):r.protocol===b?n.setHeader("Upload-Draft-Interop-Version","6"):n.setHeader("Tus-Resumable","1.0.0"),r.headers||{}),o=0,i=Object.entries(t);o<i.length;o++){var u=f(i[o],2),a=u[0],u=u[1];n.setHeader(a,u)}return r.addRequestId&&(e=(0,s.default)(),n.setHeader("X-Request-ID",e)),n}function U(){return j.apply(this,arguments)}function j(){var a;return a=P().mark(function t(e,r,n){var o;return P().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if("function"==typeof n.onBeforeRequest)return t.next=3,n.onBeforeRequest(e);t.next=3;break;case 3:return t.next=5,e.send(r);case 5:if(o=t.sent,"function"==typeof n.onAfterResponse)return t.next=9,n.onAfterResponse(e,o);t.next=9;break;case 9:return t.abrupt("return",o);case 10:case"end":return t.stop()}},t)}),(j=function(){var t=this,u=arguments;return new Promise(function(e,r){var n=a.apply(t,u);function o(t){l(n,e,r,o,i,"next",t)}function i(t){l(n,e,r,o,i,"throw",t)}o(void 0)})}).apply(this,arguments)}function O(t,e,r){return!(null==r.retryDelays||e>=r.retryDelays.length||null==t.originalRequest)&&(r&&"function"==typeof r.onShouldRetry?r.onShouldRetry(t,e,r):x(t))}function x(t){var t=t.originalResponse?t.originalResponse.getStatus():0;return(!S(t,400)||409===t||423===t)&&(t=!0,t=("undefined"==typeof navigator||!1!==navigator.onLine)&&t)}function R(t,e){return new o.default(e,t).toString()}w.defaultOptions=t;r.default=w},{"./error.js":12,"./logger.js":13,"./uuid.js":16,"js-base64":20,"url-parse":23}],16:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})}},{}],17:[function(t,e,r){"use strict";r.byteLength=function(t){var t=f(t),e=t[0],t=t[1];return 3*(e+t)/4-t},r.toByteArray=function(t){var e,r,n=f(t),o=n[0],n=n[1],i=new l(function(t,e){return 3*(t+e)/4-e}(o,n)),u=0,a=0<n?o-4:o;for(r=0;r<a;r+=4)e=s[t.charCodeAt(r)]<<18|s[t.charCodeAt(r+1)]<<12|s[t.charCodeAt(r+2)]<<6|s[t.charCodeAt(r+3)],i[u++]=e>>16&255,i[u++]=e>>8&255,i[u++]=255&e;2===n&&(e=s[t.charCodeAt(r)]<<2|s[t.charCodeAt(r+1)]>>4,i[u++]=255&e);1===n&&(e=s[t.charCodeAt(r)]<<10|s[t.charCodeAt(r+1)]<<4|s[t.charCodeAt(r+2)]>>2,i[u++]=e>>8&255,i[u++]=255&e);return i},r.fromByteArray=function(t){for(var e,r=t.length,n=r%3,o=[],i=0,u=r-n;i<u;i+=16383)o.push(function(t,e,r){for(var n,o=[],i=e;i<r;i+=3)n=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),o.push(function(t){return a[t>>18&63]+a[t>>12&63]+a[t>>6&63]+a[63&t]}(n));return o.join("")}(t,i,u<i+16383?u:i+16383));1==n?(e=t[r-1],o.push(a[e>>2]+a[e<<4&63]+"==")):2==n&&(e=(t[r-2]<<8)+t[r-1],o.push(a[e>>10]+a[e>>4&63]+a[e<<2&63]+"="));return o.join("")};for(var a=[],s=[],l="undefined"!=typeof Uint8Array?Uint8Array:Array,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,i=n.length;o<i;++o)a[o]=n[o],s[n.charCodeAt(o)]=o;function f(t){var e=t.length;if(0<e%4)throw new Error("Invalid string. Length must be a multiple of 4");t=t.indexOf("="),e=(t=-1===t?e:t)===e?0:4-t%4;return[t,e]}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},{}],18:[function(k,t,L){!function(t){!function(){"use strict";var U=k("base64-js"),i=k("ieee754"),e=(L.Buffer=c,L.SlowBuffer=function(t){+t!=t&&(t=0);return c.alloc(+t)},L.INSPECT_MAX_BYTES=50,2147483647);function s(t){if(e<t)throw new RangeError('The value "'+t+'" is invalid for option "size"');t=new Uint8Array(t);return t.__proto__=c.prototype,t}function c(t,e,r){if("number"!=typeof t)return n(t,e,r);if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return u(t)}function n(t,e,r){if("string"==typeof t){var n=t,o=e;if(c.isEncoding(o="string"==typeof o&&""!==o?o:"utf8"))return i=0|p(n,o),u=s(i),u=(n=u.write(n,o))!==i?u.slice(0,n):u;throw new TypeError("Unknown encoding: "+o)}if(ArrayBuffer.isView(t))return l(t);if(null==t)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(A(t,ArrayBuffer)||t&&A(t.buffer,ArrayBuffer)){var i=t,n=e,u=r;if(n<0||i.byteLength<n)throw new RangeError('"offset" is outside of buffer bounds');if(i.byteLength<n+(u||0))throw new RangeError('"length" is outside of buffer bounds');return(i=void 0===n&&void 0===u?new Uint8Array(i):void 0===u?new Uint8Array(i,n):new Uint8Array(i,n,u)).__proto__=c.prototype,i}if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');o=t.valueOf&&t.valueOf();if(null!=o&&o!==t)return c.from(o,e,r);var a=function(t){{var e,r;if(c.isBuffer(t))return e=0|f(t.length),0!==(r=s(e)).length&&t.copy(r,0,0,e),r}if(void 0!==t.length)return"number"!=typeof t.length||R(t.length)?s(0):l(t);if("Buffer"===t.type&&Array.isArray(t.data))return l(t.data)}(t);if(a)return a;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return c.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function o(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function u(t){return o(t),s(t<0?0:0|f(t))}function l(t){for(var e=t.length<0?0:0|f(t.length),r=s(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function f(t){if(e<=t)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+e.toString(16)+" bytes");return 0|t}function p(t,e){if(c.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||A(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=2<arguments.length&&!0===arguments[2];if(!n&&0===r)return 0;for(var o=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return O(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return x(t).length;default:if(o)return n?-1:O(t).length;e=(""+e).toLowerCase(),o=!0}}function r(t,e,r){var n,o=!1;if((e=void 0===e||e<0?0:e)>this.length)return"";if((r=void 0===r||r>this.length?this.length:r)<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t=t||"utf8";;)switch(t){case"hex":var i=this,u=e,a=r,s=i.length;(!a||a<0||s<a)&&(a=s);for(var l="",f=u=!u||u<0?0:u;f<a;++f)l+=function(t){return t<16?"0"+t.toString(16):t.toString(16)}(i[f]);return l;case"utf8":case"utf-8":return j(this,e,r);case"ascii":var c=this,s=e,p=r,h="";p=Math.min(c.length,p);for(var d=s;d<p;++d)h+=String.fromCharCode(127&c[d]);return h;case"latin1":case"binary":var y=this,u=e,g=r,v="";g=Math.min(y.length,g);for(var m=u;m<g;++m)v+=String.fromCharCode(y[m]);return v;case"base64":return b=this,n=r,0===(w=e)&&n===b.length?U.fromByteArray(b):U.fromByteArray(b.slice(w,n));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":for(var b=e,w=r,_=this.slice(b,w),S="",E=0;E<_.length;E+=2)S+=String.fromCharCode(_[E]+256*_[E+1]);return S;default:if(o)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),o=!0}}function a(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function h(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):2147483647<r?r=2147483647:r<-2147483648&&(r=-2147483648),(r=(r=R(r=+r)?o?0:t.length-1:r)<0?t.length+r:r)>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=c.from(e,n)),c.isBuffer(e))return 0===e.length?-1:d(t,e,r,n,o);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?(o?Uint8Array.prototype.indexOf:Uint8Array.prototype.lastIndexOf).call(t,e,r):d(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function d(t,e,r,n,o){var i=1,u=t.length,a=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;u/=i=2,a/=2,r/=2}function s(t,e){return 1===i?t[e]:t.readUInt16BE(e*i)}if(o)for(var l=-1,f=r;f<u;f++)if(s(t,f)===s(e,-1===l?0:f-l)){if(f-(l=-1===l?f:l)+1===a)return l*i}else-1!==l&&(f-=f-l),l=-1;else for(f=r=u<r+a?u-a:r;0<=f;f--){for(var c=!0,p=0;p<a;p++)if(s(t,f+p)!==s(e,p)){c=!1;break}if(c)return f}return-1}function g(t,e,r,n){return P(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function v(t,e,r,n){return P(function(t,e){for(var r,n,o=[],i=0;i<t.length&&!((e-=2)<0);++i)r=t.charCodeAt(i),n=r>>8,o.push(r%256),o.push(n);return o}(e,t.length-r),t,r,n)}function j(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,u,a,s,l=t[o],f=null,c=239<l?4:223<l?3:191<l?2:1;if(o+c<=r)switch(c){case 1:l<128&&(f=l);break;case 2:128==(192&(i=t[o+1]))&&127<(s=(31&l)<<6|63&i)&&(f=s);break;case 3:i=t[o+1],u=t[o+2],128==(192&i)&&128==(192&u)&&2047<(s=(15&l)<<12|(63&i)<<6|63&u)&&(s<55296||57343<s)&&(f=s);break;case 4:i=t[o+1],u=t[o+2],a=t[o+3],128==(192&i)&&128==(192&u)&&128==(192&a)&&65535<(s=(15&l)<<18|(63&i)<<12|(63&u)<<6|63&a)&&s<1114112&&(f=s)}null===f?(f=65533,c=1):65535<f&&(n.push((f-=65536)>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=c}var p=n,h=p.length;if(h<=m)return String.fromCharCode.apply(String,p);for(var d="",y=0;y<h;)d+=String.fromCharCode.apply(String,p.slice(y,y+=m));return d}L.kMaxLength=e,(c.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()}catch(t){return!1}}())||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),c.poolSize=8192,c.from=n,c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,c.alloc=function(t,e,r){return e=e,r=r,o(t=t),!(t<=0)&&void 0!==e?"string"==typeof r?s(t).fill(e,r):s(t).fill(e):s(t)},c.allocUnsafe=u,c.allocUnsafeSlow=u,c.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==c.prototype},c.compare=function(t,e){if(A(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),A(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);if(void 0===e)for(o=e=0;o<t.length;++o)e+=t[o].length;for(var r=c.allocUnsafe(e),n=0,o=0;o<t.length;++o){var i=t[o];if(A(i,Uint8Array)&&(i=c.from(i)),!c.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,n),n+=i.length}return r},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)a(this,e,e+1);return this},c.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)a(this,e,e+3),a(this,e+1,e+2);return this},c.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)a(this,e,e+7),a(this,e+1,e+6),a(this,e+2,e+5),a(this,e+3,e+4);return this},c.prototype.toLocaleString=c.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?j(this,0,t):r.apply(this,arguments)},c.prototype.equals=function(t){if(c.isBuffer(t))return this===t||0===c.compare(this,t);throw new TypeError("Argument must be a Buffer")},c.prototype.inspect=function(){var t="",e=L.INSPECT_MAX_BYTES,t=this.toString("hex",0,e).replace(/(.{2})/g,"$1 ").trim();return this.length>e&&(t+=" ... "),"<Buffer "+t+">"},c.prototype.compare=function(t,e,r,n,o){if(A(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),(e=void 0===e?0:e)<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(o<=n&&r<=e)return 0;if(o<=n)return-1;if(r<=e)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),u=(r>>>=0)-(e>>>=0),a=Math.min(i,u),s=this.slice(n,o),l=t.slice(e,r),f=0;f<a;++f)if(s[f]!==l[f]){i=s[f],u=l[f];break}return i<u?-1:u<i?1:0},c.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},c.prototype.indexOf=function(t,e,r){return h(this,t,e,r,!0)},c.prototype.lastIndexOf=function(t,e,r){return h(this,t,e,r,!1)},c.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||o<r)&&(r=o),0<t.length&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n=n||"utf8";for(var i,u,a,s=!1;;)switch(n){case"hex":var l=this,f=t,c=e,p=r,h=(c=Number(c)||0,l.length-c);(!p||h<(p=Number(p)))&&(p=h),(h=f.length)/2<p&&(p=h/2);for(var d=0;d<p;++d){var y=parseInt(f.substr(2*d,2),16);if(R(y))return d;l[c+d]=y}return d;case"utf8":case"utf-8":return h=e,a=r,P(O(t,(u=this).length-h),u,h,a);case"ascii":return g(this,t,e,r);case"latin1":case"binary":return g(this,t,e,r);case"base64":return u=this,a=e,i=r,P(x(t),u,a,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var m=4096;function y(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(r<t+e)throw new RangeError("Trying to access beyond buffer length")}function b(t,e,r,n,o,i){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(o<e||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function w(t,e,r,n){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function _(t,e,r,n,o){return e=+e,r>>>=0,o||w(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function S(t,e,r,n,o){return e=+e,r>>>=0,o||w(t,0,r,8),i.write(t,e,r,n,52,8),r+8}c.prototype.slice=function(t,e){var r=this.length,r=((t=~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),e<t&&(e=t),this.subarray(t,e));return r.__proto__=c.prototype,r},c.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||y(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},c.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||y(t,e,this.length);for(var n=this[t+--e],o=1;0<e&&(o*=256);)n+=this[t+--e]*o;return n},c.prototype.readUInt8=function(t,e){return t>>>=0,e||y(t,1,this.length),this[t]},c.prototype.readUInt16LE=function(t,e){return t>>>=0,e||y(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUInt16BE=function(t,e){return t>>>=0,e||y(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUInt32LE=function(t,e){return t>>>=0,e||y(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUInt32BE=function(t,e){return t>>>=0,e||y(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||y(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return(o*=128)<=n&&(n-=Math.pow(2,8*e)),n},c.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||y(t,e,this.length);for(var n=e,o=1,i=this[t+--n];0<n&&(o*=256);)i+=this[t+--n]*o;return(o*=128)<=i&&(i-=Math.pow(2,8*e)),i},c.prototype.readInt8=function(t,e){return t>>>=0,e||y(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){t>>>=0,e||y(t,2,this.length);e=this[t]|this[t+1]<<8;return 32768&e?4294901760|e:e},c.prototype.readInt16BE=function(t,e){t>>>=0,e||y(t,2,this.length);e=this[t+1]|this[t]<<8;return 32768&e?4294901760|e:e},c.prototype.readInt32LE=function(t,e){return t>>>=0,e||y(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return t>>>=0,e||y(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readFloatLE=function(t,e){return t>>>=0,e||y(t,4,this.length),i.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return t>>>=0,e||y(t,4,this.length),i.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return t>>>=0,e||y(t,8,this.length),i.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return t>>>=0,e||y(t,8,this.length),i.read(this,t,!1,52,8)},c.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||b(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},c.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||b(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;0<=--o&&(i*=256);)this[e+o]=t/i&255;return e+r},c.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,1,255,0),this[e]=255&t,e+1},c.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},c.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeIntLE=function(t,e,r,n){t=+t,e>>>=0,n||b(this,t,e,r,(n=Math.pow(2,8*r-1))-1,-n);var o=0,i=1,u=0;for(this[e]=255&t;++o<r&&(i*=256);)t<0&&0===u&&0!==this[e+o-1]&&(u=1),this[e+o]=(t/i>>0)-u&255;return e+r},c.prototype.writeIntBE=function(t,e,r,n){t=+t,e>>>=0,n||b(this,t,e,r,(n=Math.pow(2,8*r-1))-1,-n);var o=r-1,i=1,u=0;for(this[e+o]=255&t;0<=--o&&(i*=256);)t<0&&0===u&&0!==this[e+o+1]&&(u=1),this[e+o]=(t/i>>0)-u&255;return e+r},c.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,1,127,-128),this[e]=255&(t=t<0?255+t+1:t),e+1},c.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},c.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||b(this,t,e,4,2147483647,-2147483648),this[e]=(t=t<0?4294967295+t+1:t)>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeFloatLE=function(t,e,r){return _(this,t,e,!0,r)},c.prototype.writeFloatBE=function(t,e,r){return _(this,t,e,!1,r)},c.prototype.writeDoubleLE=function(t,e,r){return S(this,t,e,!0,r)},c.prototype.writeDoubleBE=function(t,e,r){return S(this,t,e,!1,r)},c.prototype.copy=function(t,e,r,n){if(!c.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r=r||0,n||0===n||(n=this.length),e>=t.length&&(e=t.length),(n=0<n&&n<r?r:n)===r)return 0;if(0===t.length||0===this.length)return 0;if((e=e||0)<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length);var o=(n=t.length-e<n-r?t.length-e+r:n)-r;if(this===t&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(e,r,n);else if(this===t&&r<e&&e<n)for(var i=o-1;0<=i;--i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,n),e);return o},c.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);var o;1===t.length&&(o=t.charCodeAt(0),"utf8"===n&&o<128||"latin1"===n)&&(t=o)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");var i;if(!(r<=e))if(e>>>=0,r=void 0===r?this.length:r>>>0,"number"==typeof(t=t||0))for(i=e;i<r;++i)this[i]=t;else{var u=c.isBuffer(t)?t:c.from(t,n),a=u.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<r-e;++i)this[i+e]=u[i%a]}return this};var E=/[^+/0-9A-Za-z-_]/g;function O(t,e){e=e||1/0;for(var r,n=t.length,o=null,i=[],u=0;u<n;++u){if(55295<(r=t.charCodeAt(u))&&r<57344){if(!o){if(56319<r){-1<(e-=3)&&i.push(239,191,189);continue}if(u+1===n){-1<(e-=3)&&i.push(239,191,189);continue}o=r;continue}if(r<56320){-1<(e-=3)&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&-1<(e-=3)&&i.push(239,191,189);if(o=null,r<128){if(--e<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function x(t){return U.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(E,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function P(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}function A(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function R(t){return t!=t}}.call(this)}.call(this,k("buffer").Buffer)},{"base64-js":17,buffer:18,ieee754:19}],19:[function(t,e,r){r.read=function(t,e,r,n,o){var i,u,a=8*o-n-1,s=(1<<a)-1,l=s>>1,f=-7,c=r?o-1:0,p=r?-1:1,o=t[e+c];for(c+=p,i=o&(1<<-f)-1,o>>=-f,f+=a;0<f;i=256*i+t[e+c],c+=p,f-=8);for(u=i&(1<<-f)-1,i>>=-f,f+=n;0<f;u=256*u+t[e+c],c+=p,f-=8);if(0===i)i=1-l;else{if(i===s)return u?NaN:1/0*(o?-1:1);u+=Math.pow(2,n),i-=l}return(o?-1:1)*u*Math.pow(2,i-n)},r.write=function(t,e,r,n,o,i){var u,a,s=8*i-o-1,l=(1<<s)-1,f=l>>1,c=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,h=n?1:-1,i=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,u=l):(u=Math.floor(Math.log(e)/Math.LN2),e*(n=Math.pow(2,-u))<1&&(u--,n*=2),2<=(e+=1<=u+f?c/n:c*Math.pow(2,1-f))*n&&(u++,n/=2),l<=u+f?(a=0,u=l):1<=u+f?(a=(e*n-1)*Math.pow(2,o),u+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,o),u=0));8<=o;t[r+p]=255&a,p+=h,a/=256,o-=8);for(u=u<<o|a,s+=o;0<s;t[r+p]=255&u,p+=h,u/=256,s-=8);t[r+p-h]|=128*i}},{}],20:[function(t,i,u){!function(o,T){!function(){var t,e,r,n;t="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==o?o:this,e=function(){"use strict";function r(t){return t.replace(/=/g,"").replace(/[+\/]/g,function(t){return"+"==t?"-":"_"})}function t(t){for(var e,r,n,o="",i=t.length%3,u=0;u<t.length;){if(255<(e=t.charCodeAt(u++))||255<(r=t.charCodeAt(u++))||255<(n=t.charCodeAt(u++)))throw new TypeError("invalid character found");o+=w[(e=e<<16|r<<8|n)>>18&63]+w[e>>12&63]+w[e>>6&63]+w[63&e]}return i?o.slice(0,i-3)+"===".substring(i):o}function e(t,e){return(e=void 0===e?!1:e)?r(x(t)):x(t)}function n(t){var e;return t.length<2?(e=t.charCodeAt(0))<128?t:e<2048?E(192|e>>>6)+E(128|63&e):E(224|e>>>12&15)+E(128|e>>>6&63)+E(128|63&e):(e=65536+1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320),E(240|e>>>18&7)+E(128|e>>>12&63)+E(128|e>>>6&63)+E(128|63&e))}function o(t){return t.replace(P,n)}function i(t,e){return(e=void 0===e?!1:e)?r(A(t)):A(t)}function u(t){return i(t,!0)}function a(t){switch(t.length){case 4:var e=((7&t.charCodeAt(0))<<18|(63&t.charCodeAt(1))<<12|(63&t.charCodeAt(2))<<6|63&t.charCodeAt(3))-65536;return E(55296+(e>>>10))+E(56320+(1023&e));case 3:return E((15&t.charCodeAt(0))<<12|(63&t.charCodeAt(1))<<6|63&t.charCodeAt(2));default:return E((31&t.charCodeAt(0))<<6|63&t.charCodeAt(1))}}function s(t){return t.replace(R,a)}function l(t){if(t=t.replace(/\s+/g,""),!S.test(t))throw new TypeError("malformed base64.");t+="==".slice(2-(3&t.length));for(var e,r,n,o="",i=0;i<t.length;)e=_[t.charAt(i++)]<<18|_[t.charAt(i++)]<<12|(r=_[t.charAt(i++)])<<6|(n=_[t.charAt(i++)]),o+=64===r?E(e>>16&255):64===n?E(e>>16&255,e>>8&255):E(e>>16&255,e>>8&255,255&e);return o}function f(t){return L(c(t))}function c(t){return j(t.replace(/[-_]/g,function(t){return"-"==t?"+":"/"}))}function p(t){return B(c(t))}function h(t){return{value:t,enumerable:!1,writable:!0,configurable:!0}}function d(){function t(t,e){Object.defineProperty(String.prototype,t,h(e))}t("fromBase64",function(){return p(this)}),t("toBase64",function(t){return i(this,t)}),t("toBase64URI",function(){return i(this,!0)}),t("toBase64URL",function(){return i(this,!0)}),t("toUint8Array",function(){return f(this)})}function y(){function t(t,e){Object.defineProperty(Uint8Array.prototype,t,h(e))}t("toBase64",function(t){return e(this,t)}),t("toBase64URI",function(){return e(this,!0)}),t("toBase64URL",function(){return e(this,!0)})}var g,v="function"==typeof T,m="function"==typeof TextDecoder?new TextDecoder:void 0,b="function"==typeof TextEncoder?new TextEncoder:void 0,w=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="),_=(g={},w.forEach(function(t,e){return g[t]=e}),g),S=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,E=String.fromCharCode.bind(String),U="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(t){return new Uint8Array(Array.prototype.slice.call(t,0))},j=function(t){return t.replace(/[^A-Za-z0-9\+\/]/g,"")},O="function"==typeof btoa?function(t){return btoa(t)}:v?function(t){return T.from(t,"binary").toString("base64")}:t,x=v?function(t){return T.from(t).toString("base64")}:function(t){for(var e=[],r=0,n=t.length;r<n;r+=4096)e.push(E.apply(null,t.subarray(r,r+4096)));return O(e.join(""))},P=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,A=v?function(t){return T.from(t,"utf8").toString("base64")}:b?function(t){return x(b.encode(t))}:function(t){return O(o(t))},R=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,k="function"==typeof atob?function(t){return atob(j(t))}:v?function(t){return T.from(t,"base64").toString("binary")}:l,L=v?function(t){return U(T.from(t,"base64"))}:function(t){return U(k(t).split("").map(function(t){return t.charCodeAt(0)}))},B=v?function(t){return T.from(t,"base64").toString("utf8")}:m?function(t){return m.decode(L(t))}:function(t){return s(k(t))},C={version:"3.7.7",VERSION:"3.7.7",atob:k,atobPolyfill:l,btoa:O,btoaPolyfill:t,fromBase64:p,toBase64:i,encode:i,encodeURI:u,encodeURL:u,utob:o,btou:s,decode:p,isValid:function(t){return"string"==typeof t&&(t=t.replace(/\s+/g,"").replace(/={0,2}$/,""),!/[^\s0-9a-zA-Z\+/]/.test(t)||!/[^\s0-9a-zA-Z\-_]/.test(t))},fromUint8Array:e,toUint8Array:f,extendString:d,extendUint8Array:y,extendBuiltins:function(){d(),y()},Base64:{}};return Object.keys(C).forEach(function(t){return C.Base64[t]=C[t]}),C},"object"==typeof u&&void 0!==i?i.exports=e():(r=t.Base64,(n=e()).noConflict=function(){return t.Base64=r,n},t.Meteor&&(Base64=n),t.Base64=n)}.call(this)}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer)},{buffer:18}],21:[function(t,e,r){"use strict";var i=Object.prototype.hasOwnProperty;function u(t){try{return decodeURIComponent(t.replace(/\+/g," "))}catch(t){return null}}function a(t){try{return encodeURIComponent(t)}catch(t){return null}}r.stringify=function(t,e){var r,n,o=[];for(n in"string"!=typeof(e=e||"")&&(e="?"),t)i.call(t,n)&&((r=t[n])||null!=r&&!isNaN(r)||(r=""),n=a(n),r=a(r),null!==n)&&null!==r&&o.push(n+"="+r);return o.length?e+o.join("&"):""},r.parse=function(t){for(var e=/([^=?#&]+)=?([^&]*)/g,r={};o=e.exec(t);){var n=u(o[1]),o=u(o[2]);null===n||null===o||n in r||(r[n]=o)}return r}},{}],22:[function(t,e,r){"use strict";e.exports=function(t,e){if(e=e.split(":")[0],!(t=+t))return!1;switch(e){case"http":case"ws":return 80!==t;case"https":case"wss":return 443!==t;case"ftp":return 21!==t;case"gopher":return 70!==t;case"file":return!1}return 0!==t}},{}],23:[function(t,r,e){!function(u){!function(){"use strict";var p=t("requires-port"),h=t("querystringify"),e=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,d=/[\n\r\t]/g,o=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,a=/:\d+$/,s=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,y=/^[a-zA-Z]:/;function g(t){return(t||"").toString().replace(e,"")}var v=[["#","hash"],["?","query"],function(t,e){return b(e.protocol)?t.replace(/\\/g,"/"):t},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],i={hash:1,query:1};function m(t){var e,r="undefined"!=typeof window?window:void 0!==u?u:"undefined"!=typeof self?self:{},r=r.location||{},n={},r=typeof(t=t||r);if("blob:"===t.protocol)n=new _(unescape(t.pathname),{});else if("string"==r)for(e in n=new _(t,{}),i)delete n[e];else if("object"==r){for(e in t)e in i||(n[e]=t[e]);void 0===n.slashes&&(n.slashes=o.test(t.href))}return n}function b(t){return"file:"===t||"ftp:"===t||"http:"===t||"https:"===t||"ws:"===t||"wss:"===t}function w(t,e){t=(t=g(t)).replace(d,""),e=e||{};var r,t=s.exec(t),n=t[1]?t[1].toLowerCase():"",o=!!t[2],i=!!t[3],u=0;return o?u=i?(r=t[2]+t[3]+t[4],t[2].length+t[3].length):(r=t[2]+t[4],t[2].length):i?(r=t[3]+t[4],u=t[3].length):r=t[4],"file:"===n?2<=u&&(r=r.slice(2)):b(n)?r=t[4]:n?o&&(r=r.slice(2)):2<=u&&b(e.protocol)&&(r=t[4]),{protocol:n,slashes:o||b(n),slashesCount:u,rest:r}}function _(t,e,r){if(t=(t=g(t)).replace(d,""),!(this instanceof _))return new _(t,e,r);var n,o,i,u,a,s=v.slice(),l=typeof e,f=this,c=0;for("object"!=l&&"string"!=l&&(r=e,e=null),r&&"function"!=typeof r&&(r=h.parse),n=!(l=w(t||"",e=m(e))).protocol&&!l.slashes,f.slashes=l.slashes||n&&e.slashes,f.protocol=l.protocol||e.protocol||"",t=l.rest,("file:"===l.protocol&&(2!==l.slashesCount||y.test(t))||!l.slashes&&(l.protocol||l.slashesCount<2||!b(f.protocol)))&&(s[3]=[/(.*)/,"pathname"]);c<s.length;c++)"function"==typeof(i=s[c])?t=i(t,f):(o=i[0],a=i[1],o!=o?f[a]=t:"string"==typeof o?~(u="@"===o?t.lastIndexOf(o):t.indexOf(o))&&(t="number"==typeof i[2]?(f[a]=t.slice(0,u),t.slice(u+i[2])):(f[a]=t.slice(u),t.slice(0,u))):(u=o.exec(t))&&(f[a]=u[1],t=t.slice(0,u.index)),f[a]=f[a]||n&&i[3]&&e[a]||"",i[4]&&(f[a]=f[a].toLowerCase()));r&&(f.query=r(f.query)),n&&e.slashes&&"/"!==f.pathname.charAt(0)&&(""!==f.pathname||""!==e.pathname)&&(f.pathname=function(t,e){if(""===t)return e;for(var r=(e||"/").split("/").slice(0,-1).concat(t.split("/")),n=r.length,e=r[n-1],o=!1,i=0;n--;)"."===r[n]?r.splice(n,1):".."===r[n]?(r.splice(n,1),i++):i&&(0===n&&(o=!0),r.splice(n,1),i--);return o&&r.unshift(""),"."!==e&&".."!==e||r.push(""),r.join("/")}(f.pathname,e.pathname)),"/"!==f.pathname.charAt(0)&&b(f.protocol)&&(f.pathname="/"+f.pathname),p(f.port,f.protocol)||(f.host=f.hostname,f.port=""),f.username=f.password="",f.auth&&(~(u=f.auth.indexOf(":"))?(f.username=f.auth.slice(0,u),f.username=encodeURIComponent(decodeURIComponent(f.username)),f.password=f.auth.slice(u+1),f.password=encodeURIComponent(decodeURIComponent(f.password))):f.username=encodeURIComponent(decodeURIComponent(f.auth)),f.auth=f.password?f.username+":"+f.password:f.username),f.origin="file:"!==f.protocol&&b(f.protocol)&&f.host?f.protocol+"//"+f.host:"null",f.href=f.toString()}_.prototype={set:function(t,e,r){var n=this;switch(t){case"query":"string"==typeof e&&e.length&&(e=(r||h.parse)(e)),n[t]=e;break;case"port":n[t]=e,p(e,n.protocol)?e&&(n.host=n.hostname+":"+e):(n.host=n.hostname,n[t]="");break;case"hostname":n[t]=e,n.port&&(e+=":"+n.port),n.host=e;break;case"host":n[t]=e,a.test(e)?(e=e.split(":"),n.port=e.pop(),n.hostname=e.join(":")):(n.hostname=e,n.port="");break;case"protocol":n.protocol=e.toLowerCase(),n.slashes=!r;break;case"pathname":case"hash":e?(o="pathname"===t?"/":"#",n[t]=e.charAt(0)!==o?o+e:e):n[t]=e;break;case"username":case"password":n[t]=encodeURIComponent(e);break;case"auth":var o=e.indexOf(":");~o?(n.username=e.slice(0,o),n.username=encodeURIComponent(decodeURIComponent(n.username)),n.password=e.slice(o+1),n.password=encodeURIComponent(decodeURIComponent(n.password))):n.username=encodeURIComponent(decodeURIComponent(e))}for(var i=0;i<v.length;i++){var u=v[i];u[4]&&(n[u[1]]=n[u[1]].toLowerCase())}return n.auth=n.password?n.username+":"+n.password:n.username,n.origin="file:"!==n.protocol&&b(n.protocol)&&n.host?n.protocol+"//"+n.host:"null",n.href=n.toString(),n},toString:function(t){t&&"function"==typeof t||(t=h.stringify);var e=this,r=e.host,n=((n=e.protocol)&&":"!==n.charAt(n.length-1)&&(n+=":"),n+(e.protocol&&e.slashes||b(e.protocol)?"//":""));return e.username?(n+=e.username,e.password&&(n+=":"+e.password),n+="@"):e.password?n=n+(":"+e.password)+"@":"file:"!==e.protocol&&b(e.protocol)&&!r&&"/"!==e.pathname&&(n+="@"),(":"===r[r.length-1]||a.test(e.hostname)&&!e.port)&&(r+=":"),n+=r+e.pathname,(r="object"==typeof e.query?t(e.query):e.query)&&(n+="?"!==r.charAt(0)?"?"+r:r),e.hash&&(n+=e.hash),n}},_.extractProtocol=w,_.location=m,_.trimLeft=g,_.qs=h,r.exports=_}.call(this)}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:21,"requires-port":22}]},{},[4])(4)});
 //# sourceMappingURL=tus.min.js.map
\ No newline at end of file
diff --git a/node_modules/tus-js-client/dist/tus.min.js.map b/node_modules/tus-js-client/dist/tus.min.js.map
index 5823a47..fa91332 100644
--- a/node_modules/tus-js-client/dist/tus.min.js.map
+++ b/node_modules/tus-js-client/dist/tus.min.js.map
@@ -1 +1 @@
-{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/browser/fileReader.js","lib/browser/fileSignature.js","lib/browser/httpStack.js","lib/browser/index.js","lib/browser/isReactNative.js","lib/browser/sources/FileSource.js","lib/browser/sources/StreamSource.js","lib/browser/sources/isCordova.js","lib/browser/sources/readAsByteArray.js","lib/browser/uriToBlob.js","lib/browser/urlStorage.js","lib/error.js","lib/logger.js","lib/noopUrlStorage.js","lib/upload.js","lib/uuid.js","node_modules/base64-js/index.js","node_modules/buffer/index.js","node_modules/ieee754/index.js","node_modules/js-base64/base64.js","node_modules/querystringify/index.js","node_modules/requires-port/index.js","node_modules/url-parse/index.js"],"names":["f","exports","module","define","amd","window","global","self","this","tus","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_isReactNative","_interopRequireDefault","_uriToBlob","_FileSource","_StreamSource","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_regeneratorRuntime","Object","hasOwnProperty","defineProperty","value","asyncIterator","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","h","s","done","method","arg","delegate","maybeInvokeDelegate","TypeError","y","tryCatch","type","resultName","next","nextLoc","sent","_sent","dispatchException","abrupt","l","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","callInvokeWithMethodAndArg","invoke","resolve","__await","then","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_defineProperties","target","props","descriptor","toPrimitive","String","Number","FileReader","Constructor","protoProps","fn","_callee","input","chunkSize","blob","_context","uri","t0","concat","size","read","isFinite","_openFile","args","arguments","apply","err","undefined","_x","_x2","staticProps","file","options","exifHash","exif","str","hash","_char","charCodeAt","JSON","stringify","endpoint","join","lastModified","_createClass","XHRHttpStack","_classCallCheck","url","Request","_xhr","XMLHttpRequest","open","_method","_url","_headers","header","setRequestHeader","progressHandler","upload","onprogress","lengthComputable","loaded","_this","body","onload","Response","onerror","send","abort","xhr","status","getResponseHeader","responseText","_error","_logger","_noopUrlStorage","_upload","_fileReader","_fileSignature","_httpStack","_urlStorage","_toPropertyKey","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","ReferenceError","Boolean","valueOf","bind","_setPrototypeOf","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","getOwnPropertyDescriptors","defineProperties","defaultOptions","httpStack","fileReader","urlStorage","canStoreURLs","WebStorageUrlStorage","fingerprint","Upload","_BaseUpload","instance","_inherits","subClass","superClass","terminate","isSupported","Blob","navigator","product","toLowerCase","_isCordova","_readAsByteArray","FileSource","_file","start","end","len","blobOrArray","StreamSource","reader","_buffer","_bufferOffset","_reader","_done","_readUntilEnoughDataOrDone","hasEnoughData","_getDataFromBuffer","_ref","b","set","hasAllDataBeenRead","cancel","PhoneGap","Cordova","cordova","chunk","Uint8Array","result","readAsArrayBuffer","responseType","response","hasStorage","originalValue","localStorage","getItem","setItem","removeItem","SECURITY_ERR","QUOTA_EXCEEDED_ERR","results","_findEntries","urlStorageKey","id","Math","round","random","prefix","_key","indexOf","parse","_e","DetailedError","_Error","message","causingErr","req","res","originalRequest","originalResponse","causingError","toString","requestId","getHeader","getMethod","getURL","getStatus","getBody","_wrapNativeSuper","isEnabled","msg","console","log","NoopUrlStorage","_fingerprint","_urlStorageKey","_jsBase","_urlParse","_uuid","_slicedToArray","arr","Array","isArray","_unsupportedIterableToArray","minLen","_arrayLikeToArray","from","test","arr2","PROTOCOL_TUS_V1","PROTOCOL_IETF_DRAFT_03","uploadUrl","metadata","metadataForPartialUploads","uploadSize","onProgress","onChunkComplete","onSuccess","onError","onUploadUrlAvailable","overridePatchMethod","headers","addRequestId","onBeforeRequest","onAfterResponse","onShouldRetry","defaultOnShouldRetry","POSITIVE_INFINITY","retryDelays","parallelUploads","parallelUploadBoundaries","storeFingerprintForResuming","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","protocol","BaseUpload","_req","_offset","_aborted","_size","_source","_retryAttempt","_retryTimeout","_offsetBeforeRetry","_parallelUploads","_parallelUploadUrls","openRequest","sendRequest","delay","remainingDelays","newOptions","shouldRetry","setTimeout","findUploadsByFingerprint","previousUpload","parallelUploadUrls","_this2","includes","_emitError","_i","_arr","optionName","openFile","source","_startParallelUpload","_startSingleUpload","_this3","totalSize","totalProgress","partCount","parts","_this$options$paralle","partSize","floor","uploads","part","index","map","lastPartProgress","Upload-Concat","newPartProgress","_emitProgress","_saveUploadInUrlStorage","all","_openRequest","setHeader","encodeMetadata","_sendRequest","location","inStatusCategory","_emitHttpError","resolveUrl","_emitSuccess","_resumeUpload","_createUpload","shouldTerminate","_this4","_step","_iterator","allowArrayLike","normalCompletion","didErr","it","step","_e2","F","clearTimeout","_removeFromUrlStorage","_this5","lastResponse","bytesSent","bytesTotal","bytesAccepted","_this6","_addChunkToRequest","close","_handleUploadResponse","_performUpload","_this7","offset","parseInt","_this8","_this9","setProgressHandler","_ref2","valueSize","newSize","_emitChunkComplete","_this10","removeUpload","storedUpload","_this11","creationTime","Date","addUpload","entries","_ref3","_ref4","Base64","encode","category","createRequest","_i2","_Object$entries","_Object$entries$_i","_sendRequest2","retryAttempt","online","onLine","origin","link","replace","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","curByte","revLookup","fromByteArray","uint8","extraBytes","len2","output","num","lookup","base64","ieee754","K_MAX_LENGTH","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","createBuffer","RangeError","buf","encodingOrOffset","allocUnsafe","fromString","string","encoding","isEncoding","actual","write","ArrayBuffer","isView","fromArrayLike","isInstance","buffer","fromArrayBuffer","array","byteOffset","isBuffer","checked","copy","numberIsNaN","data","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","out","utf8Slice","asciiSlice","ret","min","fromCharCode","latin1Slice","utf16leSlice","bytes","swap","m","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","j","asciiWrite","blitBuffer","byteArray","ucs2Write","units","hi","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","foo","get","species","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","max","trim","thisStart","thisEnd","thisCopy","targetCopy","remaining","hexWrite","strLen","parsed","substr","toJSON","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","INVALID_BASE64_RE","Infinity","leadSurrogate","split","src","dst","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","factory","_Base64","gBase64","_mkUriSafe","m0","btoaPolyfill","bin","c0","c1","c2","asc","pad","b64chs","u32","substring","fromUint8Array","u8a","urlsafe","_fromUint8Array","cb_utob","cc","_fromCC","utob","re_utob","_encode","encodeURI","cb_btou","cccc","btou","re_btou","atobPolyfill","b64re","u24","r1","r2","b64tab","toUint8Array","_toUint8Array","_unURI","_tidyB64","decode","_decode","_noEnum","extendString","_add","extendUint8Array","tab","_hasBuffer","_TD","TextDecoder","_TE","TextEncoder","_U8Afrom","_btoa","btoa","strs","_atob","atob","version","VERSION","fromBase64","toBase64","encodeURL","isValid","extendBuiltins","k","noConflict","Meteor","has","decodeURIComponent","encodeURIComponent","pairs","query","parser","exec","port","required","qs","controlOrWhitespace","CRHTLF","slashes","protocolre","windowsDriveLetter","trimLeft","rules","address","isSpecial","ignore","lolcation","loc","globalVar","finaldestination","Url","unescape","pathname","href","scheme","extractProtocol","rest","match","forwardSlashes","otherSlashes","slashesCount","relative","instruction","instructions","extracted","base","path","last","unshift","up","splice","host","hostname","username","password","auth","char","ins"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/browser/fileReader.js","lib/browser/fileSignature.js","lib/browser/httpStack.js","lib/browser/index.js","lib/browser/isReactNative.js","lib/browser/sources/FileSource.js","lib/browser/sources/StreamSource.js","lib/browser/sources/isCordova.js","lib/browser/sources/readAsByteArray.js","lib/browser/uriToBlob.js","lib/browser/urlStorage.js","lib/error.js","lib/logger.js","lib/noopUrlStorage.js","lib/upload.js","lib/uuid.js","node_modules/base64-js/index.js","node_modules/buffer/index.js","node_modules/ieee754/index.js","node_modules/js-base64/base64.js","node_modules/querystringify/index.js","node_modules/requires-port/index.js","node_modules/url-parse/index.js"],"names":["f","exports","module","define","amd","window","global","self","this","tus","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_isReactNative","_interopRequireDefault","_uriToBlob","_FileSource","_StreamSource","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_regeneratorRuntime","Object","hasOwnProperty","defineProperty","value","asyncIterator","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","h","s","done","method","arg","delegate","maybeInvokeDelegate","TypeError","y","tryCatch","type","resultName","next","nextLoc","sent","_sent","dispatchException","abrupt","l","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","callInvokeWithMethodAndArg","invoke","resolve","__await","then","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_defineProperties","target","props","descriptor","toPrimitive","String","Number","FileReader","Constructor","protoProps","fn","_callee","input","chunkSize","blob","_context","uri","t0","concat","size","read","isFinite","_openFile","args","arguments","apply","err","undefined","_x","_x2","staticProps","file","options","exifHash","exif","str","hash","_char","charCodeAt","JSON","stringify","endpoint","join","lastModified","_createClass","XHRHttpStack","_classCallCheck","url","Request","_xhr","XMLHttpRequest","open","_method","_url","_headers","header","setRequestHeader","progressHandler","upload","onprogress","lengthComputable","loaded","_this","body","onload","Response","onerror","send","abort","xhr","status","getResponseHeader","responseText","_error","_logger","_noopUrlStorage","_upload","_fileReader","_fileSignature","_httpStack","_urlStorage","_toPropertyKey","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","ReferenceError","Boolean","valueOf","bind","_setPrototypeOf","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","getOwnPropertyDescriptors","defineProperties","defaultOptions","httpStack","fileReader","urlStorage","canStoreURLs","WebStorageUrlStorage","fingerprint","Upload","_BaseUpload","instance","_inherits","subClass","superClass","terminate","isSupported","Blob","navigator","product","toLowerCase","_isCordova","_readAsByteArray","FileSource","_file","start","end","len","blobOrArray","StreamSource","reader","_buffer","_bufferOffset","_reader","_done","_readUntilEnoughDataOrDone","hasEnoughData","_getDataFromBuffer","_ref","b","set","hasAllDataBeenRead","cancel","PhoneGap","Cordova","cordova","chunk","Uint8Array","result","readAsArrayBuffer","responseType","response","hasStorage","originalValue","localStorage","getItem","setItem","removeItem","SECURITY_ERR","QUOTA_EXCEEDED_ERR","results","_findEntries","urlStorageKey","id","Math","round","random","prefix","_key","indexOf","parse","_e","DetailedError","_Error","message","causingErr","req","res","originalRequest","originalResponse","causingError","toString","requestId","getHeader","getMethod","getURL","getStatus","getBody","_wrapNativeSuper","isEnabled","msg","console","log","NoopUrlStorage","_fingerprint","_urlStorageKey","_jsBase","_urlParse","_uuid","_slicedToArray","arr","Array","isArray","_unsupportedIterableToArray","minLen","_arrayLikeToArray","from","test","arr2","PROTOCOL_TUS_V1","PROTOCOL_IETF_DRAFT_03","PROTOCOL_IETF_DRAFT_05","uploadUrl","metadata","metadataForPartialUploads","uploadSize","onProgress","onChunkComplete","onSuccess","onError","onUploadUrlAvailable","overridePatchMethod","headers","addRequestId","onBeforeRequest","onAfterResponse","onShouldRetry","defaultOnShouldRetry","POSITIVE_INFINITY","retryDelays","parallelUploads","parallelUploadBoundaries","storeFingerprintForResuming","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","protocol","BaseUpload","_req","_offset","_aborted","_size","_source","_retryAttempt","_retryTimeout","_offsetBeforeRetry","_parallelUploads","_parallelUploadUrls","_deferred","openRequest","sendRequest","delay","remainingDelays","newOptions","shouldRetry","setTimeout","findUploadsByFingerprint","previousUpload","parallelUploadUrls","_this2","includes","_emitError","_i","_arr","optionName","openFile","source","_startParallelUpload","_startSingleUpload","_this3","totalSize","totalProgress","partCount","parts","_this$options$paralle","partSize","floor","uploads","part","index","map","lastPartProgress","Upload-Concat","newPartProgress","_emitProgress","_saveUploadInUrlStorage","all","_openRequest","setHeader","encodeMetadata","_sendRequest","location","inStatusCategory","_emitHttpError","resolveUrl","_emitSuccess","_resumeUpload","_createUpload","shouldTerminate","_this4","_step","_iterator","allowArrayLike","normalCompletion","didErr","it","step","_e2","F","clearTimeout","_removeFromUrlStorage","_this5","lastResponse","bytesSent","bytesTotal","bytesAccepted","_this6","_addChunkToRequest","close","_handleUploadResponse","_performUpload","_this7","offset","parseInt","deferLength","_this8","_this9","setProgressHandler","_ref2","valueSize","newSize","_emitChunkComplete","_this10","removeUpload","storedUpload","_this11","creationTime","Date","addUpload","entries","_ref3","_ref4","Base64","encode","category","createRequest","_i2","_Object$entries","_Object$entries$_i","_sendRequest2","retryAttempt","online","onLine","origin","link","replace","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","curByte","revLookup","fromByteArray","uint8","extraBytes","len2","output","num","lookup","base64","ieee754","K_MAX_LENGTH","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","createBuffer","RangeError","buf","encodingOrOffset","allocUnsafe","fromString","string","encoding","isEncoding","actual","write","ArrayBuffer","isView","fromArrayLike","isInstance","buffer","fromArrayBuffer","array","byteOffset","isBuffer","checked","copy","numberIsNaN","data","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","out","utf8Slice","asciiSlice","ret","min","fromCharCode","latin1Slice","utf16leSlice","bytes","swap","m","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","j","asciiWrite","blitBuffer","byteArray","ucs2Write","units","hi","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","foo","get","species","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","max","trim","thisStart","thisEnd","thisCopy","targetCopy","remaining","hexWrite","strLen","parsed","substr","toJSON","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","INVALID_BASE64_RE","Infinity","leadSurrogate","split","src","dst","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","factory","_Base64","gBase64","_mkUriSafe","m0","btoaPolyfill","bin","c0","c1","c2","asc","pad","b64chs","u32","substring","fromUint8Array","u8a","urlsafe","_fromUint8Array","cb_utob","cc","_fromCC","utob","re_utob","_encode","encodeURI","cb_btou","cccc","btou","re_btou","atobPolyfill","b64re","u24","r1","r2","b64tab","toUint8Array","_toUint8Array","_unURI","_tidyB64","decode","_decode","_noEnum","extendString","_add","extendUint8Array","tab","_hasBuffer","_TD","TextDecoder","_TE","TextEncoder","_U8Afrom","_btoa","btoa","strs","_atob","atob","version","VERSION","fromBase64","toBase64","encodeURL","isValid","extendBuiltins","k","noConflict","Meteor","has","decodeURIComponent","encodeURIComponent","pairs","query","parser","exec","port","required","qs","controlOrWhitespace","CRHTLF","slashes","protocolre","windowsDriveLetter","trimLeft","rules","address","isSpecial","ignore","lolcation","loc","globalVar","finaldestination","Url","unescape","pathname","href","scheme","extractProtocol","rest","match","forwardSlashes","otherSlashes","slashesCount","relative","instruction","instructions","extracted","base","path","last","unshift","up","splice","host","hostname","username","password","auth","char","ins"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/tus-js-client/lib.es5/upload.js b/node_modules/tus-js-client/lib.es5/upload.js
index 84942d6..21f36bb 100644
--- a/node_modules/tus-js-client/lib.es5/upload.js
+++ b/node_modules/tus-js-client/lib.es5/upload.js
@@ -526,6 +526,7 @@ function _toPrimitive(t, r) {
 }
 var PROTOCOL_TUS_V1 = 'tus-v1';
 var PROTOCOL_IETF_DRAFT_03 = 'ietf-draft-03';
+var PROTOCOL_IETF_DRAFT_05 = 'ietf-draft-05';
 var defaultOptions = {
   endpoint: null,
   uploadUrl: null,
@@ -619,6 +620,9 @@ var BaseUpload = /*#__PURE__*/function () {
     // An array of upload URLs which are used for uploading the different
     // parts, if the parallelUploads option is used.
     this._parallelUploadUrls = null;
+
+    // The remote upload resource is deferred
+    this._deferred = false;
   }
 
   /**
@@ -655,7 +659,7 @@ var BaseUpload = /*#__PURE__*/function () {
         this._emitError(new Error('tus: no file or stream to upload provided'));
         return;
       }
-      if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03].includes(this.options.protocol)) {
+      if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03, PROTOCOL_IETF_DRAFT_05].includes(this.options.protocol)) {
         this._emitError(new Error("tus: unsupported protocol ".concat(this.options.protocol)));
         return;
       }
@@ -1042,6 +1046,7 @@ var BaseUpload = /*#__PURE__*/function () {
       var req = this._openRequest('POST', this.options.endpoint);
       if (this.options.uploadLengthDeferred) {
         req.setHeader('Upload-Defer-Length', '1');
+        this._deferred = true;
       } else {
         req.setHeader('Upload-Length', "".concat(this._size));
       }
@@ -1056,7 +1061,7 @@ var BaseUpload = /*#__PURE__*/function () {
         this._offset = 0;
         promise = this._addChunkToRequest(req);
       } else {
-        if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+        if (this.options.protocol === PROTOCOL_IETF_DRAFT_03 || this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
           req.setHeader('Upload-Complete', '?0');
         }
         promise = this._sendRequest(req, null);
@@ -1141,8 +1146,10 @@ var BaseUpload = /*#__PURE__*/function () {
           _this7._emitHttpError(req, res, 'tus: invalid or missing offset value');
           return;
         }
+        var deferLength = parseInt(xhr.getResponseHeader("Upload-Defer-Length"), 10);
+        _this7._deferred = deferLength === 1;
         var length = Number.parseInt(res.getHeader('Upload-Length'), 10);
-        if (Number.isNaN(length) && !_this7.options.uploadLengthDeferred && _this7.options.protocol === PROTOCOL_TUS_V1) {
+        if (Number.isNaN(length) && !_this7._deferred && !_this7.options.uploadLengthDeferred && _this7.options.protocol === PROTOCOL_TUS_V1) {
           _this7._emitHttpError(req, res, 'tus: invalid or missing length value');
           return;
         }
@@ -1225,7 +1232,11 @@ var BaseUpload = /*#__PURE__*/function () {
       req.setProgressHandler(function (bytesSent) {
         _this9._emitProgress(start + bytesSent, _this9._size);
       });
-      req.setHeader('Content-Type', 'application/offset+octet-stream');
+      if (this.options.protocol === PROTOCOL_TUS_V1) {
+        req.setHeader('Content-Type', 'application/offset+octet-stream');
+      } else if (this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
+        req.setHeader('Content-Type', 'application/partial-upload');
+      }
 
       // The specified chunkSize may be Infinity or the calcluated end position
       // may exceed the file's size. In both cases, we limit the end position to
@@ -1241,9 +1252,10 @@ var BaseUpload = /*#__PURE__*/function () {
         // If the upload length is deferred, the upload size was not specified during
         // upload creation. So, if the file reader is done reading, we know the total
         // upload size and can tell the tus server.
-        if (_this9.options.uploadLengthDeferred && done) {
+        if (_this9._deferred && (!_this9.options.uploadLengthDeferred || done)) {
           _this9._size = _this9._offset + valueSize;
-          req.setHeader('Upload-Length', "".concat(_this9._size));
+          req.setHeader("Upload-Length", "".concat(_this9._size));
+          _this9._deferred = false;
         }
 
         // The specified uploadSize might not match the actual amount of data that a source
@@ -1258,7 +1270,7 @@ var BaseUpload = /*#__PURE__*/function () {
         if (value === null) {
           return _this9._sendRequest(req);
         }
-        if (_this9.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+        if (_this9.options.protocol === PROTOCOL_IETF_DRAFT_03 || _this9.options.protocol === PROTOCOL_IETF_DRAFT_05) {
           req.setHeader('Upload-Complete', done ? '?1' : '?0');
         }
         _this9._emitProgress(_this9._offset, _this9._size);
@@ -1431,6 +1443,8 @@ function openRequest(method, url, options) {
   var req = options.httpStack.createRequest(method, url);
   if (options.protocol === PROTOCOL_IETF_DRAFT_03) {
     req.setHeader('Upload-Draft-Interop-Version', '5');
+  } else if (options.protocol === PROTOCOL_IETF_DRAFT_05) {
+    req.setHeader('Upload-Draft-Interop-Version', '6');
   } else {
     req.setHeader('Tus-Resumable', '1.0.0');
   }
diff --git a/node_modules/tus-js-client/lib.esm/upload.js b/node_modules/tus-js-client/lib.esm/upload.js
index c2e8a98..c4ae045 100644
--- a/node_modules/tus-js-client/lib.esm/upload.js
+++ b/node_modules/tus-js-client/lib.esm/upload.js
@@ -24,6 +24,7 @@ import { log } from './logger.js';
 import uuid from './uuid.js';
 var PROTOCOL_TUS_V1 = 'tus-v1';
 var PROTOCOL_IETF_DRAFT_03 = 'ietf-draft-03';
+var PROTOCOL_IETF_DRAFT_05 = 'ietf-draft-05';
 var defaultOptions = {
   endpoint: null,
   uploadUrl: null,
@@ -117,6 +118,9 @@ var BaseUpload = /*#__PURE__*/function () {
     // An array of upload URLs which are used for uploading the different
     // parts, if the parallelUploads option is used.
     this._parallelUploadUrls = null;
+
+    // The remote upload resource is deferred
+    this._deferred = false;
   }
 
   /**
@@ -153,7 +157,7 @@ var BaseUpload = /*#__PURE__*/function () {
         this._emitError(new Error('tus: no file or stream to upload provided'));
         return;
       }
-      if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03].includes(this.options.protocol)) {
+      if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03, PROTOCOL_IETF_DRAFT_05].includes(this.options.protocol)) {
         this._emitError(new Error("tus: unsupported protocol ".concat(this.options.protocol)));
         return;
       }
@@ -540,6 +544,7 @@ var BaseUpload = /*#__PURE__*/function () {
       var req = this._openRequest('POST', this.options.endpoint);
       if (this.options.uploadLengthDeferred) {
         req.setHeader('Upload-Defer-Length', '1');
+        this._deferred = true;
       } else {
         req.setHeader('Upload-Length', "".concat(this._size));
       }
@@ -554,7 +559,7 @@ var BaseUpload = /*#__PURE__*/function () {
         this._offset = 0;
         promise = this._addChunkToRequest(req);
       } else {
-        if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+        if (this.options.protocol === PROTOCOL_IETF_DRAFT_03 || this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
           req.setHeader('Upload-Complete', '?0');
         }
         promise = this._sendRequest(req, null);
@@ -639,8 +644,10 @@ var BaseUpload = /*#__PURE__*/function () {
           _this7._emitHttpError(req, res, 'tus: invalid or missing offset value');
           return;
         }
+        var deferLength = parseInt(xhr.getResponseHeader("Upload-Defer-Length"), 10);
+        _this7._deferred = deferLength === 1;
         var length = Number.parseInt(res.getHeader('Upload-Length'), 10);
-        if (Number.isNaN(length) && !_this7.options.uploadLengthDeferred && _this7.options.protocol === PROTOCOL_TUS_V1) {
+        if (Number.isNaN(length) && !_this7._deferred && !_this7.options.uploadLengthDeferred && _this7.options.protocol === PROTOCOL_TUS_V1) {
           _this7._emitHttpError(req, res, 'tus: invalid or missing length value');
           return;
         }
@@ -723,7 +730,11 @@ var BaseUpload = /*#__PURE__*/function () {
       req.setProgressHandler(function (bytesSent) {
         _this9._emitProgress(start + bytesSent, _this9._size);
       });
-      req.setHeader('Content-Type', 'application/offset+octet-stream');
+      if (this.options.protocol === PROTOCOL_TUS_V1) {
+        req.setHeader('Content-Type', 'application/offset+octet-stream');
+      } else if (this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
+        req.setHeader('Content-Type', 'application/partial-upload');
+      }
 
       // The specified chunkSize may be Infinity or the calcluated end position
       // may exceed the file's size. In both cases, we limit the end position to
@@ -739,9 +750,10 @@ var BaseUpload = /*#__PURE__*/function () {
         // If the upload length is deferred, the upload size was not specified during
         // upload creation. So, if the file reader is done reading, we know the total
         // upload size and can tell the tus server.
-        if (_this9.options.uploadLengthDeferred && done) {
+        if (_this9._deferred && (!_this9.options.uploadLengthDeferred || done)) {
           _this9._size = _this9._offset + valueSize;
-          req.setHeader('Upload-Length', "".concat(_this9._size));
+          req.setHeader("Upload-Length", "".concat(_this9._size));
+          _this9._deferred = false;
         }
 
         // The specified uploadSize might not match the actual amount of data that a source
@@ -756,7 +768,7 @@ var BaseUpload = /*#__PURE__*/function () {
         if (value === null) {
           return _this9._sendRequest(req);
         }
-        if (_this9.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+        if (_this9.options.protocol === PROTOCOL_IETF_DRAFT_03 || _this9.options.protocol === PROTOCOL_IETF_DRAFT_05) {
           req.setHeader('Upload-Complete', done ? '?1' : '?0');
         }
         _this9._emitProgress(_this9._offset, _this9._size);
@@ -929,6 +941,8 @@ function openRequest(method, url, options) {
   var req = options.httpStack.createRequest(method, url);
   if (options.protocol === PROTOCOL_IETF_DRAFT_03) {
     req.setHeader('Upload-Draft-Interop-Version', '5');
+  } else if (options.protocol === PROTOCOL_IETF_DRAFT_05) {
+    req.setHeader('Upload-Draft-Interop-Version', '6');
   } else {
     req.setHeader('Tus-Resumable', '1.0.0');
   }
diff --git a/node_modules/tus-js-client/lib/index.d.ts b/node_modules/tus-js-client/lib/index.d.ts
index 4a94eea..31c2bc5 100644
--- a/node_modules/tus-js-client/lib/index.d.ts
+++ b/node_modules/tus-js-client/lib/index.d.ts
@@ -7,9 +7,12 @@ export const defaultOptions: UploadOptions &
 
 // TODO: Consider using { read: () => Promise<{ done: boolean; value?: any; }>; } as type
 export class Upload {
-  constructor(file: File | Blob | Pick<ReadableStreamDefaultReader, 'read'>, options: UploadOptions)
+  constructor(
+    file: File | Blob | Buffer | Pick<ReadableStreamDefaultReader, 'read'>,
+    options: UploadOptions,
+  )
 
-  file: File | Blob | Pick<ReadableStreamDefaultReader, 'read'>
+  file: File | Blob | Buffer | Pick<ReadableStreamDefaultReader, 'read'>
   options: UploadOptions
   url: string | null
 
@@ -77,6 +80,9 @@ interface PreviousUpload {
   size: number | null
   metadata: { [key: string]: string }
   creationTime: string
+  urlStorageKey: string
+  uploadUrl: string | null
+  parallelUploadUrls: string[] | null
 }
 
 interface FileReader {
diff --git a/node_modules/tus-js-client/lib/upload.js b/node_modules/tus-js-client/lib/upload.js
index dfaff25..7faf100 100644
--- a/node_modules/tus-js-client/lib/upload.js
+++ b/node_modules/tus-js-client/lib/upload.js
@@ -6,6 +6,7 @@ import uuid from './uuid.js'
 
 const PROTOCOL_TUS_V1 = 'tus-v1'
 const PROTOCOL_IETF_DRAFT_03 = 'ietf-draft-03'
+const PROTOCOL_IETF_DRAFT_05 = 'ietf-draft-05'
 
 const defaultOptions = {
   endpoint: null,
@@ -108,6 +109,9 @@ class BaseUpload {
     // An array of upload URLs which are used for uploading the different
     // parts, if the parallelUploads option is used.
     this._parallelUploadUrls = null    
+
+    // The remote upload resource is deferred
+    this._deferred = false
   }
 
   /**
@@ -176,7 +180,11 @@ class BaseUpload {
       return
     }
 
-    if (![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03].includes(this.options.protocol)) {
+    if (
+      ![PROTOCOL_TUS_V1, PROTOCOL_IETF_DRAFT_03, PROTOCOL_IETF_DRAFT_05].includes(
+        this.options.protocol,
+      )
+    ) {
       this._emitError(new Error(`tus: unsupported protocol ${this.options.protocol}`))
       return
     }
@@ -581,6 +589,7 @@ class BaseUpload {
 
     if (this.options.uploadLengthDeferred) {
       req.setHeader('Upload-Defer-Length', '1')
+      this._deferred = true
     } else {
       req.setHeader('Upload-Length', `${this._size}`)
     }
@@ -596,7 +605,10 @@ class BaseUpload {
       this._offset = 0
       promise = this._addChunkToRequest(req)
     } else {
-      if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+      if (
+        this.options.protocol === PROTOCOL_IETF_DRAFT_03 ||
+        this.options.protocol === PROTOCOL_IETF_DRAFT_05
+      ) {
         req.setHeader('Upload-Complete', '?0')
       }
       promise = this._sendRequest(req, null)
@@ -696,9 +708,16 @@ class BaseUpload {
           return
         }
 
+        const deferLength = parseInt(
+          xhr.getResponseHeader("Upload-Defer-Length"),
+          10
+        );
+        this._deferred = deferLength === 1;
+
         const length = Number.parseInt(res.getHeader('Upload-Length'), 10)
         if (
           Number.isNaN(length) &&
+          !this._deferred &&
           !this.options.uploadLengthDeferred &&
           this.options.protocol === PROTOCOL_TUS_V1
         ) {
@@ -791,7 +810,11 @@ class BaseUpload {
       this._emitProgress(start + bytesSent, this._size)
     })
 
-    req.setHeader('Content-Type', 'application/offset+octet-stream')
+    if (this.options.protocol === PROTOCOL_TUS_V1) {
+      req.setHeader('Content-Type', 'application/offset+octet-stream')
+    } else if (this.options.protocol === PROTOCOL_IETF_DRAFT_05) {
+      req.setHeader('Content-Type', 'application/partial-upload')
+    }
 
     // The specified chunkSize may be Infinity or the calcluated end position
     // may exceed the file's size. In both cases, we limit the end position to
@@ -809,9 +832,10 @@ class BaseUpload {
       // If the upload length is deferred, the upload size was not specified during
       // upload creation. So, if the file reader is done reading, we know the total
       // upload size and can tell the tus server.
-      if (this.options.uploadLengthDeferred && done) {
-        this._size = this._offset + valueSize
-        req.setHeader('Upload-Length', `${this._size}`)
+      if (this._deferred && (!this.options.uploadLengthDeferred || done)) {
+        this._size = this._offset + valueSize;
+        req.setHeader("Upload-Length", `${this._size}`);
+        this._deferred = false;
       }
 
       // The specified uploadSize might not match the actual amount of data that a source
@@ -832,7 +856,10 @@ class BaseUpload {
         return this._sendRequest(req)
       }
 
-      if (this.options.protocol === PROTOCOL_IETF_DRAFT_03) {
+      if (
+        this.options.protocol === PROTOCOL_IETF_DRAFT_03 ||
+        this.options.protocol === PROTOCOL_IETF_DRAFT_05
+      ) {
         req.setHeader('Upload-Complete', done ? '?1' : '?0')
       }
       this._emitProgress(this._offset, this._size)
@@ -968,6 +995,8 @@ function openRequest(method, url, options) {
 
   if (options.protocol === PROTOCOL_IETF_DRAFT_03) {
     req.setHeader('Upload-Draft-Interop-Version', '5')
+  } else if (options.protocol === PROTOCOL_IETF_DRAFT_05) {
+    req.setHeader('Upload-Draft-Interop-Version', '6')
   } else {
     req.setHeader('Tus-Resumable', '1.0.0')
   }
