diff --git a/node_modules/use-disposable/lib/index.cjs b/node_modules/use-disposable/lib/index.cjs
index 01472ce..4219200 100644
--- a/node_modules/use-disposable/lib/index.cjs
+++ b/node_modules/use-disposable/lib/index.cjs
@@ -39,13 +39,11 @@ module.exports = __toCommonJS(src_exports);
 var React = __toESM(require("react"), 1);
 var getCurrentOwner = () => {
   try {
-    return React["".concat(
-      "__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE"
-    )].A.getOwner();
+    return React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.A.getOwner();
   } catch {
   }
   try {
-    return React["".concat("__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED")].ReactCurrentOwner.current;
+    return React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
   } catch {
     if (process.env.NODE_ENV !== "production") {
       console.error(
@@ -101,13 +99,21 @@ function useStrictEffect(effect, deps) {
 var React3 = __toESM(require("react"), 1);
 var memoSet = /* @__PURE__ */ new WeakSet();
 function useStrictMemo(factory, deps) {
+  const factoryResultRef = React3.useRef(null);
+  const reactMajorVersion = React3.useMemo(() => {
+    return Number(React3.version.split(".")[0]);
+  }, [React3.version]);
   return React3.useMemo(() => {
     const currentOwner = getCurrentOwner();
     if (!memoSet.has(currentOwner)) {
       memoSet.add(currentOwner);
-      return null;
+      if (reactMajorVersion < 19) {
+        return null;
+      }
+      factoryResultRef.current = factory();
+      return factoryResultRef.current;
     }
-    return factory();
+    return reactMajorVersion < 19 ? factory() : factoryResultRef.current;
   }, deps);
 }
 
@@ -131,4 +137,4 @@ function useDisposable(factory, deps) {
   useDisposable,
   useIsStrictMode
 });
-//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/node_modules/use-disposable/lib/index.js b/node_modules/use-disposable/lib/index.js
index e094173..2b92cc5 100644
--- a/node_modules/use-disposable/lib/index.js
+++ b/node_modules/use-disposable/lib/index.js
@@ -2,13 +2,11 @@
 import * as React from "react";
 var getCurrentOwner = () => {
   try {
-    return React["".concat(
-      "__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE"
-    )].A.getOwner();
+    return React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.A.getOwner();
   } catch {
   }
   try {
-    return React["".concat("__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED")].ReactCurrentOwner.current;
+    return React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
   } catch {
     if (process.env.NODE_ENV !== "production") {
       console.error(
@@ -64,13 +62,21 @@ function useStrictEffect(effect, deps) {
 import * as React3 from "react";
 var memoSet = /* @__PURE__ */ new WeakSet();
 function useStrictMemo(factory, deps) {
+  const factoryResultRef = React3.useRef(null);
+  const reactMajorVersion = React3.useMemo(() => {
+    return Number(React3.version.split(".")[0]);
+  }, [React3.version]);
   return React3.useMemo(() => {
     const currentOwner = getCurrentOwner();
     if (!memoSet.has(currentOwner)) {
       memoSet.add(currentOwner);
-      return null;
+      if (reactMajorVersion < 19) {
+        return null;
+      }
+      factoryResultRef.current = factory();
+      return factoryResultRef.current;
     }
-    return factory();
+    return reactMajorVersion < 19 ? factory() : factoryResultRef.current;
   }, deps);
 }
 
@@ -93,4 +99,4 @@ export {
   useDisposable,
   useIsStrictMode
 };
-//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
