diff --git a/node_modules/vite-express/dist/main.d.ts b/node_modules/vite-express/dist/main.d.ts
index af60c85..ce044e9 100644
--- a/node_modules/vite-express/dist/main.d.ts
+++ b/node_modules/vite-express/dist/main.d.ts
@@ -1,15 +1,16 @@
-import express from "express";
+import express, { RequestHandler } from "express";
 import core from "express-serve-static-core";
 import { ExpressStaticGzipOptions } from "express-static-gzip";
 import http from "http";
 import https from "https";
-import type { HmrOptions } from "vite";
+import type { HmrOptions, ViteDevServer } from "vite";
 type ViteConfig = {
     root: string;
     base: string;
     build: {
         outDir: string;
     };
+    expressBase?: string | string[];
     server?: {
         hmr?: boolean | HmrOptions;
     };
@@ -19,27 +20,40 @@ declare enum Verbosity {
     ErrorsOnly = 1,
     Normal = 2
 }
-declare const Config: {
+type ConfigurationOptions = {
     mode: "production" | "development";
     inlineViteConfig: Partial<ViteConfig> | undefined;
     viteConfigFile: string | undefined;
-    ignorePaths: undefined | RegExp | ((path: string, req: express.Request) => boolean);
-    transformer: undefined | ((html: string, req: express.Request) => string | Promise<string>);
+    ignorePaths: RegExp | ((path: string, req: express.Request) => boolean) | undefined;
+    transformer: ((html: string, req: express.Request) => string | Promise<string>) | undefined;
     verbosity: Verbosity;
 };
-type ConfigurationOptions = Partial<typeof Config>;
-declare function getViteConfig(): Promise<ViteConfig>;
-declare function config(config: ConfigurationOptions): void;
-declare function bind(app: core.Express, server: http.Server | https.Server, callback?: () => void): Promise<void>;
-declare function listen(app: core.Express, port: number, callback?: () => void): http.Server<typeof http.IncomingMessage, typeof http.ServerResponse>;
-declare function build(): Promise<void>;
-declare const _default: {
-    config: typeof config;
-    bind: typeof bind;
-    listen: typeof listen;
-    build: typeof build;
-    static: (options?: ExpressStaticGzipOptions) => express.RequestHandler<core.ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
-    getViteConfig: typeof getViteConfig;
-    Verbosity: typeof Verbosity;
-};
-export = _default;
+export declare class ViteExpress {
+    _State: {
+        viteConfig: ViteConfig | undefined;
+        staticOptions: ExpressStaticGzipOptions | undefined;
+    };
+    Config: ConfigurationOptions;
+    clearState(): void;
+    info(msg: string, minimalVerbosity?: Verbosity): void;
+    error(msg: string): void;
+    getTransformedHTML(html: string, req: express.Request): Promise<string>;
+    getDefaultViteConfig(): ViteConfig;
+    getViteConfigPath(): string;
+    resolveConfig(): Promise<ViteConfig>;
+    getViteConfig(): Promise<ViteConfig>;
+    getDistPath(): Promise<string>;
+    serveStatic(): Promise<RequestHandler>;
+    stubMiddleware: RequestHandler;
+    injectStaticMiddleware(app: core.Express, middleware: RequestHandler): Promise<void>;
+    isIgnoredPath(path: string, req: express.Request): boolean | RegExpMatchArray | null;
+    findTemplateFilePath(reqPath: string, root: string): string | undefined;
+    injectViteHTMLMiddleware(app: core.Express, server: ViteDevServer): Promise<void>;
+    injectHTMLMiddleware(app: core.Express): Promise<void>;
+    startServer(server: http.Server | https.Server): Promise<ViteDevServer>;
+    config(config: Partial<ConfigurationOptions>): void;
+    bind(app: core.Express, server: http.Server | https.Server, callback?: () => void): Promise<void>;
+    listen(app: core.Express, port: number, callback?: () => void): http.Server<typeof http.IncomingMessage, typeof http.ServerResponse>;
+    build(): Promise<void>;
+}
+export default ViteExpress;
diff --git a/node_modules/vite-express/dist/main.js b/node_modules/vite-express/dist/main.js
index 72d8e45..88bcef4 100644
--- a/node_modules/vite-express/dist/main.js
+++ b/node_modules/vite-express/dist/main.js
@@ -1,5 +1,7 @@
 'use strict';
 
+Object.defineProperty(exports, '__esModule', { value: true });
+
 var expressStaticGzip = require('express-static-gzip');
 var fs = require('fs');
 var path = require('path');
@@ -43,295 +45,283 @@ var Verbosity;
     Verbosity[Verbosity["ErrorsOnly"] = 1] = "ErrorsOnly";
     Verbosity[Verbosity["Normal"] = 2] = "Normal";
 })(Verbosity || (Verbosity = {}));
-const _State = {
-    viteConfig: undefined,
-    staticOptions: undefined,
-};
-function clearState() {
-    _State.viteConfig = undefined;
-}
-const Config = {
-    mode: (process.env.NODE_ENV === "production"
-        ? "production"
-        : "development"),
-    inlineViteConfig: undefined,
-    viteConfigFile: undefined,
-    ignorePaths: undefined,
-    transformer: undefined,
-    verbosity: Verbosity.Normal,
-};
-function info(msg, minimalVerbosity = Verbosity.Normal) {
-    if (Config.verbosity < minimalVerbosity)
-        return;
-    const timestamp = new Date().toLocaleString("en-US").split(",")[1].trim();
-    console.log(`${pc.dim(timestamp)} ${pc.bold(pc.cyan("[vite-express]"))} ${pc.green(msg)}`);
-}
-function error(msg) {
-    info(pc.red(msg), Verbosity.ErrorsOnly);
-}
-function getTransformedHTML(html, req) {
-    return __awaiter(this, void 0, void 0, function* () {
-        return Config.transformer ? Config.transformer(html, req) : html;
-    });
-}
-function getDefaultViteConfig() {
-    return {
-        root: process.cwd(),
-        base: "/",
-        build: { outDir: "dist" },
-    };
-}
-function getViteConfigPath() {
-    if (Config.viteConfigFile && fs.existsSync(Config.viteConfigFile))
-        return Config.viteConfigFile;
-    else if (fs.existsSync("vite.config.js"))
-        return "vite.config.js";
-    else if (fs.existsSync("vite.config.ts"))
-        return "vite.config.ts";
-    throw new Error("Unable to locate Vite config");
-}
-function resolveConfig() {
-    return __awaiter(this, void 0, void 0, function* () {
-        var _a, _b, _c;
-        if (Config.inlineViteConfig) {
-            info(`${pc.yellow("Inline config")} detected, ignoring ${pc.yellow("Vite config file")}`);
-            return Object.assign(Object.assign({}, getDefaultViteConfig()), Config.inlineViteConfig);
-        }
-        try {
-            const { resolveConfig } = yield import('vite');
+class ViteExpress {
+    constructor() {
+        this._State = {
+            viteConfig: undefined,
+            staticOptions: undefined,
+        };
+        this.Config = {
+            mode: process.env.NODE_ENV === "production" ? "production" : "development",
+            inlineViteConfig: undefined,
+            viteConfigFile: undefined,
+            ignorePaths: undefined,
+            transformer: undefined,
+            verbosity: Verbosity.Normal,
+        };
+        this.stubMiddleware = (req, res, next) => next();
+    }
+    clearState() {
+        this._State.viteConfig = undefined;
+    }
+    info(msg, minimalVerbosity = Verbosity.Normal) {
+        if (this.Config.verbosity < minimalVerbosity)
+            return;
+        const timestamp = new Date().toLocaleString("en-US").split(",")[1].trim();
+        console.log(`${pc.dim(timestamp)} ${pc.bold(pc.cyan("[vite-express]"))} ${pc.green(msg)}`);
+    }
+    error(msg) {
+        this.info(pc.red(msg), Verbosity.ErrorsOnly);
+    }
+    getTransformedHTML(html, req) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.Config.transformer ? this.Config.transformer(html, req) : html;
+        });
+    }
+    getDefaultViteConfig() {
+        return {
+            root: process.cwd(),
+            base: "/",
+            build: { outDir: "dist" },
+        };
+    }
+    getViteConfigPath() {
+        if (this.Config.viteConfigFile && fs.existsSync(this.Config.viteConfigFile))
+            return this.Config.viteConfigFile;
+        else if (fs.existsSync("vite.config.js"))
+            return "vite.config.js";
+        else if (fs.existsSync("vite.config.ts"))
+            return "vite.config.ts";
+        throw new Error("Unable to locate Vite config");
+    }
+    resolveConfig() {
+        return __awaiter(this, void 0, void 0, function* () {
+            var _a, _b, _c;
+            if (this.Config.inlineViteConfig) {
+                this.info(`${pc.yellow("Inline config")} detected, ignoring ${pc.yellow("Vite config file")}`);
+                return Object.assign(Object.assign({}, this.getDefaultViteConfig()), this.Config.inlineViteConfig);
+            }
             try {
-                const config = yield resolveConfig({
-                    configFile: Config.viteConfigFile,
-                }, "build");
-                info(`Using ${pc.yellow("Vite")} to resolve the ${pc.yellow("config file")}`);
-                return config;
+                const { resolveConfig } = yield import('vite');
+                try {
+                    const config = yield resolveConfig({
+                        configFile: this.Config.viteConfigFile,
+                    }, "build");
+                    this.info(`Using ${pc.yellow("Vite")} to resolve the ${pc.yellow("config file")}`);
+                    return config;
+                }
+                catch (e) {
+                    console.error(e);
+                    this.error(`Unable to use ${pc.yellow("Vite")}, running in ${pc.yellow("viteless")} mode`);
+                }
             }
-            catch (e) {
-                console.error(e);
-                error(`Unable to use ${pc.yellow("Vite")}, running in ${pc.yellow("viteless")} mode`);
+            catch (_d) {
+                /* empty */
             }
-        }
-        catch (_d) {
-            /* empty */
-        }
-        try {
-            const config = fs.readFileSync(getViteConfigPath(), "utf8");
-            const root = (_a = config.match(/"?root"?\s*:\s*"([^"]+)"/)) === null || _a === void 0 ? void 0 : _a[1];
-            const base = (_b = config.match(/"?base"?\s*:\s*"([^"]+)"/)) === null || _b === void 0 ? void 0 : _b[1];
-            const outDir = (_c = config.match(/"?outDir"?\s*:\s*"([^"]+)"/)) === null || _c === void 0 ? void 0 : _c[1];
-            const defaultConfig = getDefaultViteConfig();
-            return {
-                root: root !== null && root !== void 0 ? root : defaultConfig.root,
-                base: base !== null && base !== void 0 ? base : defaultConfig.base,
-                build: { outDir: outDir !== null && outDir !== void 0 ? outDir : defaultConfig.build.outDir },
-            };
-        }
-        catch (_e) {
-            error(`Unable to locate ${pc.yellow("vite.config.*s file")}, using default options`);
-            return getDefaultViteConfig();
-        }
-    });
-}
-function getViteConfig() {
-    return __awaiter(this, void 0, void 0, function* () {
-        if (!_State.viteConfig) {
-            _State.viteConfig = yield resolveConfig();
-        }
-        return _State.viteConfig;
-    });
-}
-function getDistPath() {
-    return __awaiter(this, void 0, void 0, function* () {
-        const config = yield getViteConfig();
-        return path.resolve(config.root, config.build.outDir);
-    });
-}
-function serveStatic() {
-    return __awaiter(this, void 0, void 0, function* () {
-        const distPath = yield getDistPath();
-        if (!fs.existsSync(distPath)) {
-            error(`${`Static files at ${pc.gray(distPath)} not found!`}`);
-            info(`${pc.yellow(`Did you forget to run ${pc.bold(pc.green("vite build"))} command?`)}`);
-        }
-        else {
-            info(`${pc.green(`Serving static files from ${pc.gray(distPath)}`)}`);
-        }
-        return expressStaticGzip(distPath, Object.assign({ index: false, serveStatic: { redirect: false } }, _State.staticOptions));
-    });
-}
-const stubMiddleware = (req, res, next) => next();
-function injectStaticMiddleware(app, middleware) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const config = yield getViteConfig();
-        app.use(config.base, (req, res, next) => req.path.endsWith(".html") && !req.originalUrl.includes("?html-proxy")
-            ? next()
-            : middleware(req, res, next));
-        const router = (() => {
             try {
-                return app.router;
+                const config = fs.readFileSync(this.getViteConfigPath(), "utf8");
+                const root = (_a = config.match(/"?root"?\s*:\s*"([^"]+)"/)) === null || _a === void 0 ? void 0 : _a[1];
+                const base = (_b = config.match(/"?base"?\s*:\s*"([^"]+)"/)) === null || _b === void 0 ? void 0 : _b[1];
+                const outDir = (_c = config.match(/"?outDir"?\s*:\s*"([^"]+)"/)) === null || _c === void 0 ? void 0 : _c[1];
+                const defaultConfig = this.getDefaultViteConfig();
+                return {
+                    root: root !== null && root !== void 0 ? root : defaultConfig.root,
+                    base: base !== null && base !== void 0 ? base : defaultConfig.base,
+                    build: { outDir: outDir !== null && outDir !== void 0 ? outDir : defaultConfig.build.outDir },
+                };
             }
-            catch (_a) {
-                return app._router;
+            catch (_e) {
+                this.error(`Unable to locate ${pc.yellow("vite.config.*s file")}, using default options`);
+                return this.getDefaultViteConfig();
             }
-        })();
-        const stubMiddlewareLayer = router.stack.find((layer) => layer.handle === stubMiddleware);
-        if (stubMiddlewareLayer !== undefined) {
-            const serveStaticLayer = router.stack.pop();
-            router.stack = router.stack.map((layer) => {
-                return layer === stubMiddlewareLayer ? serveStaticLayer : layer;
-            });
-        }
-    });
-}
-function isIgnoredPath(path, req) {
-    if (Config.ignorePaths === undefined)
-        return false;
-    return Config.ignorePaths instanceof RegExp
-        ? path.match(Config.ignorePaths)
-        : Config.ignorePaths(path, req);
-}
-function findTemplateFilePath(reqPath, root) {
-    if (reqPath.endsWith(".html")) {
-        const pathToTest = path.join(root, reqPath);
-        if (fs.existsSync(pathToTest))
-            return pathToTest;
+        });
     }
-    // find closest index.html to provided path
-    const basePath = reqPath.slice(0, reqPath.lastIndexOf("/"));
-    // if the path doesn't end with a /, look for root/req/path.html
-    if (!reqPath.endsWith("/")) {
-        const pathToTest = path.join(root, reqPath + ".html");
-        if (fs.existsSync(pathToTest))
-            return pathToTest;
+    getViteConfig() {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (!this._State.viteConfig) {
+                this._State.viteConfig = yield this.resolveConfig();
+            }
+            return this._State.viteConfig;
+        });
     }
-    const dirs = basePath.split("/");
-    while (dirs.length > 0) {
-        const pathToTest = path.join(root, ...dirs, "index.html");
-        if (fs.existsSync(pathToTest))
-            return pathToTest;
-        dirs.pop();
+    getDistPath() {
+        return __awaiter(this, void 0, void 0, function* () {
+            const config = yield this.getViteConfig();
+            return path.resolve(config.root, config.build.outDir);
+        });
     }
-    return undefined;
-}
-function injectViteHTMLMiddleware(app, server) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const config = yield getViteConfig();
-        app.use(config.base, (req, res, next) => __awaiter(this, void 0, void 0, function* () {
-            if (req.method !== "GET")
-                return next();
-            if (isIgnoredPath(req.path, req))
-                return next();
-            const templateFilePath = findTemplateFilePath(req.path, config.root);
-            if (templateFilePath === undefined)
-                return next();
-            const template = fs.readFileSync(templateFilePath, "utf8");
-            let html = yield server.transformIndexHtml(templateFilePath, template, req.originalUrl);
-            try {
-                html = yield getTransformedHTML(html, req);
-                res.send(html);
+    serveStatic() {
+        return __awaiter(this, void 0, void 0, function* () {
+            const distPath = yield this.getDistPath();
+            if (!fs.existsSync(distPath)) {
+                this.error(`${`Static files at ${pc.gray(distPath)} not found!`}`);
+                this.info(`${pc.yellow(`Did you forget to run ${pc.bold(pc.green("vite build"))} command?`)}`);
             }
-            catch (e) {
-                console.error(e);
-                res.status(500);
-                return next();
+            else {
+                this.info(`${pc.green(`Serving static files from ${pc.gray(distPath)}`)}`);
             }
-        }));
-    });
-}
-function injectHTMLMiddleware(app) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const distPath = yield getDistPath();
-        const config = yield getViteConfig();
-        app.use(config.base, (req, res, next) => __awaiter(this, void 0, void 0, function* () {
-            if (isIgnoredPath(req.path, req))
-                return next();
-            const templateFilePath = findTemplateFilePath(req.path, distPath);
-            if (templateFilePath === undefined)
-                return next();
-            let html = fs.readFileSync(templateFilePath, "utf8");
-            try {
-                html = yield getTransformedHTML(html, req);
-                res.send(html);
-            }
-            catch (e) {
-                console.error(e);
-                res.status(500);
-                return next();
+            return expressStaticGzip(distPath, Object.assign({ index: false, serveStatic: { redirect: false } }, this._State.staticOptions));
+        });
+    }
+    injectStaticMiddleware(app, middleware) {
+        return __awaiter(this, void 0, void 0, function* () {
+            var _a;
+            const config = yield this.getViteConfig();
+            app.use((_a = config.expressBase) !== null && _a !== void 0 ? _a : config.base, (req, res, next) => req.path.endsWith(".html") && !req.originalUrl.includes("?html-proxy")
+                ? next()
+                : middleware(req, res, next));
+            const router = (() => {
+                try {
+                    return app.router;
+                }
+                catch (_a) {
+                    return app._router;
+                }
+            })();
+            const stubMiddlewareLayer = router.stack.find((layer) => layer.handle === this.stubMiddleware);
+            if (stubMiddlewareLayer !== undefined) {
+                const serveStaticLayer = router.stack.pop();
+                router.stack = router.stack.map((layer) => {
+                    return layer === stubMiddlewareLayer ? serveStaticLayer : layer;
+                });
             }
-        }));
-    });
-}
-function startServer(server) {
-    return __awaiter(this, void 0, void 0, function* () {
-        var _a, _b;
-        const { createServer, mergeConfig } = yield import('vite');
-        const config = yield getViteConfig();
-        const isUsingViteResolvedConfig = "assetsInclude" in config;
-        const vite = yield createServer(mergeConfig(isUsingViteResolvedConfig ? {} : config, {
-            configFile: Config.viteConfigFile,
-            clearScreen: false,
-            appType: "custom",
-            server: {
-                middlewareMode: true,
-                hmr: (_b = (_a = config.server) === null || _a === void 0 ? void 0 : _a.hmr) !== null && _b !== void 0 ? _b : { server },
-            },
-        }));
-        server.on("close", () => __awaiter(this, void 0, void 0, function* () {
-            yield vite.close();
-            server.emit("vite:close");
-        }));
-        return vite;
-    });
-}
-function config(config) {
-    if (config.mode !== undefined)
-        Config.mode = config.mode;
-    Config.ignorePaths = config.ignorePaths;
-    Config.inlineViteConfig = config.inlineViteConfig;
-    Config.transformer = config.transformer;
-    Config.viteConfigFile = config.viteConfigFile;
-    if (config.verbosity !== undefined)
-        Config.verbosity = config.verbosity;
-}
-function bind(app, server, callback) {
-    return __awaiter(this, void 0, void 0, function* () {
-        info(`Running in ${pc.yellow(Config.mode)} mode`);
-        clearState();
-        if (Config.mode === "development") {
-            const vite = yield startServer(server);
-            yield injectStaticMiddleware(app, vite.middlewares);
-            yield injectViteHTMLMiddleware(app, vite);
+        });
+    }
+    isIgnoredPath(path, req) {
+        if (this.Config.ignorePaths === undefined)
+            return false;
+        return this.Config.ignorePaths instanceof RegExp
+            ? path.match(this.Config.ignorePaths)
+            : this.Config.ignorePaths(path, req);
+    }
+    findTemplateFilePath(reqPath, root) {
+        if (reqPath.endsWith(".html")) {
+            const pathToTest = path.join(root, reqPath);
+            if (fs.existsSync(pathToTest))
+                return pathToTest;
         }
-        else {
-            yield injectStaticMiddleware(app, yield serveStatic());
-            yield injectHTMLMiddleware(app);
+        // find closest index.html to provided path
+        const basePath = reqPath.slice(0, reqPath.lastIndexOf("/"));
+        const dirs = basePath.split("/");
+        while (dirs.length > 0) {
+            const pathToTest = path.join(root, ...dirs, "index.html");
+            if (fs.existsSync(pathToTest))
+                return pathToTest;
+            dirs.pop();
         }
-        callback === null || callback === void 0 ? void 0 : callback();
-    });
-}
-function listen(app, port, callback) {
-    const server = app.listen(port, () => bind(app, server, callback));
-    return server;
-}
-function build() {
-    return __awaiter(this, void 0, void 0, function* () {
-        const { build } = yield import('vite');
-        info("Build starting...");
-        yield build();
-        info("Build completed!");
-    });
+        return undefined;
+    }
+    injectViteHTMLMiddleware(app, server) {
+        return __awaiter(this, void 0, void 0, function* () {
+            var _a;
+            const config = yield this.getViteConfig();
+            app.use((_a = config.expressBase) !== null && _a !== void 0 ? _a : config.base, (req, res, next) => __awaiter(this, void 0, void 0, function* () {
+                if (req.method !== "GET")
+                    return next();
+                if (this.isIgnoredPath(req.path, req))
+                    return next();
+                const templateFilePath = this.findTemplateFilePath(req.path, config.root);
+                if (templateFilePath === undefined)
+                    return next();
+                const template = fs.readFileSync(templateFilePath, "utf8");
+                let html = yield server.transformIndexHtml(templateFilePath, template, req.originalUrl);
+                try {
+                    html = yield this.getTransformedHTML(html, req);
+                    res.send(html);
+                }
+                catch (e) {
+                    console.error(e);
+                    res.status(500);
+                    return next();
+                }
+            }));
+        });
+    }
+    injectHTMLMiddleware(app) {
+        return __awaiter(this, void 0, void 0, function* () {
+            var _a;
+            const distPath = yield this.getDistPath();
+            const config = yield this.getViteConfig();
+            app.use((_a = config.expressBase) !== null && _a !== void 0 ? _a : config.base, (req, res, next) => __awaiter(this, void 0, void 0, function* () {
+                if (this.isIgnoredPath(req.path, req))
+                    return next();
+                const templateFilePath = this.findTemplateFilePath(req.path, distPath);
+                if (templateFilePath === undefined)
+                    return next();
+                let html = fs.readFileSync(templateFilePath, "utf8");
+                try {
+                    html = yield this.getTransformedHTML(html, req);
+                    res.send(html);
+                }
+                catch (e) {
+                    console.error(e);
+                    res.status(500);
+                    return next();
+                }
+            }));
+        });
+    }
+    startServer(server) {
+        return __awaiter(this, void 0, void 0, function* () {
+            var _a, _b;
+            const { createServer, mergeConfig } = yield import('vite');
+            const config = yield this.getViteConfig();
+            const isUsingViteResolvedConfig = "assetsInclude" in config;
+            const vite = yield createServer(mergeConfig(isUsingViteResolvedConfig ? {} : config, {
+                configFile: this.Config.viteConfigFile,
+                clearScreen: false,
+                appType: "custom",
+                server: {
+                    middlewareMode: true,
+                    hmr: (_b = (_a = config.server) === null || _a === void 0 ? void 0 : _a.hmr) !== null && _b !== void 0 ? _b : { server },
+                },
+            }));
+            server.on("close", () => __awaiter(this, void 0, void 0, function* () {
+                yield vite.close();
+                server.emit("vite:close");
+            }));
+            return vite;
+        });
+    }
+    config(config) {
+        if (config.mode !== undefined)
+            this.Config.mode = config.mode;
+        this.Config.ignorePaths = config.ignorePaths;
+        this.Config.inlineViteConfig = config.inlineViteConfig;
+        this.Config.transformer = config.transformer;
+        this.Config.viteConfigFile = config.viteConfigFile;
+        if (config.verbosity !== undefined)
+            this.Config.verbosity = config.verbosity;
+    }
+    bind(app, server, callback) {
+        return __awaiter(this, void 0, void 0, function* () {
+            this.info(`Running in ${pc.yellow(this.Config.mode)} mode`);
+            this.clearState();
+            if (this.Config.mode === "development") {
+                const vite = yield this.startServer(server);
+                yield this.injectStaticMiddleware(app, vite.middlewares);
+                yield this.injectViteHTMLMiddleware(app, vite);
+            }
+            else {
+                yield this.injectStaticMiddleware(app, yield this.serveStatic());
+                yield this.injectHTMLMiddleware(app);
+            }
+            callback === null || callback === void 0 ? void 0 : callback();
+        });
+    }
+    listen(app, port, callback) {
+        const server = app.listen(port, () => this.bind(app, server, callback));
+        return server;
+    }
+    build() {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { build } = yield import('vite');
+            this.info("Build starting...");
+            yield build();
+            this.info("Build completed!");
+        });
+    }
 }
-var main = {
-    config,
-    bind,
-    listen,
-    build,
-    static: (options) => {
-        _State.staticOptions = options;
-        return stubMiddleware;
-    },
-    getViteConfig,
-    Verbosity,
-};
 
-module.exports = main;
+exports.ViteExpress = ViteExpress;
+exports.default = ViteExpress;
