diff --git a/node_modules/@hocuspocus/server/dist/hocuspocus-server.cjs b/node_modules/@hocuspocus/server/dist/hocuspocus-server.cjs
index 0df5610..fcb559a 100644
--- a/node_modules/@hocuspocus/server/dist/hocuspocus-server.cjs
+++ b/node_modules/@hocuspocus/server/dist/hocuspocus-server.cjs
@@ -2713,32 +2713,48 @@ class Hocuspocus {
      * the update is incoming from the provider, but can be anything if the updates is originated from an extension.
      */
     async handleDocumentUpdate(document, connection, update, request) {
-        var _a, _b;
-        const hookPayload = {
-            instance: this,
-            clientsCount: document.getConnectionsCount(),
-            context: (connection === null || connection === void 0 ? void 0 : connection.context) || {},
-            document,
-            documentName: document.name,
-            requestHeaders: (_a = request === null || request === void 0 ? void 0 : request.headers) !== null && _a !== void 0 ? _a : {},
-            requestParameters: getParameters(request),
-            socketId: (_b = connection === null || connection === void 0 ? void 0 : connection.socketId) !== null && _b !== void 0 ? _b : '',
-            update,
-            transactionOrigin: connection,
-        };
-        this.hooks('onChange', hookPayload).catch(error => {
-            // TODO: what's the intention of this catch -> throw?
-            throw error;
-        });
-        // If the update was received through other ways than the
-        // WebSocket connection, we don’t need to feel responsible for
-        // storing the content.
-        // also ignore changes incoming through redis connection, as this would be a breaking change (#730, #696, #606)
-        if (!connection || connection === '__hocuspocus__redis__origin__') {
-            return;
-        }
-        await this.storeDocumentHooks(document, hookPayload);
-    }
+			var _a, _b
+			const hookPayload = {
+				instance: this,
+				clientsCount: document.getConnectionsCount(),
+				context:
+					(connection === null || connection === void 0
+						? void 0
+						: connection.context) || {},
+				document,
+				documentName: document.name,
+				requestHeaders:
+					(_a =
+						request === null || request === void 0
+							? void 0
+							: request.headers) !== null && _a !== void 0
+						? _a
+						: {},
+				requestParameters: getParameters(request),
+				socketId:
+					(_b =
+						connection === null || connection === void 0
+							? void 0
+							: connection.socketId) !== null && _b !== void 0
+						? _b
+						: "",
+				update,
+				transactionOrigin: connection,
+			}
+			this.hooks("onChange", hookPayload).catch((error) => {
+				// TODO: what's the intention of this catch -> throw?
+				throw error
+			})
+			// If the update was received through other ways than the
+			// WebSocket connection, we don’t need to feel responsible for
+			// storing the content.
+			// also ignore changes incoming through redis connection, as this would be a breaking change (#730, #696, #606)
+			// NOTE: THIS IS PATCHED BY US
+			if (connection === "__hocuspocus__redis__origin__") {
+				return
+			}
+			await this.storeDocumentHooks(document, hookPayload)
+		}
     /**
      * Create a new document by the given request
      */
diff --git a/node_modules/@hocuspocus/server/dist/hocuspocus-server.esm.js b/node_modules/@hocuspocus/server/dist/hocuspocus-server.esm.js
index c183bb3..dabb50f 100644
--- a/node_modules/@hocuspocus/server/dist/hocuspocus-server.esm.js
+++ b/node_modules/@hocuspocus/server/dist/hocuspocus-server.esm.js
@@ -2707,7 +2707,8 @@ class Hocuspocus {
         // WebSocket connection, we don’t need to feel responsible for
         // storing the content.
         // also ignore changes incoming through redis connection, as this would be a breaking change (#730, #696, #606)
-        if (!connection || connection === '__hocuspocus__redis__origin__') {
+        // NOTE: THIS IS PATCHED BY US
+        if (connection === '__hocuspocus__redis__origin__') {
             return;
         }
         await this.storeDocumentHooks(document, hookPayload);
